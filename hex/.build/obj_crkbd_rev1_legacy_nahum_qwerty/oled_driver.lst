   1               		.file	"oled_driver.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.i2c_transmit_P.constprop.2,"ax",@progbits
  12               	i2c_transmit_P.constprop.2:
  13               	.LVL0:
  14               	.LFB39:
  15               		.file 1 "drivers/oled/oled_driver.c"
   1:drivers/oled/oled_driver.c **** /*
   2:drivers/oled/oled_driver.c **** Copyright 2019 Ryan Caltabiano <https://github.com/XScorpion2>
   3:drivers/oled/oled_driver.c **** 
   4:drivers/oled/oled_driver.c **** This program is free software: you can redistribute it and/or modify
   5:drivers/oled/oled_driver.c **** it under the terms of the GNU General Public License as published by
   6:drivers/oled/oled_driver.c **** the Free Software Foundation, either version 2 of the License, or
   7:drivers/oled/oled_driver.c **** (at your option) any later version.
   8:drivers/oled/oled_driver.c **** 
   9:drivers/oled/oled_driver.c **** This program is distributed in the hope that it will be useful,
  10:drivers/oled/oled_driver.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:drivers/oled/oled_driver.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:drivers/oled/oled_driver.c **** GNU General Public License for more details.
  13:drivers/oled/oled_driver.c **** 
  14:drivers/oled/oled_driver.c **** You should have received a copy of the GNU General Public License
  15:drivers/oled/oled_driver.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:drivers/oled/oled_driver.c **** */
  17:drivers/oled/oled_driver.c **** #include "i2c_master.h"
  18:drivers/oled/oled_driver.c **** #include "oled_driver.h"
  19:drivers/oled/oled_driver.c **** #include OLED_FONT_H
  20:drivers/oled/oled_driver.c **** #include "timer.h"
  21:drivers/oled/oled_driver.c **** #include "print.h"
  22:drivers/oled/oled_driver.c **** 
  23:drivers/oled/oled_driver.c **** #include <string.h>
  24:drivers/oled/oled_driver.c **** 
  25:drivers/oled/oled_driver.c **** #include "progmem.h"
  26:drivers/oled/oled_driver.c **** 
  27:drivers/oled/oled_driver.c **** // Used commands from spec sheet: https://cdn-shop.adafruit.com/datasheets/SSD1306.pdf
  28:drivers/oled/oled_driver.c **** // for SH1106: https://www.velleman.eu/downloads/29/infosheets/sh1106_datasheet.pdf
  29:drivers/oled/oled_driver.c **** 
  30:drivers/oled/oled_driver.c **** // Fundamental Commands
  31:drivers/oled/oled_driver.c **** #define CONTRAST 0x81
  32:drivers/oled/oled_driver.c **** #define DISPLAY_ALL_ON 0xA5
  33:drivers/oled/oled_driver.c **** #define DISPLAY_ALL_ON_RESUME 0xA4
  34:drivers/oled/oled_driver.c **** #define NORMAL_DISPLAY 0xA6
  35:drivers/oled/oled_driver.c **** #define DISPLAY_ON 0xAF
  36:drivers/oled/oled_driver.c **** #define DISPLAY_OFF 0xAE
  37:drivers/oled/oled_driver.c **** #define NOP 0xE3
  38:drivers/oled/oled_driver.c **** 
  39:drivers/oled/oled_driver.c **** // Scrolling Commands
  40:drivers/oled/oled_driver.c **** #define ACTIVATE_SCROLL 0x2F
  41:drivers/oled/oled_driver.c **** #define DEACTIVATE_SCROLL 0x2E
  42:drivers/oled/oled_driver.c **** #define SCROLL_RIGHT 0x26
  43:drivers/oled/oled_driver.c **** #define SCROLL_LEFT 0x27
  44:drivers/oled/oled_driver.c **** #define SCROLL_RIGHT_UP 0x29
  45:drivers/oled/oled_driver.c **** #define SCROLL_LEFT_UP 0x2A
  46:drivers/oled/oled_driver.c **** 
  47:drivers/oled/oled_driver.c **** // Addressing Setting Commands
  48:drivers/oled/oled_driver.c **** #define MEMORY_MODE 0x20
  49:drivers/oled/oled_driver.c **** #define COLUMN_ADDR 0x21
  50:drivers/oled/oled_driver.c **** #define PAGE_ADDR 0x22
  51:drivers/oled/oled_driver.c **** #define PAM_SETCOLUMN_LSB 0x00
  52:drivers/oled/oled_driver.c **** #define PAM_SETCOLUMN_MSB 0x10
  53:drivers/oled/oled_driver.c **** #define PAM_PAGE_ADDR 0xB0  // 0xb0 -- 0xb7
  54:drivers/oled/oled_driver.c **** 
  55:drivers/oled/oled_driver.c **** // Hardware Configuration Commands
  56:drivers/oled/oled_driver.c **** #define DISPLAY_START_LINE 0x40
  57:drivers/oled/oled_driver.c **** #define SEGMENT_REMAP 0xA0
  58:drivers/oled/oled_driver.c **** #define SEGMENT_REMAP_INV 0xA1
  59:drivers/oled/oled_driver.c **** #define MULTIPLEX_RATIO 0xA8
  60:drivers/oled/oled_driver.c **** #define COM_SCAN_INC 0xC0
  61:drivers/oled/oled_driver.c **** #define COM_SCAN_DEC 0xC8
  62:drivers/oled/oled_driver.c **** #define DISPLAY_OFFSET 0xD3
  63:drivers/oled/oled_driver.c **** #define COM_PINS 0xDA
  64:drivers/oled/oled_driver.c **** #define COM_PINS_SEQ 0x02
  65:drivers/oled/oled_driver.c **** #define COM_PINS_ALT 0x12
  66:drivers/oled/oled_driver.c **** #define COM_PINS_SEQ_LR 0x22
  67:drivers/oled/oled_driver.c **** #define COM_PINS_ALT_LR 0x32
  68:drivers/oled/oled_driver.c **** 
  69:drivers/oled/oled_driver.c **** // Timing & Driving Commands
  70:drivers/oled/oled_driver.c **** #define DISPLAY_CLOCK 0xD5
  71:drivers/oled/oled_driver.c **** #define PRE_CHARGE_PERIOD 0xD9
  72:drivers/oled/oled_driver.c **** #define VCOM_DETECT 0xDB
  73:drivers/oled/oled_driver.c **** 
  74:drivers/oled/oled_driver.c **** // Charge Pump Commands
  75:drivers/oled/oled_driver.c **** #define CHARGE_PUMP 0x8D
  76:drivers/oled/oled_driver.c **** 
  77:drivers/oled/oled_driver.c **** // Misc defines
  78:drivers/oled/oled_driver.c **** #ifndef OLED_BLOCK_COUNT
  79:drivers/oled/oled_driver.c **** #    define OLED_BLOCK_COUNT (sizeof(OLED_BLOCK_TYPE) * 8)
  80:drivers/oled/oled_driver.c **** #endif
  81:drivers/oled/oled_driver.c **** #ifndef OLED_BLOCK_SIZE
  82:drivers/oled/oled_driver.c **** #    define OLED_BLOCK_SIZE (OLED_MATRIX_SIZE / OLED_BLOCK_COUNT)
  83:drivers/oled/oled_driver.c **** #endif
  84:drivers/oled/oled_driver.c **** 
  85:drivers/oled/oled_driver.c **** #define OLED_ALL_BLOCKS_MASK (((((OLED_BLOCK_TYPE)1 << (OLED_BLOCK_COUNT - 1)) - 1) << 1) | 1)
  86:drivers/oled/oled_driver.c **** 
  87:drivers/oled/oled_driver.c **** // i2c defines
  88:drivers/oled/oled_driver.c **** #define I2C_CMD 0x00
  89:drivers/oled/oled_driver.c **** #define I2C_DATA 0x40
  90:drivers/oled/oled_driver.c **** #if defined(__AVR__)
  91:drivers/oled/oled_driver.c **** #    define I2C_TRANSMIT_P(data) i2c_transmit_P((OLED_DISPLAY_ADDRESS << 1), &data[0], sizeof(data)
  92:drivers/oled/oled_driver.c **** #else  // defined(__AVR__)
  93:drivers/oled/oled_driver.c **** #    define I2C_TRANSMIT_P(data) i2c_transmit((OLED_DISPLAY_ADDRESS << 1), &data[0], sizeof(data), 
  94:drivers/oled/oled_driver.c **** #endif  // defined(__AVR__)
  95:drivers/oled/oled_driver.c **** #define I2C_TRANSMIT(data) i2c_transmit((OLED_DISPLAY_ADDRESS << 1), &data[0], sizeof(data), OLED_I
  96:drivers/oled/oled_driver.c **** #define I2C_WRITE_REG(mode, data, size) i2c_writeReg((OLED_DISPLAY_ADDRESS << 1), mode, data, size,
  97:drivers/oled/oled_driver.c **** 
  98:drivers/oled/oled_driver.c **** #define HAS_FLAGS(bits, flags) ((bits & flags) == flags)
  99:drivers/oled/oled_driver.c **** 
 100:drivers/oled/oled_driver.c **** // Display buffer's is the same as the OLED memory layout
 101:drivers/oled/oled_driver.c **** // this is so we don't end up with rounding errors with
 102:drivers/oled/oled_driver.c **** // parts of the display unusable or don't get cleared correctly
 103:drivers/oled/oled_driver.c **** // and also allows for drawing & inverting
 104:drivers/oled/oled_driver.c **** uint8_t         oled_buffer[OLED_MATRIX_SIZE];
 105:drivers/oled/oled_driver.c **** uint8_t *       oled_cursor;
 106:drivers/oled/oled_driver.c **** OLED_BLOCK_TYPE oled_dirty          = 0;
 107:drivers/oled/oled_driver.c **** bool            oled_initialized    = false;
 108:drivers/oled/oled_driver.c **** bool            oled_active         = false;
 109:drivers/oled/oled_driver.c **** bool            oled_scrolling      = false;
 110:drivers/oled/oled_driver.c **** uint8_t         oled_brightness     = OLED_BRIGHTNESS;
 111:drivers/oled/oled_driver.c **** uint8_t         oled_rotation       = 0;
 112:drivers/oled/oled_driver.c **** uint8_t         oled_rotation_width = 0;
 113:drivers/oled/oled_driver.c **** uint8_t         oled_scroll_speed   = 0;  // this holds the speed after being remapped to ssd1306 i
 114:drivers/oled/oled_driver.c **** uint8_t         oled_scroll_start   = 0;
 115:drivers/oled/oled_driver.c **** uint8_t         oled_scroll_end     = 7;
 116:drivers/oled/oled_driver.c **** #if OLED_TIMEOUT > 0
 117:drivers/oled/oled_driver.c **** uint32_t oled_timeout;
 118:drivers/oled/oled_driver.c **** #endif
 119:drivers/oled/oled_driver.c **** #if OLED_SCROLL_TIMEOUT > 0
 120:drivers/oled/oled_driver.c **** uint32_t oled_scroll_timeout;
 121:drivers/oled/oled_driver.c **** #endif
 122:drivers/oled/oled_driver.c **** 
 123:drivers/oled/oled_driver.c **** // Internal variables to reduce math instructions
 124:drivers/oled/oled_driver.c **** 
 125:drivers/oled/oled_driver.c **** #if defined(__AVR__)
 126:drivers/oled/oled_driver.c **** // identical to i2c_transmit, but for PROGMEM since all initialization is in PROGMEM arrays current
 127:drivers/oled/oled_driver.c **** // probably should move this into i2c_master...
 128:drivers/oled/oled_driver.c **** static i2c_status_t i2c_transmit_P(uint8_t address, const uint8_t *data, uint16_t length, uint16_t 
  16               		.loc 1 128 21 view -0
  17               		.cfi_startproc
  18               		.loc 1 128 21 is_stmt 0 view .LVU1
  19 0000 CF92      		push r12
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 12, -2
  23 0002 DF92      		push r13
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 13, -3
  27 0004 EF92      		push r14
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 14, -4
  31 0006 FF92      		push r15
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 15, -5
  35 0008 0F93      		push r16
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 16, -6
  39 000a 1F93      		push r17
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 17, -7
  43 000c CF93      		push r28
  44               	.LCFI6:
  45               		.cfi_def_cfa_offset 9
  46               		.cfi_offset 28, -8
  47 000e DF93      		push r29
  48               	.LCFI7:
  49               		.cfi_def_cfa_offset 10
  50               		.cfi_offset 29, -9
  51               	/* prologue: function */
  52               	/* frame size = 0 */
  53               	/* stack size = 8 */
  54               	.L__stack_usage = 8
  55 0010 6C01      		movw r12,r24
  56 0012 7B01      		movw r14,r22
  57               	.LVL1:
 129:drivers/oled/oled_driver.c ****     i2c_status_t status = i2c_start(address | I2C_WRITE, timeout);
  58               		.loc 1 129 5 is_stmt 1 view .LVU2
  59               		.loc 1 129 27 is_stmt 0 view .LVU3
  60 0014 64E6      		ldi r22,lo8(100)
  61 0016 70E0      		ldi r23,0
  62               	.LVL2:
  63               		.loc 1 129 27 view .LVU4
  64 0018 88E7      		ldi r24,lo8(120)
  65               	.LVL3:
  66               		.loc 1 129 27 view .LVU5
  67 001a 0E94 0000 		call i2c_start
  68               	.LVL4:
  69 001e EC01      		movw r28,r24
  70               	.LVL5:
 130:drivers/oled/oled_driver.c **** 
 131:drivers/oled/oled_driver.c ****     for (uint16_t i = 0; i < length && status >= 0; i++) {
  71               		.loc 1 131 5 is_stmt 1 view .LVU6
  72               	.LBB4:
  73               		.loc 1 131 10 view .LVU7
  74               		.loc 1 131 26 view .LVU8
  75               		.loc 1 131 37 is_stmt 0 view .LVU9
  76 0020 97FD      		sbrc r25,7
  77 0022 00C0      		rjmp .L2
  78               		.loc 1 131 19 view .LVU10
  79 0024 10E0      		ldi r17,0
  80 0026 00E0      		ldi r16,0
  81               	.LVL6:
  82               	.L3:
 132:drivers/oled/oled_driver.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
  83               		.loc 1 132 9 is_stmt 1 view .LVU11
  84               	.LBB5:
  85               		.loc 1 132 28 view .LVU12
  86               		.loc 1 132 28 view .LVU13
  87               		.loc 1 132 28 view .LVU14
  88 0028 F601      		movw r30,r12
  89 002a E00F      		add r30,r16
  90 002c F11F      		adc r31,r17
  91               	.LVL7:
  92               		.loc 1 132 28 is_stmt 0 view .LVU15
  93               	/* #APP */
  94               	 ;  132 "drivers/oled/oled_driver.c" 1
  95 002e 8491      		lpm r24, Z
  96               		
  97               	 ;  0 "" 2
  98               	.LVL8:
  99               		.loc 1 132 28 is_stmt 1 view .LVU16
 100               	/* #NOAPP */
 101               	.LBE5:
 102               		.loc 1 132 18 is_stmt 0 view .LVU17
 103 0030 64E6      		ldi r22,lo8(100)
 104 0032 70E0      		ldi r23,0
 105 0034 0E94 0000 		call i2c_write
 106               	.LVL9:
 107               		.loc 1 132 18 view .LVU18
 108 0038 EC01      		movw r28,r24
 109               	.LVL10:
 133:drivers/oled/oled_driver.c ****         if (status) break;
 110               		.loc 1 133 9 is_stmt 1 view .LVU19
 111               		.loc 1 133 12 is_stmt 0 view .LVU20
 112 003a 892B      		or r24,r25
 113 003c 01F4      		brne .L2
 131:drivers/oled/oled_driver.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
 114               		.loc 1 131 53 is_stmt 1 view .LVU21
 131:drivers/oled/oled_driver.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
 115               		.loc 1 131 54 is_stmt 0 view .LVU22
 116 003e 0F5F      		subi r16,-1
 117 0040 1F4F      		sbci r17,-1
 118               	.LVL11:
 131:drivers/oled/oled_driver.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
 119               		.loc 1 131 26 is_stmt 1 view .LVU23
 131:drivers/oled/oled_driver.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
 120               		.loc 1 131 5 is_stmt 0 view .LVU24
 121 0042 0E15      		cp r16,r14
 122 0044 1F05      		cpc r17,r15
 123 0046 01F4      		brne .L3
 124               	.LVL12:
 125               	.L2:
 131:drivers/oled/oled_driver.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
 126               		.loc 1 131 5 view .LVU25
 127               	.LBE4:
 134:drivers/oled/oled_driver.c ****     }
 135:drivers/oled/oled_driver.c **** 
 136:drivers/oled/oled_driver.c ****     i2c_stop();
 128               		.loc 1 136 5 is_stmt 1 view .LVU26
 129 0048 0E94 0000 		call i2c_stop
 130               	.LVL13:
 137:drivers/oled/oled_driver.c **** 
 138:drivers/oled/oled_driver.c ****     return status;
 131               		.loc 1 138 5 view .LVU27
 139:drivers/oled/oled_driver.c **** }
 132               		.loc 1 139 1 is_stmt 0 view .LVU28
 133 004c CE01      		movw r24,r28
 134               	/* epilogue start */
 135 004e DF91      		pop r29
 136 0050 CF91      		pop r28
 137               	.LVL14:
 138               		.loc 1 139 1 view .LVU29
 139 0052 1F91      		pop r17
 140 0054 0F91      		pop r16
 141 0056 FF90      		pop r15
 142 0058 EF90      		pop r14
 143               	.LVL15:
 144               		.loc 1 139 1 view .LVU30
 145 005a DF90      		pop r13
 146 005c CF90      		pop r12
 147 005e 0895      		ret
 148               		.cfi_endproc
 149               	.LFE39:
 151               		.section	.text.oled_init_user,"ax",@progbits
 152               		.weak	oled_init_user
 154               	oled_init_user:
 155               	.LVL16:
 156               	.LFB4:
 140:drivers/oled/oled_driver.c **** #endif
 141:drivers/oled/oled_driver.c **** 
 142:drivers/oled/oled_driver.c **** // Flips the rendering bits for a character at the current cursor position
 143:drivers/oled/oled_driver.c **** static void InvertCharacter(uint8_t *cursor) {
 144:drivers/oled/oled_driver.c ****     const uint8_t *end = cursor + OLED_FONT_WIDTH;
 145:drivers/oled/oled_driver.c ****     while (cursor < end) {
 146:drivers/oled/oled_driver.c ****         *cursor = ~(*cursor);
 147:drivers/oled/oled_driver.c ****         cursor++;
 148:drivers/oled/oled_driver.c ****     }
 149:drivers/oled/oled_driver.c **** }
 150:drivers/oled/oled_driver.c **** 
 151:drivers/oled/oled_driver.c **** bool oled_init(uint8_t rotation) {
 152:drivers/oled/oled_driver.c ****     oled_rotation = oled_init_user(rotation);
 153:drivers/oled/oled_driver.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 154:drivers/oled/oled_driver.c ****         oled_rotation_width = OLED_DISPLAY_WIDTH;
 155:drivers/oled/oled_driver.c ****     } else {
 156:drivers/oled/oled_driver.c ****         oled_rotation_width = OLED_DISPLAY_HEIGHT;
 157:drivers/oled/oled_driver.c ****     }
 158:drivers/oled/oled_driver.c ****     i2c_init();
 159:drivers/oled/oled_driver.c **** 
 160:drivers/oled/oled_driver.c ****     static const uint8_t PROGMEM display_setup1[] = {
 161:drivers/oled/oled_driver.c ****         I2C_CMD,
 162:drivers/oled/oled_driver.c ****         DISPLAY_OFF,
 163:drivers/oled/oled_driver.c ****         DISPLAY_CLOCK,
 164:drivers/oled/oled_driver.c ****         0x80,
 165:drivers/oled/oled_driver.c ****         MULTIPLEX_RATIO,
 166:drivers/oled/oled_driver.c ****         OLED_DISPLAY_HEIGHT - 1,
 167:drivers/oled/oled_driver.c ****         DISPLAY_OFFSET,
 168:drivers/oled/oled_driver.c ****         0x00,
 169:drivers/oled/oled_driver.c ****         DISPLAY_START_LINE | 0x00,
 170:drivers/oled/oled_driver.c ****         CHARGE_PUMP,
 171:drivers/oled/oled_driver.c ****         0x14,
 172:drivers/oled/oled_driver.c **** #if (OLED_IC != OLED_IC_SH1106)
 173:drivers/oled/oled_driver.c ****         // MEMORY_MODE is unsupported on SH1106 (Page Addressing only)
 174:drivers/oled/oled_driver.c ****         MEMORY_MODE,
 175:drivers/oled/oled_driver.c ****         0x00,  // Horizontal addressing mode
 176:drivers/oled/oled_driver.c **** #endif
 177:drivers/oled/oled_driver.c ****     };
 178:drivers/oled/oled_driver.c ****     if (I2C_TRANSMIT_P(display_setup1) != I2C_STATUS_SUCCESS) {
 179:drivers/oled/oled_driver.c ****         print("oled_init cmd set 1 failed\n");
 180:drivers/oled/oled_driver.c ****         return false;
 181:drivers/oled/oled_driver.c ****     }
 182:drivers/oled/oled_driver.c **** 
 183:drivers/oled/oled_driver.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_180)) {
 184:drivers/oled/oled_driver.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, SEGMENT_REMAP_INV, COM_SCAN_DEC};
 185:drivers/oled/oled_driver.c ****         if (I2C_TRANSMIT_P(display_normal) != I2C_STATUS_SUCCESS) {
 186:drivers/oled/oled_driver.c ****             print("oled_init cmd normal rotation failed\n");
 187:drivers/oled/oled_driver.c ****             return false;
 188:drivers/oled/oled_driver.c ****         }
 189:drivers/oled/oled_driver.c ****     } else {
 190:drivers/oled/oled_driver.c ****         static const uint8_t PROGMEM display_flipped[] = {I2C_CMD, SEGMENT_REMAP, COM_SCAN_INC};
 191:drivers/oled/oled_driver.c ****         if (I2C_TRANSMIT_P(display_flipped) != I2C_STATUS_SUCCESS) {
 192:drivers/oled/oled_driver.c ****             print("display_flipped failed\n");
 193:drivers/oled/oled_driver.c ****             return false;
 194:drivers/oled/oled_driver.c ****         }
 195:drivers/oled/oled_driver.c ****     }
 196:drivers/oled/oled_driver.c **** 
 197:drivers/oled/oled_driver.c ****     static const uint8_t PROGMEM display_setup2[] = {I2C_CMD, COM_PINS, OLED_COM_PINS, CONTRAST, OL
 198:drivers/oled/oled_driver.c ****     if (I2C_TRANSMIT_P(display_setup2) != I2C_STATUS_SUCCESS) {
 199:drivers/oled/oled_driver.c ****         print("display_setup2 failed\n");
 200:drivers/oled/oled_driver.c ****         return false;
 201:drivers/oled/oled_driver.c ****     }
 202:drivers/oled/oled_driver.c **** 
 203:drivers/oled/oled_driver.c **** #if OLED_TIMEOUT > 0
 204:drivers/oled/oled_driver.c ****     oled_timeout = timer_read32() + OLED_TIMEOUT;
 205:drivers/oled/oled_driver.c **** #endif
 206:drivers/oled/oled_driver.c **** #if OLED_SCROLL_TIMEOUT > 0
 207:drivers/oled/oled_driver.c ****     oled_scroll_timeout = timer_read32() + OLED_SCROLL_TIMEOUT;
 208:drivers/oled/oled_driver.c **** #endif
 209:drivers/oled/oled_driver.c **** 
 210:drivers/oled/oled_driver.c ****     oled_clear();
 211:drivers/oled/oled_driver.c ****     oled_initialized = true;
 212:drivers/oled/oled_driver.c ****     oled_active      = true;
 213:drivers/oled/oled_driver.c ****     oled_scrolling   = false;
 214:drivers/oled/oled_driver.c ****     return true;
 215:drivers/oled/oled_driver.c **** }
 216:drivers/oled/oled_driver.c **** 
 217:drivers/oled/oled_driver.c **** __attribute__((weak)) oled_rotation_t oled_init_user(oled_rotation_t rotation) { return rotation; }
 157               		.loc 1 217 80 is_stmt 1 view -0
 158               		.cfi_startproc
 159               	/* prologue: function */
 160               	/* frame size = 0 */
 161               	/* stack size = 0 */
 162               	.L__stack_usage = 0
 163               		.loc 1 217 82 view .LVU32
 164               	/* epilogue start */
 165               		.loc 1 217 1 is_stmt 0 view .LVU33
 166 0000 0895      		ret
 167               		.cfi_endproc
 168               	.LFE4:
 170               		.section	.text.oled_clear,"ax",@progbits
 171               	.global	oled_clear
 173               	oled_clear:
 174               	.LFB5:
 218:drivers/oled/oled_driver.c **** 
 219:drivers/oled/oled_driver.c **** void oled_clear(void) {
 175               		.loc 1 219 23 is_stmt 1 view -0
 176               		.cfi_startproc
 177               	/* prologue: function */
 178               	/* frame size = 0 */
 179               	/* stack size = 0 */
 180               	.L__stack_usage = 0
 220:drivers/oled/oled_driver.c ****     memset(oled_buffer, 0, sizeof(oled_buffer));
 181               		.loc 1 220 5 view .LVU35
 182 0000 E0E0      		ldi r30,lo8(oled_buffer)
 183 0002 F0E0      		ldi r31,hi8(oled_buffer)
 184 0004 80E0      		ldi r24,0
 185 0006 92E0      		ldi r25,lo8(2)
 186 0008 DF01      		movw r26,r30
 187 000a 9C01      		movw r18,r24
 188               		0:
 189 000c 1D92      		st X+,__zero_reg__
 190 000e 2150      		subi r18,1
 191 0010 3040      		sbci r19,0
 192 0012 01F4      		brne 0b
 221:drivers/oled/oled_driver.c ****     oled_cursor = &oled_buffer[0];
 193               		.loc 1 221 5 view .LVU36
 194               		.loc 1 221 17 is_stmt 0 view .LVU37
 195 0014 F093 0000 		sts oled_cursor+1,r31
 196 0018 E093 0000 		sts oled_cursor,r30
 222:drivers/oled/oled_driver.c ****     oled_dirty  = OLED_ALL_BLOCKS_MASK;
 197               		.loc 1 222 5 is_stmt 1 view .LVU38
 198               		.loc 1 222 17 is_stmt 0 view .LVU39
 199 001c 8FEF      		ldi r24,lo8(-1)
 200 001e 9FEF      		ldi r25,lo8(-1)
 201 0020 9093 0000 		sts oled_dirty+1,r25
 202 0024 8093 0000 		sts oled_dirty,r24
 203               	/* epilogue start */
 223:drivers/oled/oled_driver.c **** }
 204               		.loc 1 223 1 view .LVU40
 205 0028 0895      		ret
 206               		.cfi_endproc
 207               	.LFE5:
 209               		.section	.text.oled_init,"ax",@progbits
 210               	.global	oled_init
 212               	oled_init:
 213               	.LVL17:
 214               	.LFB3:
 151:drivers/oled/oled_driver.c ****     oled_rotation = oled_init_user(rotation);
 215               		.loc 1 151 34 is_stmt 1 view -0
 216               		.cfi_startproc
 217               	/* prologue: function */
 218               	/* frame size = 0 */
 219               	/* stack size = 0 */
 220               	.L__stack_usage = 0
 152:drivers/oled/oled_driver.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 221               		.loc 1 152 5 view .LVU42
 152:drivers/oled/oled_driver.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 222               		.loc 1 152 21 is_stmt 0 view .LVU43
 223 0000 0E94 0000 		call oled_init_user
 224               	.LVL18:
 152:drivers/oled/oled_driver.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 225               		.loc 1 152 19 view .LVU44
 226 0004 8093 0000 		sts oled_rotation,r24
 153:drivers/oled/oled_driver.c ****         oled_rotation_width = OLED_DISPLAY_WIDTH;
 227               		.loc 1 153 5 is_stmt 1 view .LVU45
 153:drivers/oled/oled_driver.c ****         oled_rotation_width = OLED_DISPLAY_WIDTH;
 228               		.loc 1 153 8 is_stmt 0 view .LVU46
 229 0008 80FD      		sbrc r24,0
 230 000a 00C0      		rjmp .L8
 154:drivers/oled/oled_driver.c ****     } else {
 231               		.loc 1 154 9 is_stmt 1 view .LVU47
 154:drivers/oled/oled_driver.c ****     } else {
 232               		.loc 1 154 29 is_stmt 0 view .LVU48
 233 000c 80E8      		ldi r24,lo8(-128)
 234               	.L17:
 156:drivers/oled/oled_driver.c ****     }
 235               		.loc 1 156 29 view .LVU49
 236 000e 8093 0000 		sts oled_rotation_width,r24
 158:drivers/oled/oled_driver.c **** 
 237               		.loc 1 158 5 is_stmt 1 view .LVU50
 238 0012 0E94 0000 		call i2c_init
 239               	.LVL19:
 160:drivers/oled/oled_driver.c ****         I2C_CMD,
 240               		.loc 1 160 5 view .LVU51
 178:drivers/oled/oled_driver.c ****         print("oled_init cmd set 1 failed\n");
 241               		.loc 1 178 5 view .LVU52
 178:drivers/oled/oled_driver.c ****         print("oled_init cmd set 1 failed\n");
 242               		.loc 1 178 9 is_stmt 0 view .LVU53
 243 0016 6DE0      		ldi r22,lo8(13)
 244 0018 70E0      		ldi r23,0
 245 001a 80E0      		ldi r24,lo8(display_setup1.2026)
 246 001c 90E0      		ldi r25,hi8(display_setup1.2026)
 247 001e 0E94 0000 		call i2c_transmit_P.constprop.2
 248               	.LVL20:
 178:drivers/oled/oled_driver.c ****         print("oled_init cmd set 1 failed\n");
 249               		.loc 1 178 8 view .LVU54
 250 0022 892B      		or r24,r25
 251 0024 01F0      		breq .L10
 252               	.L13:
 180:drivers/oled/oled_driver.c ****     }
 253               		.loc 1 180 16 view .LVU55
 254 0026 80E0      		ldi r24,0
 255 0028 0895      		ret
 256               	.L8:
 156:drivers/oled/oled_driver.c ****     }
 257               		.loc 1 156 9 is_stmt 1 view .LVU56
 156:drivers/oled/oled_driver.c ****     }
 258               		.loc 1 156 29 is_stmt 0 view .LVU57
 259 002a 80E2      		ldi r24,lo8(32)
 260 002c 00C0      		rjmp .L17
 261               	.L10:
 183:drivers/oled/oled_driver.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, SEGMENT_REMAP_INV, COM_SCAN_DEC};
 262               		.loc 1 183 5 is_stmt 1 view .LVU58
 183:drivers/oled/oled_driver.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, SEGMENT_REMAP_INV, COM_SCAN_DEC};
 263               		.loc 1 183 8 is_stmt 0 view .LVU59
 264 002e 8091 0000 		lds r24,oled_rotation
 265               	.LBB6:
 185:drivers/oled/oled_driver.c ****             print("oled_init cmd normal rotation failed\n");
 266               		.loc 1 185 13 view .LVU60
 267 0032 63E0      		ldi r22,lo8(3)
 268 0034 70E0      		ldi r23,0
 269               	.LBE6:
 183:drivers/oled/oled_driver.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, SEGMENT_REMAP_INV, COM_SCAN_DEC};
 270               		.loc 1 183 8 view .LVU61
 271 0036 81FD      		sbrc r24,1
 272 0038 00C0      		rjmp .L12
 273               	.LBB7:
 184:drivers/oled/oled_driver.c ****         if (I2C_TRANSMIT_P(display_normal) != I2C_STATUS_SUCCESS) {
 274               		.loc 1 184 9 is_stmt 1 view .LVU62
 185:drivers/oled/oled_driver.c ****             print("oled_init cmd normal rotation failed\n");
 275               		.loc 1 185 9 view .LVU63
 185:drivers/oled/oled_driver.c ****             print("oled_init cmd normal rotation failed\n");
 276               		.loc 1 185 13 is_stmt 0 view .LVU64
 277 003a 80E0      		ldi r24,lo8(display_normal.2027)
 278 003c 90E0      		ldi r25,hi8(display_normal.2027)
 279               	.L18:
 280               	.LBE7:
 281               	.LBB8:
 191:drivers/oled/oled_driver.c ****             print("display_flipped failed\n");
 282               		.loc 1 191 13 view .LVU65
 283 003e 0E94 0000 		call i2c_transmit_P.constprop.2
 284               	.LVL21:
 191:drivers/oled/oled_driver.c ****             print("display_flipped failed\n");
 285               		.loc 1 191 12 view .LVU66
 286 0042 892B      		or r24,r25
 287 0044 01F4      		brne .L13
 288               	.LBE8:
 197:drivers/oled/oled_driver.c ****     if (I2C_TRANSMIT_P(display_setup2) != I2C_STATUS_SUCCESS) {
 289               		.loc 1 197 5 is_stmt 1 view .LVU67
 198:drivers/oled/oled_driver.c ****         print("display_setup2 failed\n");
 290               		.loc 1 198 5 view .LVU68
 198:drivers/oled/oled_driver.c ****         print("display_setup2 failed\n");
 291               		.loc 1 198 9 is_stmt 0 view .LVU69
 292 0046 6DE0      		ldi r22,lo8(13)
 293 0048 70E0      		ldi r23,0
 294 004a 80E0      		ldi r24,lo8(display_setup2.2029)
 295 004c 90E0      		ldi r25,hi8(display_setup2.2029)
 296 004e 0E94 0000 		call i2c_transmit_P.constprop.2
 297               	.LVL22:
 198:drivers/oled/oled_driver.c ****         print("display_setup2 failed\n");
 298               		.loc 1 198 8 view .LVU70
 299 0052 892B      		or r24,r25
 300 0054 01F4      		brne .L13
 204:drivers/oled/oled_driver.c **** #endif
 301               		.loc 1 204 5 is_stmt 1 view .LVU71
 204:drivers/oled/oled_driver.c **** #endif
 302               		.loc 1 204 20 is_stmt 0 view .LVU72
 303 0056 0E94 0000 		call timer_read32
 304               	.LVL23:
 204:drivers/oled/oled_driver.c **** #endif
 305               		.loc 1 204 35 view .LVU73
 306 005a 605A      		subi r22,-96
 307 005c 7541      		sbci r23,21
 308 005e 8F4F      		sbci r24,-1
 309 0060 9F4F      		sbci r25,-1
 204:drivers/oled/oled_driver.c **** #endif
 310               		.loc 1 204 18 view .LVU74
 311 0062 6093 0000 		sts oled_timeout,r22
 312 0066 7093 0000 		sts oled_timeout+1,r23
 313 006a 8093 0000 		sts oled_timeout+2,r24
 314 006e 9093 0000 		sts oled_timeout+3,r25
 210:drivers/oled/oled_driver.c ****     oled_initialized = true;
 315               		.loc 1 210 5 is_stmt 1 view .LVU75
 316 0072 0E94 0000 		call oled_clear
 317               	.LVL24:
 211:drivers/oled/oled_driver.c ****     oled_active      = true;
 318               		.loc 1 211 5 view .LVU76
 211:drivers/oled/oled_driver.c ****     oled_active      = true;
 319               		.loc 1 211 22 is_stmt 0 view .LVU77
 320 0076 81E0      		ldi r24,lo8(1)
 321 0078 8093 0000 		sts oled_initialized,r24
 212:drivers/oled/oled_driver.c ****     oled_scrolling   = false;
 322               		.loc 1 212 5 is_stmt 1 view .LVU78
 212:drivers/oled/oled_driver.c ****     oled_scrolling   = false;
 323               		.loc 1 212 22 is_stmt 0 view .LVU79
 324 007c 8093 0000 		sts oled_active,r24
 213:drivers/oled/oled_driver.c ****     return true;
 325               		.loc 1 213 5 is_stmt 1 view .LVU80
 213:drivers/oled/oled_driver.c ****     return true;
 326               		.loc 1 213 22 is_stmt 0 view .LVU81
 327 0080 1092 0000 		sts oled_scrolling,__zero_reg__
 214:drivers/oled/oled_driver.c **** }
 328               		.loc 1 214 5 is_stmt 1 view .LVU82
 329               	/* epilogue start */
 215:drivers/oled/oled_driver.c **** 
 330               		.loc 1 215 1 is_stmt 0 view .LVU83
 331 0084 0895      		ret
 332               	.L12:
 333               	.LBB9:
 190:drivers/oled/oled_driver.c ****         if (I2C_TRANSMIT_P(display_flipped) != I2C_STATUS_SUCCESS) {
 334               		.loc 1 190 9 is_stmt 1 view .LVU84
 191:drivers/oled/oled_driver.c ****             print("display_flipped failed\n");
 335               		.loc 1 191 9 view .LVU85
 191:drivers/oled/oled_driver.c ****             print("display_flipped failed\n");
 336               		.loc 1 191 13 is_stmt 0 view .LVU86
 337 0086 80E0      		ldi r24,lo8(display_flipped.2028)
 338 0088 90E0      		ldi r25,hi8(display_flipped.2028)
 339 008a 00C0      		rjmp .L18
 340               	.LBE9:
 341               		.cfi_endproc
 342               	.LFE3:
 344               		.section	.text.crot,"ax",@progbits
 345               	.global	crot
 347               	crot:
 348               	.LVL25:
 349               	.LFB8:
 224:drivers/oled/oled_driver.c **** 
 225:drivers/oled/oled_driver.c **** static void calc_bounds(uint8_t update_start, uint8_t *cmd_array) {
 226:drivers/oled/oled_driver.c ****     // Calculate commands to set memory addressing bounds.
 227:drivers/oled/oled_driver.c ****     uint8_t start_page   = OLED_BLOCK_SIZE * update_start / OLED_DISPLAY_WIDTH;
 228:drivers/oled/oled_driver.c ****     uint8_t start_column = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_WIDTH;
 229:drivers/oled/oled_driver.c **** #if (OLED_IC == OLED_IC_SH1106)
 230:drivers/oled/oled_driver.c ****     // Commands for Page Addressing Mode. Sets starting page and column; has no end bound.
 231:drivers/oled/oled_driver.c ****     // Column value must be split into high and low nybble and sent as two commands.
 232:drivers/oled/oled_driver.c ****     cmd_array[0] = PAM_PAGE_ADDR | start_page;
 233:drivers/oled/oled_driver.c ****     cmd_array[1] = PAM_SETCOLUMN_LSB | ((OLED_COLUMN_OFFSET + start_column) & 0x0f);
 234:drivers/oled/oled_driver.c ****     cmd_array[2] = PAM_SETCOLUMN_MSB | ((OLED_COLUMN_OFFSET + start_column) >> 4 & 0x0f);
 235:drivers/oled/oled_driver.c ****     cmd_array[3] = NOP;
 236:drivers/oled/oled_driver.c ****     cmd_array[4] = NOP;
 237:drivers/oled/oled_driver.c ****     cmd_array[5] = NOP;
 238:drivers/oled/oled_driver.c **** #else
 239:drivers/oled/oled_driver.c ****     // Commands for use in Horizontal Addressing mode.
 240:drivers/oled/oled_driver.c ****     cmd_array[1] = start_column;
 241:drivers/oled/oled_driver.c ****     cmd_array[4] = start_page;
 242:drivers/oled/oled_driver.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) % OLED_DISPLAY_WIDTH + cmd_array[1];
 243:drivers/oled/oled_driver.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) / OLED_DISPLAY_WIDTH - 1;
 244:drivers/oled/oled_driver.c **** #endif
 245:drivers/oled/oled_driver.c **** }
 246:drivers/oled/oled_driver.c **** 
 247:drivers/oled/oled_driver.c **** static void calc_bounds_90(uint8_t update_start, uint8_t *cmd_array) {
 248:drivers/oled/oled_driver.c ****     cmd_array[1] = OLED_BLOCK_SIZE * update_start / OLED_DISPLAY_HEIGHT * 8;
 249:drivers/oled/oled_driver.c ****     cmd_array[4] = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_HEIGHT;
 250:drivers/oled/oled_driver.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) / OLED_DISPLAY_HEIGHT * 8 - 1 + cmd_
 251:drivers/oled/oled_driver.c ****     ;
 252:drivers/oled/oled_driver.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) % OLED_DISPLAY_HEIGHT / 8;
 253:drivers/oled/oled_driver.c **** }
 254:drivers/oled/oled_driver.c **** 
 255:drivers/oled/oled_driver.c **** uint8_t crot(uint8_t a, int8_t n) {
 350               		.loc 1 255 35 is_stmt 1 view -0
 351               		.cfi_startproc
 352               	/* prologue: function */
 353               	/* frame size = 0 */
 354               	/* stack size = 0 */
 355               	.L__stack_usage = 0
 256:drivers/oled/oled_driver.c ****     const uint8_t mask = 0x7;
 356               		.loc 1 256 5 view .LVU88
 257:drivers/oled/oled_driver.c ****     n &= mask;
 357               		.loc 1 257 5 view .LVU89
 258:drivers/oled/oled_driver.c ****     return a << n | a >> (-n & mask);
 358               		.loc 1 258 5 view .LVU90
 257:drivers/oled/oled_driver.c ****     n &= mask;
 359               		.loc 1 257 7 is_stmt 0 view .LVU91
 360 0000 6770      		andi r22,lo8(7)
 361               	.LVL26:
 362               		.loc 1 258 14 view .LVU92
 363 0002 262F      		mov r18,r22
 364 0004 062E      		mov __tmp_reg__,r22
 365 0006 000C      		lsl r0
 366 0008 330B      		sbc r19,r19
 367               		.loc 1 258 19 view .LVU93
 368 000a 982F      		mov r25,r24
 369 000c 00C0      		rjmp 2f
 370               		1:
 371 000e 990F      		lsl r25
 372               		2:
 373 0010 6A95      		dec r22
 374 0012 02F4      		brpl 1b
 375 0014 3195      		neg r19
 376 0016 2195      		neg r18
 377 0018 3109      		sbc r19,__zero_reg__
 378 001a 2770      		andi r18,7
 379 001c 3327      		clr r19
 380 001e 00C0      		rjmp 2f
 381               		1:
 382 0020 8695      		lsr r24
 383               		2:
 384 0022 2A95      		dec r18
 385 0024 02F4      		brpl 1b
 386               	.LVL27:
 259:drivers/oled/oled_driver.c **** }
 387               		.loc 1 259 1 view .LVU94
 388 0026 892B      		or r24,r25
 389               	/* epilogue start */
 390 0028 0895      		ret
 391               		.cfi_endproc
 392               	.LFE8:
 394               		.section	.text.oled_set_cursor,"ax",@progbits
 395               	.global	oled_set_cursor
 397               	oled_set_cursor:
 398               	.LVL28:
 399               	.LFB11:
 260:drivers/oled/oled_driver.c **** 
 261:drivers/oled/oled_driver.c **** static void rotate_90(const uint8_t *src, uint8_t *dest) {
 262:drivers/oled/oled_driver.c ****     for (uint8_t i = 0, shift = 7; i < 8; ++i, --shift) {
 263:drivers/oled/oled_driver.c ****         uint8_t selector = (1 << i);
 264:drivers/oled/oled_driver.c ****         for (uint8_t j = 0; j < 8; ++j) {
 265:drivers/oled/oled_driver.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 266:drivers/oled/oled_driver.c ****         }
 267:drivers/oled/oled_driver.c ****     }
 268:drivers/oled/oled_driver.c **** }
 269:drivers/oled/oled_driver.c **** 
 270:drivers/oled/oled_driver.c **** void oled_render(void) {
 271:drivers/oled/oled_driver.c ****     // Do we have work to do?
 272:drivers/oled/oled_driver.c ****     oled_dirty &= OLED_ALL_BLOCKS_MASK;
 273:drivers/oled/oled_driver.c ****     if (!oled_dirty || oled_scrolling) {
 274:drivers/oled/oled_driver.c ****         return;
 275:drivers/oled/oled_driver.c ****     }
 276:drivers/oled/oled_driver.c **** 
 277:drivers/oled/oled_driver.c ****     // Find first dirty block
 278:drivers/oled/oled_driver.c ****     uint8_t update_start = 0;
 279:drivers/oled/oled_driver.c ****     while (!(oled_dirty & ((OLED_BLOCK_TYPE)1 << update_start))) {
 280:drivers/oled/oled_driver.c ****         ++update_start;
 281:drivers/oled/oled_driver.c ****     }
 282:drivers/oled/oled_driver.c **** 
 283:drivers/oled/oled_driver.c ****     // Set column & page position
 284:drivers/oled/oled_driver.c ****     static uint8_t display_start[] = {I2C_CMD, COLUMN_ADDR, 0, OLED_DISPLAY_WIDTH - 1, PAGE_ADDR, 0
 285:drivers/oled/oled_driver.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 286:drivers/oled/oled_driver.c ****         calc_bounds(update_start, &display_start[1]);  // Offset from I2C_CMD byte at the start
 287:drivers/oled/oled_driver.c ****     } else {
 288:drivers/oled/oled_driver.c ****         calc_bounds_90(update_start, &display_start[1]);  // Offset from I2C_CMD byte at the start
 289:drivers/oled/oled_driver.c ****     }
 290:drivers/oled/oled_driver.c **** 
 291:drivers/oled/oled_driver.c ****     // Send column & page position
 292:drivers/oled/oled_driver.c ****     if (I2C_TRANSMIT(display_start) != I2C_STATUS_SUCCESS) {
 293:drivers/oled/oled_driver.c ****         print("oled_render offset command failed\n");
 294:drivers/oled/oled_driver.c ****         return;
 295:drivers/oled/oled_driver.c ****     }
 296:drivers/oled/oled_driver.c **** 
 297:drivers/oled/oled_driver.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 298:drivers/oled/oled_driver.c ****         // Send render data chunk as is
 299:drivers/oled/oled_driver.c ****         if (I2C_WRITE_REG(I2C_DATA, &oled_buffer[OLED_BLOCK_SIZE * update_start], OLED_BLOCK_SIZE) 
 300:drivers/oled/oled_driver.c ****             print("oled_render data failed\n");
 301:drivers/oled/oled_driver.c ****             return;
 302:drivers/oled/oled_driver.c ****         }
 303:drivers/oled/oled_driver.c ****     } else {
 304:drivers/oled/oled_driver.c ****         // Rotate the render chunks
 305:drivers/oled/oled_driver.c ****         const static uint8_t source_map[] = OLED_SOURCE_MAP;
 306:drivers/oled/oled_driver.c ****         const static uint8_t target_map[] = OLED_TARGET_MAP;
 307:drivers/oled/oled_driver.c **** 
 308:drivers/oled/oled_driver.c ****         static uint8_t temp_buffer[OLED_BLOCK_SIZE];
 309:drivers/oled/oled_driver.c ****         memset(temp_buffer, 0, sizeof(temp_buffer));
 310:drivers/oled/oled_driver.c ****         for (uint8_t i = 0; i < sizeof(source_map); ++i) {
 311:drivers/oled/oled_driver.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 312:drivers/oled/oled_driver.c ****         }
 313:drivers/oled/oled_driver.c **** 
 314:drivers/oled/oled_driver.c ****         // Send render data chunk after rotating
 315:drivers/oled/oled_driver.c ****         if (I2C_WRITE_REG(I2C_DATA, &temp_buffer[0], OLED_BLOCK_SIZE) != I2C_STATUS_SUCCESS) {
 316:drivers/oled/oled_driver.c ****             print("oled_render90 data failed\n");
 317:drivers/oled/oled_driver.c ****             return;
 318:drivers/oled/oled_driver.c ****         }
 319:drivers/oled/oled_driver.c ****     }
 320:drivers/oled/oled_driver.c **** 
 321:drivers/oled/oled_driver.c ****     // Turn on display if it is off
 322:drivers/oled/oled_driver.c ****     oled_on();
 323:drivers/oled/oled_driver.c **** 
 324:drivers/oled/oled_driver.c ****     // Clear dirty flag
 325:drivers/oled/oled_driver.c ****     oled_dirty &= ~((OLED_BLOCK_TYPE)1 << update_start);
 326:drivers/oled/oled_driver.c **** }
 327:drivers/oled/oled_driver.c **** 
 328:drivers/oled/oled_driver.c **** void oled_set_cursor(uint8_t col, uint8_t line) {
 400               		.loc 1 328 49 is_stmt 1 view -0
 401               		.cfi_startproc
 402               	/* prologue: function */
 403               	/* frame size = 0 */
 404               	/* stack size = 0 */
 405               	.L__stack_usage = 0
 329:drivers/oled/oled_driver.c ****     uint16_t index = line * oled_rotation_width + col * OLED_FONT_WIDTH;
 406               		.loc 1 329 5 view .LVU96
 407               		.loc 1 329 27 is_stmt 0 view .LVU97
 408 0000 2091 0000 		lds r18,oled_rotation_width
 409               		.loc 1 329 55 view .LVU98
 410 0004 36E0      		ldi r19,lo8(6)
 411 0006 839F      		mul r24,r19
 412 0008 C001      		movw r24,r0
 413 000a 1124      		clr __zero_reg__
 414               	.LVL29:
 415               		.loc 1 329 49 view .LVU99
 416 000c 629F      		mul r22,r18
 417 000e 800D      		add r24,r0
 418 0010 911D      		adc r25,r1
 419 0012 1124      		clr __zero_reg__
 420               	.LVL30:
 330:drivers/oled/oled_driver.c **** 
 331:drivers/oled/oled_driver.c ****     // Out of bounds?
 332:drivers/oled/oled_driver.c ****     if (index >= OLED_MATRIX_SIZE) {
 421               		.loc 1 332 5 is_stmt 1 view .LVU100
 422               		.loc 1 332 8 is_stmt 0 view .LVU101
 423 0014 8115      		cp r24,__zero_reg__
 424 0016 22E0      		ldi r18,2
 425 0018 9207      		cpc r25,r18
 426 001a 04F0      		brlt .L21
 427 001c 90E0      		ldi r25,0
 428 001e 80E0      		ldi r24,0
 429               	.LVL31:
 430               	.L21:
 333:drivers/oled/oled_driver.c ****         index = 0;
 334:drivers/oled/oled_driver.c ****     }
 335:drivers/oled/oled_driver.c **** 
 336:drivers/oled/oled_driver.c ****     oled_cursor = &oled_buffer[index];
 431               		.loc 1 336 5 is_stmt 1 view .LVU102
 432               		.loc 1 336 19 is_stmt 0 view .LVU103
 433 0020 8050      		subi r24,lo8(-(oled_buffer))
 434 0022 9040      		sbci r25,hi8(-(oled_buffer))
 435               	.LVL32:
 436               		.loc 1 336 17 view .LVU104
 437 0024 9093 0000 		sts oled_cursor+1,r25
 438 0028 8093 0000 		sts oled_cursor,r24
 439               	/* epilogue start */
 337:drivers/oled/oled_driver.c **** }
 440               		.loc 1 337 1 view .LVU105
 441 002c 0895      		ret
 442               		.cfi_endproc
 443               	.LFE11:
 445               		.section	.text.oled_advance_char,"ax",@progbits
 446               	.global	oled_advance_char
 448               	oled_advance_char:
 449               	.LFB13:
 338:drivers/oled/oled_driver.c **** 
 339:drivers/oled/oled_driver.c **** void oled_advance_page(bool clearPageRemainder) {
 340:drivers/oled/oled_driver.c ****     uint16_t index     = oled_cursor - &oled_buffer[0];
 341:drivers/oled/oled_driver.c ****     uint8_t  remaining = oled_rotation_width - (index % oled_rotation_width);
 342:drivers/oled/oled_driver.c **** 
 343:drivers/oled/oled_driver.c ****     if (clearPageRemainder) {
 344:drivers/oled/oled_driver.c ****         // Remaining Char count
 345:drivers/oled/oled_driver.c ****         remaining = remaining / OLED_FONT_WIDTH;
 346:drivers/oled/oled_driver.c **** 
 347:drivers/oled/oled_driver.c ****         // Write empty character until next line
 348:drivers/oled/oled_driver.c ****         while (remaining--) oled_write_char(' ', false);
 349:drivers/oled/oled_driver.c ****     } else {
 350:drivers/oled/oled_driver.c ****         // Next page index out of bounds?
 351:drivers/oled/oled_driver.c ****         if (index + remaining >= OLED_MATRIX_SIZE) {
 352:drivers/oled/oled_driver.c ****             index     = 0;
 353:drivers/oled/oled_driver.c ****             remaining = 0;
 354:drivers/oled/oled_driver.c ****         }
 355:drivers/oled/oled_driver.c **** 
 356:drivers/oled/oled_driver.c ****         oled_cursor = &oled_buffer[index + remaining];
 357:drivers/oled/oled_driver.c ****     }
 358:drivers/oled/oled_driver.c **** }
 359:drivers/oled/oled_driver.c **** 
 360:drivers/oled/oled_driver.c **** void oled_advance_char(void) {
 450               		.loc 1 360 30 is_stmt 1 view -0
 451               		.cfi_startproc
 452               	/* prologue: function */
 453               	/* frame size = 0 */
 454               	/* stack size = 0 */
 455               	.L__stack_usage = 0
 361:drivers/oled/oled_driver.c ****     uint16_t nextIndex      = oled_cursor - &oled_buffer[0] + OLED_FONT_WIDTH;
 456               		.loc 1 361 5 view .LVU107
 457               		.loc 1 361 43 is_stmt 0 view .LVU108
 458 0000 2091 0000 		lds r18,oled_cursor
 459 0004 3091 0000 		lds r19,oled_cursor+1
 460               		.loc 1 361 61 view .LVU109
 461 0008 2050      		subi r18,lo8(oled_buffer-6)
 462 000a 3040      		sbci r19,hi8(oled_buffer-6)
 463               	.LVL33:
 362:drivers/oled/oled_driver.c ****     uint8_t  remainingSpace = oled_rotation_width - (nextIndex % oled_rotation_width);
 464               		.loc 1 362 5 is_stmt 1 view .LVU110
 465               		.loc 1 362 51 is_stmt 0 view .LVU111
 466 000c 4091 0000 		lds r20,oled_rotation_width
 467               		.loc 1 362 64 view .LVU112
 468 0010 642F      		mov r22,r20
 469 0012 70E0      		ldi r23,0
 470 0014 C901      		movw r24,r18
 471 0016 0E94 0000 		call __udivmodhi4
 472               		.loc 1 362 14 view .LVU113
 473 001a 481B      		sub r20,r24
 474               	.LVL34:
 363:drivers/oled/oled_driver.c **** 
 364:drivers/oled/oled_driver.c ****     // Do we have enough space on the current line for the next character
 365:drivers/oled/oled_driver.c ****     if (remainingSpace < OLED_FONT_WIDTH) {
 475               		.loc 1 365 5 is_stmt 1 view .LVU114
 476               		.loc 1 365 8 is_stmt 0 view .LVU115
 477 001c 4630      		cpi r20,lo8(6)
 478 001e 00F4      		brsh .L23
 366:drivers/oled/oled_driver.c ****         nextIndex += remainingSpace;
 479               		.loc 1 366 9 is_stmt 1 view .LVU116
 480               		.loc 1 366 19 is_stmt 0 view .LVU117
 481 0020 240F      		add r18,r20
 482 0022 311D      		adc r19,__zero_reg__
 483               	.LVL35:
 484               	.L23:
 367:drivers/oled/oled_driver.c ****     }
 368:drivers/oled/oled_driver.c **** 
 369:drivers/oled/oled_driver.c ****     // Did we go out of bounds
 370:drivers/oled/oled_driver.c ****     if (nextIndex >= OLED_MATRIX_SIZE) {
 485               		.loc 1 370 5 is_stmt 1 view .LVU118
 486               		.loc 1 370 8 is_stmt 0 view .LVU119
 487 0024 2115      		cp r18,__zero_reg__
 488 0026 82E0      		ldi r24,2
 489 0028 3807      		cpc r19,r24
 490 002a 00F0      		brlo .L24
 371:drivers/oled/oled_driver.c ****         nextIndex = 0;
 491               		.loc 1 371 19 view .LVU120
 492 002c 30E0      		ldi r19,0
 493 002e 20E0      		ldi r18,0
 494               	.LVL36:
 495               	.L24:
 372:drivers/oled/oled_driver.c ****     }
 373:drivers/oled/oled_driver.c **** 
 374:drivers/oled/oled_driver.c ****     // Update cursor position
 375:drivers/oled/oled_driver.c ****     oled_cursor = &oled_buffer[nextIndex];
 496               		.loc 1 375 5 is_stmt 1 view .LVU121
 497               		.loc 1 375 19 is_stmt 0 view .LVU122
 498 0030 2050      		subi r18,lo8(-(oled_buffer))
 499 0032 3040      		sbci r19,hi8(-(oled_buffer))
 500               	.LVL37:
 501               		.loc 1 375 17 view .LVU123
 502 0034 3093 0000 		sts oled_cursor+1,r19
 503 0038 2093 0000 		sts oled_cursor,r18
 504               	/* epilogue start */
 376:drivers/oled/oled_driver.c **** }
 505               		.loc 1 376 1 view .LVU124
 506 003c 0895      		ret
 507               		.cfi_endproc
 508               	.LFE13:
 510               		.section	.text.oled_write_char,"ax",@progbits
 511               	.global	oled_write_char
 513               	oled_write_char:
 514               	.LVL38:
 515               	.LFB14:
 377:drivers/oled/oled_driver.c **** 
 378:drivers/oled/oled_driver.c **** // Main handler that writes character data to the display buffer
 379:drivers/oled/oled_driver.c **** void oled_write_char(const char data, bool invert) {
 516               		.loc 1 379 52 is_stmt 1 view -0
 517               		.cfi_startproc
 518               		.loc 1 379 52 is_stmt 0 view .LVU126
 519 0000 1F93      		push r17
 520               	.LCFI8:
 521               		.cfi_def_cfa_offset 3
 522               		.cfi_offset 17, -2
 523 0002 CF93      		push r28
 524               	.LCFI9:
 525               		.cfi_def_cfa_offset 4
 526               		.cfi_offset 28, -3
 527 0004 DF93      		push r29
 528               	.LCFI10:
 529               		.cfi_def_cfa_offset 5
 530               		.cfi_offset 29, -4
 531               	/* prologue: function */
 532               	/* frame size = 0 */
 533               	/* stack size = 3 */
 534               	.L__stack_usage = 3
 535 0006 162F      		mov r17,r22
 380:drivers/oled/oled_driver.c ****     // Advance to the next line if newline
 381:drivers/oled/oled_driver.c ****     if (data == '\n') {
 536               		.loc 1 381 5 is_stmt 1 view .LVU127
 537               		.loc 1 381 8 is_stmt 0 view .LVU128
 538 0008 8A30      		cpi r24,lo8(10)
 539 000a 01F4      		brne .L26
 382:drivers/oled/oled_driver.c ****         // Old source wrote ' ' until end of line...
 383:drivers/oled/oled_driver.c ****         oled_advance_page(true);
 540               		.loc 1 383 9 is_stmt 1 view .LVU129
 541 000c 81E0      		ldi r24,lo8(1)
 542               	.LVL39:
 543               	.L36:
 544               	/* epilogue start */
 384:drivers/oled/oled_driver.c ****         return;
 385:drivers/oled/oled_driver.c ****     }
 386:drivers/oled/oled_driver.c **** 
 387:drivers/oled/oled_driver.c ****     if (data == '\r') {
 388:drivers/oled/oled_driver.c ****         oled_advance_page(false);
 389:drivers/oled/oled_driver.c ****         return;
 390:drivers/oled/oled_driver.c ****     }
 391:drivers/oled/oled_driver.c **** 
 392:drivers/oled/oled_driver.c ****     // copy the current render buffer to check for dirty after
 393:drivers/oled/oled_driver.c ****     static uint8_t oled_temp_buffer[OLED_FONT_WIDTH];
 394:drivers/oled/oled_driver.c ****     memcpy(&oled_temp_buffer, oled_cursor, OLED_FONT_WIDTH);
 395:drivers/oled/oled_driver.c **** 
 396:drivers/oled/oled_driver.c ****     _Static_assert(sizeof(font) >= ((OLED_FONT_END + 1 - OLED_FONT_START) * OLED_FONT_WIDTH), "OLED
 397:drivers/oled/oled_driver.c **** 
 398:drivers/oled/oled_driver.c ****     // set the reder buffer data
 399:drivers/oled/oled_driver.c ****     uint8_t cast_data = (uint8_t)data;  // font based on unsigned type for index
 400:drivers/oled/oled_driver.c ****     if (cast_data < OLED_FONT_START || cast_data > OLED_FONT_END) {
 401:drivers/oled/oled_driver.c ****         memset(oled_cursor, 0x00, OLED_FONT_WIDTH);
 402:drivers/oled/oled_driver.c ****     } else {
 403:drivers/oled/oled_driver.c ****         const uint8_t *glyph = &font[(cast_data - OLED_FONT_START) * OLED_FONT_WIDTH];
 404:drivers/oled/oled_driver.c ****         memcpy_P(oled_cursor, glyph, OLED_FONT_WIDTH);
 405:drivers/oled/oled_driver.c ****     }
 406:drivers/oled/oled_driver.c **** 
 407:drivers/oled/oled_driver.c ****     // Invert if needed
 408:drivers/oled/oled_driver.c ****     if (invert) {
 409:drivers/oled/oled_driver.c ****         InvertCharacter(oled_cursor);
 410:drivers/oled/oled_driver.c ****     }
 411:drivers/oled/oled_driver.c **** 
 412:drivers/oled/oled_driver.c ****     // Dirty check
 413:drivers/oled/oled_driver.c ****     if (memcmp(&oled_temp_buffer, oled_cursor, OLED_FONT_WIDTH)) {
 414:drivers/oled/oled_driver.c ****         uint16_t index = oled_cursor - &oled_buffer[0];
 415:drivers/oled/oled_driver.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (index / OLED_BLOCK_SIZE));
 416:drivers/oled/oled_driver.c ****         // Edgecase check if the written data spans the 2 chunks
 417:drivers/oled/oled_driver.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << ((index + OLED_FONT_WIDTH - 1) / OLED_BLOCK_SIZE));
 418:drivers/oled/oled_driver.c ****     }
 419:drivers/oled/oled_driver.c **** 
 420:drivers/oled/oled_driver.c ****     // Finally move to the next char
 421:drivers/oled/oled_driver.c ****     oled_advance_char();
 422:drivers/oled/oled_driver.c **** }
 545               		.loc 1 422 1 is_stmt 0 view .LVU130
 546 000e DF91      		pop r29
 547 0010 CF91      		pop r28
 548 0012 1F91      		pop r17
 388:drivers/oled/oled_driver.c ****         return;
 549               		.loc 1 388 9 view .LVU131
 550 0014 0C94 0000 		jmp oled_advance_page
 551               	.LVL40:
 552               	.L26:
 387:drivers/oled/oled_driver.c ****         oled_advance_page(false);
 553               		.loc 1 387 5 is_stmt 1 view .LVU132
 387:drivers/oled/oled_driver.c ****         oled_advance_page(false);
 554               		.loc 1 387 8 is_stmt 0 view .LVU133
 555 0018 8D30      		cpi r24,lo8(13)
 556 001a 01F4      		brne .L27
 388:drivers/oled/oled_driver.c ****         return;
 557               		.loc 1 388 9 is_stmt 1 view .LVU134
 558 001c 80E0      		ldi r24,0
 559               	.LVL41:
 388:drivers/oled/oled_driver.c ****         return;
 560               		.loc 1 388 9 is_stmt 0 view .LVU135
 561 001e 00C0      		rjmp .L36
 562               	.LVL42:
 563               	.L27:
 393:drivers/oled/oled_driver.c ****     memcpy(&oled_temp_buffer, oled_cursor, OLED_FONT_WIDTH);
 564               		.loc 1 393 5 is_stmt 1 view .LVU136
 394:drivers/oled/oled_driver.c **** 
 565               		.loc 1 394 5 view .LVU137
 566 0020 C091 0000 		lds r28,oled_cursor
 567 0024 D091 0000 		lds r29,oled_cursor+1
 568 0028 96E0      		ldi r25,lo8(6)
 569 002a FE01      		movw r30,r28
 570 002c A0E0      		ldi r26,lo8(oled_temp_buffer.2102)
 571 002e B0E0      		ldi r27,hi8(oled_temp_buffer.2102)
 572               		0:
 573 0030 0190      		ld r0,Z+
 574 0032 0D92      		st X+,r0
 575 0034 9A95      		dec r25
 576 0036 01F4      		brne 0b
 396:drivers/oled/oled_driver.c **** 
 577               		.loc 1 396 5 view .LVU138
 399:drivers/oled/oled_driver.c ****     if (cast_data < OLED_FONT_START || cast_data > OLED_FONT_END) {
 578               		.loc 1 399 5 view .LVU139
 579               	.LVL43:
 400:drivers/oled/oled_driver.c ****         memset(oled_cursor, 0x00, OLED_FONT_WIDTH);
 580               		.loc 1 400 5 view .LVU140
 400:drivers/oled/oled_driver.c ****         memset(oled_cursor, 0x00, OLED_FONT_WIDTH);
 581               		.loc 1 400 8 is_stmt 0 view .LVU141
 582 0038 803E      		cpi r24,lo8(-32)
 583 003a 00F0      		brlo .L28
 401:drivers/oled/oled_driver.c ****     } else {
 584               		.loc 1 401 9 is_stmt 1 view .LVU142
 585 003c 86E0      		ldi r24,lo8(6)
 586               	.LVL44:
 401:drivers/oled/oled_driver.c ****     } else {
 587               		.loc 1 401 9 is_stmt 0 view .LVU143
 588 003e FE01      		movw r30,r28
 589               		0:
 590 0040 1192      		st Z+,__zero_reg__
 591 0042 8A95      		dec r24
 592 0044 01F4      		brne 0b
 593               	.L29:
 408:drivers/oled/oled_driver.c ****         InvertCharacter(oled_cursor);
 594               		.loc 1 408 5 is_stmt 1 view .LVU144
 408:drivers/oled/oled_driver.c ****         InvertCharacter(oled_cursor);
 595               		.loc 1 408 8 is_stmt 0 view .LVU145
 596 0046 1111      		cpse r17,__zero_reg__
 597 0048 00C0      		rjmp .L30
 598               	.L35:
 413:drivers/oled/oled_driver.c ****         uint16_t index = oled_cursor - &oled_buffer[0];
 599               		.loc 1 413 5 is_stmt 1 view .LVU146
 413:drivers/oled/oled_driver.c ****         uint16_t index = oled_cursor - &oled_buffer[0];
 600               		.loc 1 413 9 is_stmt 0 view .LVU147
 601 004a C091 0000 		lds r28,oled_cursor
 602 004e D091 0000 		lds r29,oled_cursor+1
 603 0052 46E0      		ldi r20,lo8(6)
 604 0054 50E0      		ldi r21,0
 605 0056 BE01      		movw r22,r28
 606 0058 80E0      		ldi r24,lo8(oled_temp_buffer.2102)
 607 005a 90E0      		ldi r25,hi8(oled_temp_buffer.2102)
 608 005c 0E94 0000 		call memcmp
 609               	.LVL45:
 413:drivers/oled/oled_driver.c ****         uint16_t index = oled_cursor - &oled_buffer[0];
 610               		.loc 1 413 8 view .LVU148
 611 0060 892B      		or r24,r25
 612 0062 01F4      		brne .L31
 613               	.L32:
 421:drivers/oled/oled_driver.c **** }
 614               		.loc 1 421 5 is_stmt 1 view .LVU149
 615               	/* epilogue start */
 616               		.loc 1 422 1 is_stmt 0 view .LVU150
 617 0064 DF91      		pop r29
 618 0066 CF91      		pop r28
 619 0068 1F91      		pop r17
 620               	.LVL46:
 421:drivers/oled/oled_driver.c **** }
 621               		.loc 1 421 5 view .LVU151
 622 006a 0C94 0000 		jmp oled_advance_char
 623               	.LVL47:
 624               	.L28:
 625               	.LBB14:
 403:drivers/oled/oled_driver.c ****         memcpy_P(oled_cursor, glyph, OLED_FONT_WIDTH);
 626               		.loc 1 403 9 is_stmt 1 view .LVU152
 404:drivers/oled/oled_driver.c ****     }
 627               		.loc 1 404 9 view .LVU153
 403:drivers/oled/oled_driver.c ****         memcpy_P(oled_cursor, glyph, OLED_FONT_WIDTH);
 628               		.loc 1 403 68 is_stmt 0 view .LVU154
 629 006e F6E0      		ldi r31,lo8(6)
 630 0070 8F9F      		mul r24,r31
 631 0072 B001      		movw r22,r0
 632 0074 1124      		clr __zero_reg__
 403:drivers/oled/oled_driver.c ****         memcpy_P(oled_cursor, glyph, OLED_FONT_WIDTH);
 633               		.loc 1 403 24 view .LVU155
 634 0076 6050      		subi r22,lo8(-(font))
 635 0078 7040      		sbci r23,hi8(-(font))
 404:drivers/oled/oled_driver.c ****     }
 636               		.loc 1 404 9 view .LVU156
 637 007a 46E0      		ldi r20,lo8(6)
 638 007c 50E0      		ldi r21,0
 639 007e CE01      		movw r24,r28
 640               	.LVL48:
 404:drivers/oled/oled_driver.c ****     }
 641               		.loc 1 404 9 view .LVU157
 642 0080 0E94 0000 		call memcpy_P
 643               	.LVL49:
 644 0084 00C0      		rjmp .L29
 645               	.LVL50:
 646               	.L30:
 404:drivers/oled/oled_driver.c ****     }
 647               		.loc 1 404 9 view .LVU158
 648 0086 E091 0000 		lds r30,oled_cursor
 649 008a F091 0000 		lds r31,oled_cursor+1
 650               	.LBE14:
 409:drivers/oled/oled_driver.c ****     }
 651               		.loc 1 409 9 is_stmt 1 view .LVU159
 652               	.LVL51:
 653               	.LBB15:
 654               	.LBI15:
 143:drivers/oled/oled_driver.c ****     const uint8_t *end = cursor + OLED_FONT_WIDTH;
 655               		.loc 1 143 13 view .LVU160
 656               	.LBB16:
 144:drivers/oled/oled_driver.c ****     while (cursor < end) {
 657               		.loc 1 144 5 view .LVU161
 144:drivers/oled/oled_driver.c ****     while (cursor < end) {
 658               		.loc 1 144 20 is_stmt 0 view .LVU162
 659 008e 9F01      		movw r18,r30
 660 0090 2A5F      		subi r18,-6
 661 0092 3F4F      		sbci r19,-1
 662               	.LVL52:
 145:drivers/oled/oled_driver.c ****         *cursor = ~(*cursor);
 663               		.loc 1 145 5 is_stmt 1 view .LVU163
 664               	.L33:
 145:drivers/oled/oled_driver.c ****         *cursor = ~(*cursor);
 665               		.loc 1 145 11 view .LVU164
 666 0094 2E17      		cp r18,r30
 667 0096 3F07      		cpc r19,r31
 668 0098 01F0      		breq .L35
 146:drivers/oled/oled_driver.c ****         cursor++;
 669               		.loc 1 146 9 view .LVU165
 146:drivers/oled/oled_driver.c ****         cursor++;
 670               		.loc 1 146 17 is_stmt 0 view .LVU166
 671 009a 8081      		ld r24,Z
 672 009c 8095      		com r24
 673 009e 8193      		st Z+,r24
 674               	.LVL53:
 147:drivers/oled/oled_driver.c ****     }
 675               		.loc 1 147 9 is_stmt 1 view .LVU167
 147:drivers/oled/oled_driver.c ****     }
 676               		.loc 1 147 9 is_stmt 0 view .LVU168
 677 00a0 00C0      		rjmp .L33
 678               	.LVL54:
 679               	.L31:
 147:drivers/oled/oled_driver.c ****     }
 680               		.loc 1 147 9 view .LVU169
 681               	.LBE16:
 682               	.LBE15:
 683               	.LBB17:
 414:drivers/oled/oled_driver.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (index / OLED_BLOCK_SIZE));
 684               		.loc 1 414 9 is_stmt 1 view .LVU170
 414:drivers/oled/oled_driver.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (index / OLED_BLOCK_SIZE));
 685               		.loc 1 414 38 is_stmt 0 view .LVU171
 686 00a2 C050      		subi r28,lo8(oled_buffer)
 687 00a4 D040      		sbci r29,hi8(oled_buffer)
 688               	.LVL55:
 415:drivers/oled/oled_driver.c ****         // Edgecase check if the written data spans the 2 chunks
 689               		.loc 1 415 9 is_stmt 1 view .LVU172
 417:drivers/oled/oled_driver.c ****     }
 690               		.loc 1 417 9 view .LVU173
 415:drivers/oled/oled_driver.c ****         // Edgecase check if the written data spans the 2 chunks
 691               		.loc 1 415 53 is_stmt 0 view .LVU174
 692 00a6 CE01      		movw r24,r28
 693 00a8 25E0      		ldi r18,5
 694               		1:
 695 00aa 9695      		lsr r25
 696 00ac 8795      		ror r24
 697 00ae 2A95      		dec r18
 698 00b0 01F4      		brne 1b
 415:drivers/oled/oled_driver.c ****         // Edgecase check if the written data spans the 2 chunks
 699               		.loc 1 415 43 view .LVU175
 700 00b2 21E0      		ldi r18,lo8(1)
 701 00b4 30E0      		ldi r19,0
 702 00b6 A901      		movw r20,r18
 703 00b8 00C0      		rjmp 2f
 704               		1:
 705 00ba 440F      		lsl r20
 706 00bc 551F      		rol r21
 707               		2:
 708 00be 8A95      		dec r24
 709 00c0 02F4      		brpl 1b
 710 00c2 CA01      		movw r24,r20
 415:drivers/oled/oled_driver.c ****         // Edgecase check if the written data spans the 2 chunks
 711               		.loc 1 415 20 view .LVU176
 712 00c4 4091 0000 		lds r20,oled_dirty
 713 00c8 5091 0000 		lds r21,oled_dirty+1
 714 00cc 842B      		or r24,r20
 715 00ce 952B      		or r25,r21
 417:drivers/oled/oled_driver.c ****     }
 716               		.loc 1 417 72 view .LVU177
 717 00d0 2596      		adiw r28,5
 718               	.LVL56:
 417:drivers/oled/oled_driver.c ****     }
 719               		.loc 1 417 77 view .LVU178
 720 00d2 45E0      		ldi r20,5
 721               		1:
 722 00d4 D695      		lsr r29
 723 00d6 C795      		ror r28
 724 00d8 4A95      		dec r20
 725 00da 01F4      		brne 1b
 726               	.LVL57:
 417:drivers/oled/oled_driver.c ****     }
 727               		.loc 1 417 43 view .LVU179
 728 00dc 00C0      		rjmp 2f
 729               		1:
 730 00de 220F      		lsl r18
 731 00e0 331F      		rol r19
 732               		2:
 733 00e2 CA95      		dec r28
 734 00e4 02F4      		brpl 1b
 417:drivers/oled/oled_driver.c ****     }
 735               		.loc 1 417 20 view .LVU180
 736 00e6 822B      		or r24,r18
 737 00e8 932B      		or r25,r19
 738 00ea 9093 0000 		sts oled_dirty+1,r25
 739 00ee 8093 0000 		sts oled_dirty,r24
 740 00f2 00C0      		rjmp .L32
 741               	.LBE17:
 742               		.cfi_endproc
 743               	.LFE14:
 745               		.section	.text.oled_advance_page,"ax",@progbits
 746               	.global	oled_advance_page
 748               	oled_advance_page:
 749               	.LVL58:
 750               	.LFB12:
 339:drivers/oled/oled_driver.c ****     uint16_t index     = oled_cursor - &oled_buffer[0];
 751               		.loc 1 339 49 is_stmt 1 view -0
 752               		.cfi_startproc
 339:drivers/oled/oled_driver.c ****     uint16_t index     = oled_cursor - &oled_buffer[0];
 753               		.loc 1 339 49 is_stmt 0 view .LVU182
 754 0000 CF93      		push r28
 755               	.LCFI11:
 756               		.cfi_def_cfa_offset 3
 757               		.cfi_offset 28, -2
 758               	/* prologue: function */
 759               	/* frame size = 0 */
 760               	/* stack size = 1 */
 761               	.L__stack_usage = 1
 762 0002 382F      		mov r19,r24
 340:drivers/oled/oled_driver.c ****     uint8_t  remaining = oled_rotation_width - (index % oled_rotation_width);
 763               		.loc 1 340 5 is_stmt 1 view .LVU183
 340:drivers/oled/oled_driver.c ****     uint8_t  remaining = oled_rotation_width - (index % oled_rotation_width);
 764               		.loc 1 340 38 is_stmt 0 view .LVU184
 765 0004 E091 0000 		lds r30,oled_cursor
 766 0008 F091 0000 		lds r31,oled_cursor+1
 767 000c E050      		subi r30,lo8(oled_buffer)
 768 000e F040      		sbci r31,hi8(oled_buffer)
 769               	.LVL59:
 341:drivers/oled/oled_driver.c **** 
 770               		.loc 1 341 5 is_stmt 1 view .LVU185
 341:drivers/oled/oled_driver.c **** 
 771               		.loc 1 341 46 is_stmt 0 view .LVU186
 772 0010 2091 0000 		lds r18,oled_rotation_width
 341:drivers/oled/oled_driver.c **** 
 773               		.loc 1 341 55 view .LVU187
 774 0014 622F      		mov r22,r18
 775 0016 70E0      		ldi r23,0
 776 0018 CF01      		movw r24,r30
 777               	.LVL60:
 341:drivers/oled/oled_driver.c **** 
 778               		.loc 1 341 55 view .LVU188
 779 001a 0E94 0000 		call __udivmodhi4
 341:drivers/oled/oled_driver.c **** 
 780               		.loc 1 341 14 view .LVU189
 781 001e 281B      		sub r18,r24
 782 0020 822F      		mov r24,r18
 783               	.LVL61:
 343:drivers/oled/oled_driver.c ****         // Remaining Char count
 784               		.loc 1 343 5 is_stmt 1 view .LVU190
 343:drivers/oled/oled_driver.c ****         // Remaining Char count
 785               		.loc 1 343 8 is_stmt 0 view .LVU191
 786 0022 3323      		tst r19
 787 0024 01F0      		breq .L38
 345:drivers/oled/oled_driver.c **** 
 788               		.loc 1 345 9 is_stmt 1 view .LVU192
 345:drivers/oled/oled_driver.c **** 
 789               		.loc 1 345 19 is_stmt 0 view .LVU193
 790 0026 66E0      		ldi r22,lo8(6)
 791 0028 0E94 0000 		call __udivmodqi4
 792 002c C82F      		mov r28,r24
 793               	.LVL62:
 348:drivers/oled/oled_driver.c ****     } else {
 794               		.loc 1 348 9 is_stmt 1 view .LVU194
 795               	.L39:
 348:drivers/oled/oled_driver.c ****     } else {
 796               		.loc 1 348 15 discriminator 1 view .LVU195
 348:drivers/oled/oled_driver.c ****     } else {
 797               		.loc 1 348 25 is_stmt 0 discriminator 1 view .LVU196
 798               	.LVL63:
 799 002e C150      		subi r28,1
 800 0030 00F4      		brcc .L40
 801               	.L37:
 802               	/* epilogue start */
 358:drivers/oled/oled_driver.c **** 
 803               		.loc 1 358 1 view .LVU197
 804 0032 CF91      		pop r28
 805 0034 0895      		ret
 806               	.LVL64:
 807               	.L40:
 348:drivers/oled/oled_driver.c ****     } else {
 808               		.loc 1 348 29 is_stmt 1 discriminator 2 view .LVU198
 809 0036 60E0      		ldi r22,0
 810 0038 80E2      		ldi r24,lo8(32)
 811 003a 0E94 0000 		call oled_write_char
 812               	.LVL65:
 813 003e 00C0      		rjmp .L39
 814               	.LVL66:
 815               	.L38:
 351:drivers/oled/oled_driver.c ****             index     = 0;
 816               		.loc 1 351 9 view .LVU199
 351:drivers/oled/oled_driver.c ****             index     = 0;
 817               		.loc 1 351 19 is_stmt 0 view .LVU200
 818 0040 9F01      		movw r18,r30
 819               	.LVL67:
 351:drivers/oled/oled_driver.c ****             index     = 0;
 820               		.loc 1 351 19 view .LVU201
 821 0042 280F      		add r18,r24
 822 0044 311D      		adc r19,__zero_reg__
 351:drivers/oled/oled_driver.c ****             index     = 0;
 823               		.loc 1 351 12 view .LVU202
 824 0046 2115      		cp r18,__zero_reg__
 825 0048 3240      		sbci r19,2
 826 004a 00F0      		brlo .L42
 353:drivers/oled/oled_driver.c ****         }
 827               		.loc 1 353 23 view .LVU203
 828 004c 80E0      		ldi r24,0
 829               	.LVL68:
 352:drivers/oled/oled_driver.c ****             remaining = 0;
 830               		.loc 1 352 23 view .LVU204
 831 004e F0E0      		ldi r31,0
 832 0050 E0E0      		ldi r30,0
 833               	.LVL69:
 834               	.L42:
 356:drivers/oled/oled_driver.c ****     }
 835               		.loc 1 356 9 is_stmt 1 view .LVU205
 356:drivers/oled/oled_driver.c ****     }
 836               		.loc 1 356 42 is_stmt 0 view .LVU206
 837 0052 8E0F      		add r24,r30
 838 0054 9F2F      		mov r25,r31
 839 0056 911D      		adc r25,__zero_reg__
 840               	.LVL70:
 356:drivers/oled/oled_driver.c ****     }
 841               		.loc 1 356 23 view .LVU207
 842 0058 8050      		subi r24,lo8(-(oled_buffer))
 843 005a 9040      		sbci r25,hi8(-(oled_buffer))
 356:drivers/oled/oled_driver.c ****     }
 844               		.loc 1 356 21 view .LVU208
 845 005c 9093 0000 		sts oled_cursor+1,r25
 846 0060 8093 0000 		sts oled_cursor,r24
 358:drivers/oled/oled_driver.c **** 
 847               		.loc 1 358 1 view .LVU209
 848 0064 00C0      		rjmp .L37
 849               		.cfi_endproc
 850               	.LFE12:
 852               		.section	.text.oled_write,"ax",@progbits
 853               	.global	oled_write
 855               	oled_write:
 856               	.LVL71:
 857               	.LFB15:
 423:drivers/oled/oled_driver.c **** 
 424:drivers/oled/oled_driver.c **** void oled_write(const char *data, bool invert) {
 858               		.loc 1 424 48 is_stmt 1 view -0
 859               		.cfi_startproc
 860               		.loc 1 424 48 is_stmt 0 view .LVU211
 861 0000 FF92      		push r15
 862               	.LCFI12:
 863               		.cfi_def_cfa_offset 3
 864               		.cfi_offset 15, -2
 865 0002 0F93      		push r16
 866               	.LCFI13:
 867               		.cfi_def_cfa_offset 4
 868               		.cfi_offset 16, -3
 869 0004 1F93      		push r17
 870               	.LCFI14:
 871               		.cfi_def_cfa_offset 5
 872               		.cfi_offset 17, -4
 873 0006 CF93      		push r28
 874               	.LCFI15:
 875               		.cfi_def_cfa_offset 6
 876               		.cfi_offset 28, -5
 877 0008 DF93      		push r29
 878               	.LCFI16:
 879               		.cfi_def_cfa_offset 7
 880               		.cfi_offset 29, -6
 881               	/* prologue: function */
 882               	/* frame size = 0 */
 883               	/* stack size = 5 */
 884               	.L__stack_usage = 5
 885 000a EC01      		movw r28,r24
 886 000c F62E      		mov r15,r22
 425:drivers/oled/oled_driver.c ****     const char *end = data + strlen(data);
 887               		.loc 1 425 5 is_stmt 1 view .LVU212
 888               		.loc 1 425 30 is_stmt 0 view .LVU213
 889 000e FC01      		movw r30,r24
 890               		0:
 891 0010 0190      		ld __tmp_reg__,Z+
 892 0012 0020      		tst __tmp_reg__
 893 0014 01F4      		brne 0b
 894               		.loc 1 425 17 view .LVU214
 895 0016 8F01      		movw r16,r30
 896 0018 0150      		subi r16,1
 897 001a 1109      		sbc r17,__zero_reg__
 898               	.LVL72:
 426:drivers/oled/oled_driver.c ****     while (data < end) {
 899               		.loc 1 426 5 is_stmt 1 view .LVU215
 900               	.L44:
 901               		.loc 1 426 11 view .LVU216
 902 001c C017      		cp r28,r16
 903 001e D107      		cpc r29,r17
 904 0020 00F0      		brlo .L45
 905               	/* epilogue start */
 427:drivers/oled/oled_driver.c ****         oled_write_char(*data, invert);
 428:drivers/oled/oled_driver.c ****         data++;
 429:drivers/oled/oled_driver.c ****     }
 430:drivers/oled/oled_driver.c **** }
 906               		.loc 1 430 1 is_stmt 0 view .LVU217
 907 0022 DF91      		pop r29
 908 0024 CF91      		pop r28
 909               	.LVL73:
 910               		.loc 1 430 1 view .LVU218
 911 0026 1F91      		pop r17
 912 0028 0F91      		pop r16
 913               	.LVL74:
 914               		.loc 1 430 1 view .LVU219
 915 002a FF90      		pop r15
 916               	.LVL75:
 917               		.loc 1 430 1 view .LVU220
 918 002c 0895      		ret
 919               	.LVL76:
 920               	.L45:
 427:drivers/oled/oled_driver.c ****         oled_write_char(*data, invert);
 921               		.loc 1 427 9 is_stmt 1 view .LVU221
 922 002e 6F2D      		mov r22,r15
 923 0030 8991      		ld r24,Y+
 924               	.LVL77:
 427:drivers/oled/oled_driver.c ****         oled_write_char(*data, invert);
 925               		.loc 1 427 9 is_stmt 0 view .LVU222
 926 0032 0E94 0000 		call oled_write_char
 927               	.LVL78:
 428:drivers/oled/oled_driver.c ****     }
 928               		.loc 1 428 9 is_stmt 1 view .LVU223
 428:drivers/oled/oled_driver.c ****     }
 929               		.loc 1 428 9 is_stmt 0 view .LVU224
 930 0036 00C0      		rjmp .L44
 931               		.cfi_endproc
 932               	.LFE15:
 934               		.section	.text.oled_write_ln,"ax",@progbits
 935               	.global	oled_write_ln
 937               	oled_write_ln:
 938               	.LVL79:
 939               	.LFB16:
 431:drivers/oled/oled_driver.c **** 
 432:drivers/oled/oled_driver.c **** void oled_write_ln(const char *data, bool invert) {
 940               		.loc 1 432 51 is_stmt 1 view -0
 941               		.cfi_startproc
 942               	/* prologue: function */
 943               	/* frame size = 0 */
 944               	/* stack size = 0 */
 945               	.L__stack_usage = 0
 433:drivers/oled/oled_driver.c ****     oled_write(data, invert);
 946               		.loc 1 433 5 view .LVU226
 947 0000 0E94 0000 		call oled_write
 948               	.LVL80:
 434:drivers/oled/oled_driver.c ****     oled_advance_page(true);
 949               		.loc 1 434 5 view .LVU227
 950 0004 81E0      		ldi r24,lo8(1)
 951 0006 0C94 0000 		jmp oled_advance_page
 952               	.LVL81:
 953               		.cfi_endproc
 954               	.LFE16:
 956               		.section	.text.oled_pan,"ax",@progbits
 957               	.global	oled_pan
 959               	oled_pan:
 960               	.LVL82:
 961               	.LFB17:
 435:drivers/oled/oled_driver.c **** }
 436:drivers/oled/oled_driver.c **** 
 437:drivers/oled/oled_driver.c **** void oled_pan(bool left) {
 962               		.loc 1 437 26 view -0
 963               		.cfi_startproc
 964               	/* prologue: function */
 965               	/* frame size = 0 */
 966               	/* stack size = 0 */
 967               	.L__stack_usage = 0
 438:drivers/oled/oled_driver.c ****     uint16_t i = 0;
 968               		.loc 1 438 5 view .LVU229
 439:drivers/oled/oled_driver.c ****     for (uint16_t y = 0; y < OLED_DISPLAY_HEIGHT / 8; y++) {
 969               		.loc 1 439 5 view .LVU230
 970               	.LBB18:
 971               		.loc 1 439 10 view .LVU231
 972               		.loc 1 439 26 view .LVU232
 973 0000 20E0      		ldi r18,lo8(oled_buffer)
 974 0002 30E0      		ldi r19,hi8(oled_buffer)
 975               	.LVL83:
 976               	.L50:
 440:drivers/oled/oled_driver.c ****         if (left) {
 977               		.loc 1 440 9 view .LVU233
 978 0004 F901      		movw r30,r18
 979               		.loc 1 440 12 is_stmt 0 view .LVU234
 980 0006 8823      		tst r24
 981 0008 01F0      		breq .L48
 982 000a 4FE7      		ldi r20,lo8(127)
 983 000c 50E0      		ldi r21,0
 984               	.L49:
 985               	.LVL84:
 986               	.LBB19:
 441:drivers/oled/oled_driver.c ****             for (uint16_t x = 0; x < OLED_DISPLAY_WIDTH - 1; x++) {
 442:drivers/oled/oled_driver.c ****                 i              = y * OLED_DISPLAY_WIDTH + x;
 987               		.loc 1 442 17 is_stmt 1 discriminator 3 view .LVU235
 443:drivers/oled/oled_driver.c ****                 oled_buffer[i] = oled_buffer[i + 1];
 988               		.loc 1 443 17 discriminator 3 view .LVU236
 989               		.loc 1 443 32 is_stmt 0 discriminator 3 view .LVU237
 990 000e 9181      		ldd r25,Z+1
 991 0010 9193      		st Z+,r25
 992               	.LVL85:
 441:drivers/oled/oled_driver.c ****             for (uint16_t x = 0; x < OLED_DISPLAY_WIDTH - 1; x++) {
 993               		.loc 1 441 62 is_stmt 1 discriminator 3 view .LVU238
 441:drivers/oled/oled_driver.c ****             for (uint16_t x = 0; x < OLED_DISPLAY_WIDTH - 1; x++) {
 994               		.loc 1 441 34 discriminator 3 view .LVU239
 995 0012 4150      		subi r20,1
 996 0014 5109      		sbc r21,__zero_reg__
 441:drivers/oled/oled_driver.c ****             for (uint16_t x = 0; x < OLED_DISPLAY_WIDTH - 1; x++) {
 997               		.loc 1 441 13 is_stmt 0 discriminator 3 view .LVU240
 998 0016 01F4      		brne .L49
 999               	.LVL86:
 1000               	.L53:
 441:drivers/oled/oled_driver.c ****             for (uint16_t x = 0; x < OLED_DISPLAY_WIDTH - 1; x++) {
 1001               		.loc 1 441 13 discriminator 3 view .LVU241
 1002               	.LBE19:
 439:drivers/oled/oled_driver.c ****         if (left) {
 1003               		.loc 1 439 55 is_stmt 1 view .LVU242
 439:drivers/oled/oled_driver.c ****         if (left) {
 1004               		.loc 1 439 26 view .LVU243
 1005 0018 2058      		subi r18,-128
 1006 001a 3F4F      		sbci r19,-1
 439:drivers/oled/oled_driver.c ****         if (left) {
 1007               		.loc 1 439 5 is_stmt 0 view .LVU244
 1008 001c 90E0      		ldi r25,hi8(oled_buffer+512)
 1009 001e 2030      		cpi r18,lo8(oled_buffer+512)
 1010 0020 3907      		cpc r19,r25
 1011 0022 01F4      		brne .L50
 1012               	.LBE18:
 444:drivers/oled/oled_driver.c ****             }
 445:drivers/oled/oled_driver.c ****         } else {
 446:drivers/oled/oled_driver.c ****             for (uint16_t x = OLED_DISPLAY_WIDTH - 1; x > 0; x--) {
 447:drivers/oled/oled_driver.c ****                 i              = y * OLED_DISPLAY_WIDTH + x;
 448:drivers/oled/oled_driver.c ****                 oled_buffer[i] = oled_buffer[i - 1];
 449:drivers/oled/oled_driver.c ****             }
 450:drivers/oled/oled_driver.c ****         }
 451:drivers/oled/oled_driver.c ****     }
 452:drivers/oled/oled_driver.c ****     oled_dirty = OLED_ALL_BLOCKS_MASK;
 1013               		.loc 1 452 5 is_stmt 1 view .LVU245
 1014               		.loc 1 452 16 is_stmt 0 view .LVU246
 1015 0024 8FEF      		ldi r24,lo8(-1)
 1016 0026 9FEF      		ldi r25,lo8(-1)
 1017               	.LVL87:
 1018               		.loc 1 452 16 view .LVU247
 1019 0028 9093 0000 		sts oled_dirty+1,r25
 1020 002c 8093 0000 		sts oled_dirty,r24
 1021               	/* epilogue start */
 453:drivers/oled/oled_driver.c **** }
 1022               		.loc 1 453 1 view .LVU248
 1023 0030 0895      		ret
 1024               	.LVL88:
 1025               	.L48:
 1026               		.loc 1 453 1 view .LVU249
 1027 0032 E158      		subi r30,-127
 1028 0034 FF4F      		sbci r31,-1
 1029               	.L52:
 1030               	.LVL89:
 1031               	.LBB21:
 1032               	.LBB20:
 447:drivers/oled/oled_driver.c ****                 oled_buffer[i] = oled_buffer[i - 1];
 1033               		.loc 1 447 17 is_stmt 1 discriminator 3 view .LVU250
 448:drivers/oled/oled_driver.c ****             }
 1034               		.loc 1 448 17 discriminator 3 view .LVU251
 448:drivers/oled/oled_driver.c ****             }
 1035               		.loc 1 448 45 is_stmt 0 discriminator 3 view .LVU252
 1036 0036 DF01      		movw r26,r30
 1037 0038 9E91      		ld r25,-X
 448:drivers/oled/oled_driver.c ****             }
 1038               		.loc 1 448 32 discriminator 3 view .LVU253
 1039 003a 9083      		st Z,r25
 446:drivers/oled/oled_driver.c ****                 i              = y * OLED_DISPLAY_WIDTH + x;
 1040               		.loc 1 446 62 is_stmt 1 discriminator 3 view .LVU254
 1041               	.LVL90:
 446:drivers/oled/oled_driver.c ****                 i              = y * OLED_DISPLAY_WIDTH + x;
 1042               		.loc 1 446 55 discriminator 3 view .LVU255
 1043 003c FD01      		movw r30,r26
 1044               	.LVL91:
 446:drivers/oled/oled_driver.c ****                 i              = y * OLED_DISPLAY_WIDTH + x;
 1045               		.loc 1 446 13 is_stmt 0 discriminator 3 view .LVU256
 1046 003e A217      		cp r26,r18
 1047 0040 B307      		cpc r27,r19
 1048 0042 01F4      		brne .L52
 1049 0044 00C0      		rjmp .L53
 1050               	.LBE20:
 1051               	.LBE21:
 1052               		.cfi_endproc
 1053               	.LFE17:
 1055               		.section	.text.oled_read_raw,"ax",@progbits
 1056               	.global	oled_read_raw
 1058               	oled_read_raw:
 1059               	.LVL92:
 1060               	.LFB18:
 454:drivers/oled/oled_driver.c **** 
 455:drivers/oled/oled_driver.c **** oled_buffer_reader_t oled_read_raw(uint16_t start_index) {
 1061               		.loc 1 455 58 is_stmt 1 view -0
 1062               		.cfi_startproc
 1063               	/* prologue: function */
 1064               	/* frame size = 0 */
 1065               	/* stack size = 0 */
 1066               	.L__stack_usage = 0
 1067               		.loc 1 455 58 is_stmt 0 view .LVU258
 1068 0000 AC01      		movw r20,r24
 456:drivers/oled/oled_driver.c ****     if (start_index > OLED_MATRIX_SIZE) start_index = OLED_MATRIX_SIZE;
 1069               		.loc 1 456 5 is_stmt 1 view .LVU259
 1070 0002 4130      		cpi r20,1
 1071 0004 82E0      		ldi r24,2
 1072 0006 5807      		cpc r21,r24
 1073               	.LVL93:
 1074               		.loc 1 456 5 is_stmt 0 view .LVU260
 1075 0008 00F0      		brlo .L59
 1076 000a 40E0      		ldi r20,0
 1077 000c 52E0      		ldi r21,lo8(2)
 1078               	.LVL94:
 1079               	.L59:
 457:drivers/oled/oled_driver.c ****     oled_buffer_reader_t ret_reader;
 1080               		.loc 1 457 5 is_stmt 1 view .LVU261
 458:drivers/oled/oled_driver.c ****     ret_reader.current_element         = &oled_buffer[start_index];
 1081               		.loc 1 458 5 view .LVU262
 459:drivers/oled/oled_driver.c ****     ret_reader.remaining_element_count = OLED_MATRIX_SIZE - start_index;
 1082               		.loc 1 459 5 view .LVU263
 460:drivers/oled/oled_driver.c ****     return ret_reader;
 1083               		.loc 1 460 5 view .LVU264
 1084               		.loc 1 460 12 is_stmt 0 view .LVU265
 1085 000e BA01      		movw r22,r20
 1086 0010 6050      		subi r22,lo8(-(oled_buffer))
 1087 0012 7040      		sbci r23,hi8(-(oled_buffer))
 1088               	.LVL95:
 1089               		.loc 1 460 12 view .LVU266
 1090 0014 20E0      		ldi r18,0
 1091 0016 32E0      		ldi r19,lo8(2)
 1092 0018 C901      		movw r24,r18
 1093 001a 841B      		sub r24,r20
 1094 001c 950B      		sbc r25,r21
 1095               	.LVL96:
 1096               	/* epilogue start */
 461:drivers/oled/oled_driver.c **** }
 1097               		.loc 1 461 1 view .LVU267
 1098 001e 0895      		ret
 1099               		.cfi_endproc
 1100               	.LFE18:
 1102               		.section	.text.oled_write_raw_byte,"ax",@progbits
 1103               	.global	oled_write_raw_byte
 1105               	oled_write_raw_byte:
 1106               	.LVL97:
 1107               	.LFB19:
 462:drivers/oled/oled_driver.c **** 
 463:drivers/oled/oled_driver.c **** void oled_write_raw_byte(const char data, uint16_t index) {
 1108               		.loc 1 463 59 is_stmt 1 view -0
 1109               		.cfi_startproc
 1110               	/* prologue: function */
 1111               	/* frame size = 0 */
 1112               	/* stack size = 0 */
 1113               	.L__stack_usage = 0
 464:drivers/oled/oled_driver.c ****     if (index > OLED_MATRIX_SIZE) index = OLED_MATRIX_SIZE;
 1114               		.loc 1 464 5 view .LVU269
 1115 0000 6130      		cpi r22,1
 1116 0002 92E0      		ldi r25,2
 1117 0004 7907      		cpc r23,r25
 1118 0006 00F0      		brlo .L61
 1119 0008 60E0      		ldi r22,0
 1120 000a 72E0      		ldi r23,lo8(2)
 1121               	.LVL98:
 1122               	.L61:
 465:drivers/oled/oled_driver.c ****     if (oled_buffer[index] == data) return;
 1123               		.loc 1 465 5 view .LVU270
 1124               		.loc 1 465 20 is_stmt 0 view .LVU271
 1125 000c FB01      		movw r30,r22
 1126 000e E050      		subi r30,lo8(-(oled_buffer))
 1127 0010 F040      		sbci r31,hi8(-(oled_buffer))
 1128               		.loc 1 465 8 view .LVU272
 1129 0012 9081      		ld r25,Z
 1130 0014 9817      		cp r25,r24
 1131 0016 01F0      		breq .L60
 466:drivers/oled/oled_driver.c ****     oled_buffer[index] = data;
 1132               		.loc 1 466 5 is_stmt 1 view .LVU273
 1133               		.loc 1 466 24 is_stmt 0 view .LVU274
 1134 0018 8083      		st Z,r24
 467:drivers/oled/oled_driver.c ****     oled_dirty |= ((OLED_BLOCK_TYPE)1 << (index / OLED_BLOCK_SIZE));
 1135               		.loc 1 467 5 is_stmt 1 view .LVU275
 1136               		.loc 1 467 49 is_stmt 0 view .LVU276
 1137 001a 85E0      		ldi r24,5
 1138               		1:
 1139 001c 7695      		lsr r23
 1140 001e 6795      		ror r22
 1141 0020 8A95      		dec r24
 1142 0022 01F4      		brne 1b
 1143               	.LVL99:
 1144               		.loc 1 467 39 view .LVU277
 1145 0024 21E0      		ldi r18,lo8(1)
 1146 0026 30E0      		ldi r19,0
 1147 0028 00C0      		rjmp 2f
 1148               		1:
 1149 002a 220F      		lsl r18
 1150 002c 331F      		rol r19
 1151               		2:
 1152 002e 6A95      		dec r22
 1153 0030 02F4      		brpl 1b
 1154               		.loc 1 467 16 view .LVU278
 1155 0032 8091 0000 		lds r24,oled_dirty
 1156 0036 9091 0000 		lds r25,oled_dirty+1
 1157 003a 822B      		or r24,r18
 1158 003c 932B      		or r25,r19
 1159 003e 9093 0000 		sts oled_dirty+1,r25
 1160 0042 8093 0000 		sts oled_dirty,r24
 1161               	.LVL100:
 1162               	.L60:
 1163               	/* epilogue start */
 468:drivers/oled/oled_driver.c **** }
 1164               		.loc 1 468 1 view .LVU279
 1165 0046 0895      		ret
 1166               		.cfi_endproc
 1167               	.LFE19:
 1169               		.section	.text.oled_write_raw,"ax",@progbits
 1170               	.global	oled_write_raw
 1172               	oled_write_raw:
 1173               	.LVL101:
 1174               	.LFB20:
 469:drivers/oled/oled_driver.c **** 
 470:drivers/oled/oled_driver.c **** void oled_write_raw(const char *data, uint16_t size) {
 1175               		.loc 1 470 54 is_stmt 1 view -0
 1176               		.cfi_startproc
 1177               		.loc 1 470 54 is_stmt 0 view .LVU281
 1178 0000 CF93      		push r28
 1179               	.LCFI17:
 1180               		.cfi_def_cfa_offset 3
 1181               		.cfi_offset 28, -2
 1182 0002 DF93      		push r29
 1183               	.LCFI18:
 1184               		.cfi_def_cfa_offset 4
 1185               		.cfi_offset 29, -3
 1186               	/* prologue: function */
 1187               	/* frame size = 0 */
 1188               	/* stack size = 2 */
 1189               	.L__stack_usage = 2
 471:drivers/oled/oled_driver.c ****     if (size > OLED_MATRIX_SIZE) size = OLED_MATRIX_SIZE;
 1190               		.loc 1 471 5 is_stmt 1 view .LVU282
 1191 0004 6130      		cpi r22,1
 1192 0006 22E0      		ldi r18,2
 1193 0008 7207      		cpc r23,r18
 1194 000a 00F0      		brlo .L64
 1195 000c 60E0      		ldi r22,0
 1196 000e 72E0      		ldi r23,lo8(2)
 1197               	.LVL102:
 1198               	.L64:
 472:drivers/oled/oled_driver.c ****     for (uint16_t i = 0; i < size; i++) {
 1199               		.loc 1 472 5 view .LVU283
 1200               	.LBB22:
 1201               		.loc 1 472 10 view .LVU284
 1202               		.loc 1 472 10 is_stmt 0 view .LVU285
 1203 0010 E0E0      		ldi r30,lo8(oled_buffer)
 1204 0012 F0E0      		ldi r31,hi8(oled_buffer)
 1205 0014 DC01      		movw r26,r24
 1206               		.loc 1 472 19 view .LVU286
 1207 0016 90E0      		ldi r25,0
 1208 0018 80E0      		ldi r24,0
 1209               	.LVL103:
 473:drivers/oled/oled_driver.c ****         if (oled_buffer[i] == data[i]) continue;
 474:drivers/oled/oled_driver.c ****         oled_buffer[i] = data[i];
 475:drivers/oled/oled_driver.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1210               		.loc 1 475 43 view .LVU287
 1211 001a 41E0      		ldi r20,lo8(1)
 1212 001c 50E0      		ldi r21,0
 1213               	.LVL104:
 1214               	.L65:
 472:drivers/oled/oled_driver.c ****     for (uint16_t i = 0; i < size; i++) {
 1215               		.loc 1 472 26 is_stmt 1 discriminator 1 view .LVU288
 472:drivers/oled/oled_driver.c ****     for (uint16_t i = 0; i < size; i++) {
 1216               		.loc 1 472 5 is_stmt 0 discriminator 1 view .LVU289
 1217 001e 8617      		cp r24,r22
 1218 0020 9707      		cpc r25,r23
 1219 0022 01F4      		brne .L67
 1220               	/* epilogue start */
 1221               	.LBE22:
 476:drivers/oled/oled_driver.c ****     }
 477:drivers/oled/oled_driver.c **** }
 1222               		.loc 1 477 1 view .LVU290
 1223 0024 DF91      		pop r29
 1224 0026 CF91      		pop r28
 1225 0028 0895      		ret
 1226               	.L67:
 1227               	.LBB23:
 473:drivers/oled/oled_driver.c ****         if (oled_buffer[i] == data[i]) continue;
 1228               		.loc 1 473 9 is_stmt 1 view .LVU291
 473:drivers/oled/oled_driver.c ****         if (oled_buffer[i] == data[i]) continue;
 1229               		.loc 1 473 28 is_stmt 0 view .LVU292
 1230 002a 2D91      		ld r18,X+
 473:drivers/oled/oled_driver.c ****         if (oled_buffer[i] == data[i]) continue;
 1231               		.loc 1 473 12 view .LVU293
 1232 002c 3081      		ld r19,Z
 1233 002e 3217      		cp r19,r18
 1234 0030 01F0      		breq .L66
 474:drivers/oled/oled_driver.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1235               		.loc 1 474 9 is_stmt 1 view .LVU294
 474:drivers/oled/oled_driver.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1236               		.loc 1 474 24 is_stmt 0 view .LVU295
 1237 0032 2083      		st Z,r18
 475:drivers/oled/oled_driver.c ****     }
 1238               		.loc 1 475 9 is_stmt 1 view .LVU296
 475:drivers/oled/oled_driver.c ****     }
 1239               		.loc 1 475 49 is_stmt 0 view .LVU297
 1240 0034 9C01      		movw r18,r24
 1241 0036 C5E0      		ldi r28,5
 1242               		1:
 1243 0038 3695      		lsr r19
 1244 003a 2795      		ror r18
 1245 003c CA95      		dec r28
 1246 003e 01F4      		brne 1b
 475:drivers/oled/oled_driver.c ****     }
 1247               		.loc 1 475 43 view .LVU298
 1248 0040 EA01      		movw r28,r20
 1249 0042 00C0      		rjmp 2f
 1250               		1:
 1251 0044 CC0F      		lsl r28
 1252 0046 DD1F      		rol r29
 1253               		2:
 1254 0048 2A95      		dec r18
 1255 004a 02F4      		brpl 1b
 475:drivers/oled/oled_driver.c ****     }
 1256               		.loc 1 475 20 view .LVU299
 1257 004c 2091 0000 		lds r18,oled_dirty
 1258 0050 3091 0000 		lds r19,oled_dirty+1
 1259 0054 2C2B      		or r18,r28
 1260 0056 3D2B      		or r19,r29
 1261 0058 3093 0000 		sts oled_dirty+1,r19
 1262 005c 2093 0000 		sts oled_dirty,r18
 1263               	.L66:
 472:drivers/oled/oled_driver.c ****         if (oled_buffer[i] == data[i]) continue;
 1264               		.loc 1 472 36 is_stmt 1 discriminator 2 view .LVU300
 472:drivers/oled/oled_driver.c ****         if (oled_buffer[i] == data[i]) continue;
 1265               		.loc 1 472 37 is_stmt 0 discriminator 2 view .LVU301
 1266 0060 0196      		adiw r24,1
 1267               	.LVL105:
 472:drivers/oled/oled_driver.c ****         if (oled_buffer[i] == data[i]) continue;
 1268               		.loc 1 472 37 discriminator 2 view .LVU302
 1269 0062 3196      		adiw r30,1
 1270 0064 00C0      		rjmp .L65
 1271               	.LBE23:
 1272               		.cfi_endproc
 1273               	.LFE20:
 1275               		.section	.text.oled_write_pixel,"ax",@progbits
 1276               	.global	oled_write_pixel
 1278               	oled_write_pixel:
 1279               	.LVL106:
 1280               	.LFB21:
 478:drivers/oled/oled_driver.c **** 
 479:drivers/oled/oled_driver.c **** void oled_write_pixel(uint8_t x, uint8_t y, bool on) {
 1281               		.loc 1 479 54 is_stmt 1 view -0
 1282               		.cfi_startproc
 1283               	/* prologue: function */
 1284               	/* frame size = 0 */
 1285               	/* stack size = 0 */
 1286               	.L__stack_usage = 0
 480:drivers/oled/oled_driver.c ****     if (x >= oled_rotation_width) {
 1287               		.loc 1 480 5 view .LVU304
 1288               		.loc 1 480 11 is_stmt 0 view .LVU305
 1289 0000 3091 0000 		lds r19,oled_rotation_width
 1290               		.loc 1 480 8 view .LVU306
 1291 0004 8317      		cp r24,r19
 1292 0006 00F4      		brsh .L68
 481:drivers/oled/oled_driver.c ****         return;
 482:drivers/oled/oled_driver.c ****     }
 483:drivers/oled/oled_driver.c ****     uint16_t index = x + (y / 8) * oled_rotation_width;
 1293               		.loc 1 483 5 is_stmt 1 view .LVU307
 1294               		.loc 1 483 24 is_stmt 0 view .LVU308
 1295 0008 90E0      		ldi r25,0
 1296 000a 262F      		mov r18,r22
 1297 000c 2695      		lsr r18
 1298 000e 2695      		lsr r18
 1299 0010 2695      		lsr r18
 1300 0012 239F      		mul r18,r19
 1301 0014 800D      		add r24,r0
 1302 0016 911D      		adc r25,r1
 1303 0018 1124      		clr __zero_reg__
 1304               	.LVL107:
 484:drivers/oled/oled_driver.c ****     if (index >= OLED_MATRIX_SIZE) {
 1305               		.loc 1 484 5 is_stmt 1 view .LVU309
 1306               		.loc 1 484 8 is_stmt 0 view .LVU310
 1307 001a 8115      		cp r24,__zero_reg__
 1308 001c 22E0      		ldi r18,2
 1309 001e 9207      		cpc r25,r18
 1310 0020 04F4      		brge .L68
 485:drivers/oled/oled_driver.c ****         return;
 486:drivers/oled/oled_driver.c ****     }
 487:drivers/oled/oled_driver.c ****     uint8_t data = oled_buffer[index];
 1311               		.loc 1 487 5 is_stmt 1 view .LVU311
 1312               		.loc 1 487 13 is_stmt 0 view .LVU312
 1313 0022 FC01      		movw r30,r24
 1314 0024 E050      		subi r30,lo8(-(oled_buffer))
 1315 0026 F040      		sbci r31,hi8(-(oled_buffer))
 1316 0028 5081      		ld r21,Z
 1317               	.LVL108:
 488:drivers/oled/oled_driver.c ****     if (on) {
 1318               		.loc 1 488 5 is_stmt 1 view .LVU313
 1319 002a 6770      		andi r22,lo8(7)
 1320               	.LVL109:
 1321               		.loc 1 488 5 is_stmt 0 view .LVU314
 1322 002c 21E0      		ldi r18,lo8(1)
 1323 002e 30E0      		ldi r19,0
 1324 0030 00C0      		rjmp 2f
 1325               		1:
 1326 0032 220F      		lsl r18
 1327               		2:
 1328 0034 6A95      		dec r22
 1329 0036 02F4      		brpl 1b
 1330               		.loc 1 488 8 view .LVU315
 1331 0038 4423      		tst r20
 1332 003a 01F0      		breq .L70
 489:drivers/oled/oled_driver.c ****         data |= (1 << (y % 8));
 1333               		.loc 1 489 9 is_stmt 1 view .LVU316
 1334               		.loc 1 489 14 is_stmt 0 view .LVU317
 1335 003c 252B      		or r18,r21
 1336               	.LVL110:
 1337               	.L71:
 490:drivers/oled/oled_driver.c ****     } else {
 491:drivers/oled/oled_driver.c ****         data &= ~(1 << (y % 8));
 492:drivers/oled/oled_driver.c ****     }
 493:drivers/oled/oled_driver.c ****     if (oled_buffer[index] != data) {
 1338               		.loc 1 493 5 is_stmt 1 view .LVU318
 1339               		.loc 1 493 8 is_stmt 0 view .LVU319
 1340 003e 2517      		cp r18,r21
 1341 0040 01F0      		breq .L68
 494:drivers/oled/oled_driver.c ****         oled_buffer[index] = data;
 1342               		.loc 1 494 9 is_stmt 1 view .LVU320
 1343               		.loc 1 494 28 is_stmt 0 view .LVU321
 1344 0042 2083      		st Z,r18
 495:drivers/oled/oled_driver.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (index / OLED_BLOCK_SIZE));
 1345               		.loc 1 495 9 is_stmt 1 view .LVU322
 1346               		.loc 1 495 53 is_stmt 0 view .LVU323
 1347 0044 25E0      		ldi r18,5
 1348               		1:
 1349 0046 9695      		lsr r25
 1350 0048 8795      		ror r24
 1351 004a 2A95      		dec r18
 1352 004c 01F4      		brne 1b
 1353               	.LVL111:
 1354               		.loc 1 495 43 view .LVU324
 1355 004e 21E0      		ldi r18,lo8(1)
 1356 0050 30E0      		ldi r19,0
 1357 0052 00C0      		rjmp 2f
 1358               		1:
 1359 0054 220F      		lsl r18
 1360 0056 331F      		rol r19
 1361               		2:
 1362 0058 8A95      		dec r24
 1363 005a 02F4      		brpl 1b
 1364               		.loc 1 495 20 view .LVU325
 1365 005c 8091 0000 		lds r24,oled_dirty
 1366 0060 9091 0000 		lds r25,oled_dirty+1
 1367 0064 822B      		or r24,r18
 1368 0066 932B      		or r25,r19
 1369 0068 9093 0000 		sts oled_dirty+1,r25
 1370 006c 8093 0000 		sts oled_dirty,r24
 1371               	.LVL112:
 1372               	.L68:
 1373               	/* epilogue start */
 496:drivers/oled/oled_driver.c ****     }
 497:drivers/oled/oled_driver.c **** }
 1374               		.loc 1 497 1 view .LVU326
 1375 0070 0895      		ret
 1376               	.LVL113:
 1377               	.L70:
 491:drivers/oled/oled_driver.c ****     }
 1378               		.loc 1 491 9 is_stmt 1 view .LVU327
 491:drivers/oled/oled_driver.c ****     }
 1379               		.loc 1 491 14 is_stmt 0 view .LVU328
 1380 0072 2095      		com r18
 1381 0074 2523      		and r18,r21
 1382               	.LVL114:
 491:drivers/oled/oled_driver.c ****     }
 1383               		.loc 1 491 14 view .LVU329
 1384 0076 00C0      		rjmp .L71
 1385               		.cfi_endproc
 1386               	.LFE21:
 1388               		.section	.text.oled_write_P,"ax",@progbits
 1389               	.global	oled_write_P
 1391               	oled_write_P:
 1392               	.LVL115:
 1393               	.LFB22:
 498:drivers/oled/oled_driver.c **** 
 499:drivers/oled/oled_driver.c **** #if defined(__AVR__)
 500:drivers/oled/oled_driver.c **** void oled_write_P(const char *data, bool invert) {
 1394               		.loc 1 500 50 is_stmt 1 view -0
 1395               		.cfi_startproc
 1396               		.loc 1 500 50 is_stmt 0 view .LVU331
 1397 0000 1F93      		push r17
 1398               	.LCFI19:
 1399               		.cfi_def_cfa_offset 3
 1400               		.cfi_offset 17, -2
 1401 0002 CF93      		push r28
 1402               	.LCFI20:
 1403               		.cfi_def_cfa_offset 4
 1404               		.cfi_offset 28, -3
 1405 0004 DF93      		push r29
 1406               	.LCFI21:
 1407               		.cfi_def_cfa_offset 5
 1408               		.cfi_offset 29, -4
 1409               	/* prologue: function */
 1410               	/* frame size = 0 */
 1411               	/* stack size = 3 */
 1412               	.L__stack_usage = 3
 1413 0006 EC01      		movw r28,r24
 1414 0008 162F      		mov r17,r22
 1415               	.LVL116:
 1416               	.L75:
 1417               	.LBB24:
 501:drivers/oled/oled_driver.c ****     uint8_t c = pgm_read_byte(data);
 502:drivers/oled/oled_driver.c ****     while (c != 0) {
 503:drivers/oled/oled_driver.c ****         oled_write_char(c, invert);
 504:drivers/oled/oled_driver.c ****         c = pgm_read_byte(++data);
 1418               		.loc 1 504 13 is_stmt 1 view .LVU332
 1419               		.loc 1 504 13 view .LVU333
 1420 000a FE01      		movw r30,r28
 1421               	/* #APP */
 1422               	 ;  504 "drivers/oled/oled_driver.c" 1
 1423 000c 8491      		lpm r24, Z
 1424               		
 1425               	 ;  0 "" 2
 1426               	.LVL117:
 1427               		.loc 1 504 13 view .LVU334
 1428               		.loc 1 504 13 is_stmt 0 view .LVU335
 1429               	/* #NOAPP */
 1430               	.LBE24:
 502:drivers/oled/oled_driver.c ****         oled_write_char(c, invert);
 1431               		.loc 1 502 11 is_stmt 1 view .LVU336
 1432 000e 8111      		cpse r24,__zero_reg__
 1433 0010 00C0      		rjmp .L74
 1434               	/* epilogue start */
 505:drivers/oled/oled_driver.c ****     }
 506:drivers/oled/oled_driver.c **** }
 1435               		.loc 1 506 1 is_stmt 0 view .LVU337
 1436 0012 DF91      		pop r29
 1437 0014 CF91      		pop r28
 1438               	.LVL118:
 1439               		.loc 1 506 1 view .LVU338
 1440 0016 1F91      		pop r17
 1441               	.LVL119:
 1442               		.loc 1 506 1 view .LVU339
 1443 0018 0895      		ret
 1444               	.LVL120:
 1445               	.L74:
 503:drivers/oled/oled_driver.c ****         c = pgm_read_byte(++data);
 1446               		.loc 1 503 9 is_stmt 1 view .LVU340
 1447 001a 612F      		mov r22,r17
 1448 001c 0E94 0000 		call oled_write_char
 1449               	.LVL121:
 504:drivers/oled/oled_driver.c ****     }
 1450               		.loc 1 504 9 view .LVU341
 1451               	.LBB25:
 504:drivers/oled/oled_driver.c ****     }
 1452               		.loc 1 504 13 view .LVU342
 1453 0020 2196      		adiw r28,1
 1454               	.LVL122:
 504:drivers/oled/oled_driver.c ****     }
 1455               		.loc 1 504 13 is_stmt 0 view .LVU343
 1456 0022 00C0      		rjmp .L75
 1457               	.LBE25:
 1458               		.cfi_endproc
 1459               	.LFE22:
 1461               		.section	.text.oled_write_ln_P,"ax",@progbits
 1462               	.global	oled_write_ln_P
 1464               	oled_write_ln_P:
 1465               	.LVL123:
 1466               	.LFB23:
 507:drivers/oled/oled_driver.c **** 
 508:drivers/oled/oled_driver.c **** void oled_write_ln_P(const char *data, bool invert) {
 1467               		.loc 1 508 53 is_stmt 1 view -0
 1468               		.cfi_startproc
 1469               	/* prologue: function */
 1470               	/* frame size = 0 */
 1471               	/* stack size = 0 */
 1472               	.L__stack_usage = 0
 509:drivers/oled/oled_driver.c ****     oled_write_P(data, invert);
 1473               		.loc 1 509 5 view .LVU345
 1474 0000 0E94 0000 		call oled_write_P
 1475               	.LVL124:
 510:drivers/oled/oled_driver.c ****     oled_advance_page(true);
 1476               		.loc 1 510 5 view .LVU346
 1477 0004 81E0      		ldi r24,lo8(1)
 1478 0006 0C94 0000 		jmp oled_advance_page
 1479               	.LVL125:
 1480               		.cfi_endproc
 1481               	.LFE23:
 1483               		.section	.text.oled_write_raw_P,"ax",@progbits
 1484               	.global	oled_write_raw_P
 1486               	oled_write_raw_P:
 1487               	.LVL126:
 1488               	.LFB24:
 511:drivers/oled/oled_driver.c **** }
 512:drivers/oled/oled_driver.c **** 
 513:drivers/oled/oled_driver.c **** void oled_write_raw_P(const char *data, uint16_t size) {
 1489               		.loc 1 513 56 view -0
 1490               		.cfi_startproc
 1491               		.loc 1 513 56 is_stmt 0 view .LVU348
 1492 0000 0F93      		push r16
 1493               	.LCFI22:
 1494               		.cfi_def_cfa_offset 3
 1495               		.cfi_offset 16, -2
 1496 0002 1F93      		push r17
 1497               	.LCFI23:
 1498               		.cfi_def_cfa_offset 4
 1499               		.cfi_offset 17, -3
 1500 0004 CF93      		push r28
 1501               	.LCFI24:
 1502               		.cfi_def_cfa_offset 5
 1503               		.cfi_offset 28, -4
 1504 0006 DF93      		push r29
 1505               	.LCFI25:
 1506               		.cfi_def_cfa_offset 6
 1507               		.cfi_offset 29, -5
 1508               	/* prologue: function */
 1509               	/* frame size = 0 */
 1510               	/* stack size = 4 */
 1511               	.L__stack_usage = 4
 514:drivers/oled/oled_driver.c ****     if (size > OLED_MATRIX_SIZE) size = OLED_MATRIX_SIZE;
 1512               		.loc 1 514 5 is_stmt 1 view .LVU349
 1513 0008 6130      		cpi r22,1
 1514 000a 02E0      		ldi r16,2
 1515 000c 7007      		cpc r23,r16
 1516 000e 00F0      		brlo .L78
 1517 0010 60E0      		ldi r22,0
 1518 0012 72E0      		ldi r23,lo8(2)
 1519               	.LVL127:
 1520               	.L78:
 515:drivers/oled/oled_driver.c ****     for (uint16_t i = 0; i < size; i++) {
 1521               		.loc 1 515 5 view .LVU350
 1522               	.LBB26:
 1523               		.loc 1 515 10 view .LVU351
 1524               		.loc 1 515 10 is_stmt 0 view .LVU352
 1525 0014 4091 0000 		lds r20,oled_dirty
 1526 0018 5091 0000 		lds r21,oled_dirty+1
 1527 001c A0E0      		ldi r26,lo8(oled_buffer)
 1528 001e B0E0      		ldi r27,hi8(oled_buffer)
 1529               		.loc 1 515 19 view .LVU353
 1530 0020 30E0      		ldi r19,0
 1531 0022 20E0      		ldi r18,0
 1532               	.LBB27:
 516:drivers/oled/oled_driver.c ****         uint8_t c = pgm_read_byte(data++);
 517:drivers/oled/oled_driver.c ****         if (oled_buffer[i] == c) continue;
 518:drivers/oled/oled_driver.c ****         oled_buffer[i] = c;
 519:drivers/oled/oled_driver.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1533               		.loc 1 519 43 view .LVU354
 1534 0024 C1E0      		ldi r28,lo8(1)
 1535 0026 D0E0      		ldi r29,0
 1536               	.LVL128:
 1537               	.L79:
 1538               		.loc 1 519 43 view .LVU355
 1539               	.LBE27:
 515:drivers/oled/oled_driver.c ****     for (uint16_t i = 0; i < size; i++) {
 1540               		.loc 1 515 26 is_stmt 1 discriminator 1 view .LVU356
 515:drivers/oled/oled_driver.c ****     for (uint16_t i = 0; i < size; i++) {
 1541               		.loc 1 515 5 is_stmt 0 discriminator 1 view .LVU357
 1542 0028 2617      		cp r18,r22
 1543 002a 3707      		cpc r19,r23
 1544 002c 01F4      		brne .L81
 1545 002e 5093 0000 		sts oled_dirty+1,r21
 1546 0032 4093 0000 		sts oled_dirty,r20
 1547               	/* epilogue start */
 1548               	.LBE26:
 520:drivers/oled/oled_driver.c ****     }
 521:drivers/oled/oled_driver.c **** }
 1549               		.loc 1 521 1 view .LVU358
 1550 0036 DF91      		pop r29
 1551 0038 CF91      		pop r28
 1552 003a 1F91      		pop r17
 1553 003c 0F91      		pop r16
 1554 003e 0895      		ret
 1555               	.L81:
 1556               	.LBB30:
 1557               	.LBB29:
 516:drivers/oled/oled_driver.c ****         uint8_t c = pgm_read_byte(data++);
 1558               		.loc 1 516 9 is_stmt 1 view .LVU359
 1559               	.LBB28:
 516:drivers/oled/oled_driver.c ****         uint8_t c = pgm_read_byte(data++);
 1560               		.loc 1 516 21 view .LVU360
 1561               	.LVL129:
 516:drivers/oled/oled_driver.c ****         uint8_t c = pgm_read_byte(data++);
 1562               		.loc 1 516 21 view .LVU361
 516:drivers/oled/oled_driver.c ****         uint8_t c = pgm_read_byte(data++);
 1563               		.loc 1 516 21 view .LVU362
 1564 0040 FC01      		movw r30,r24
 1565 0042 E20F      		add r30,r18
 1566 0044 F31F      		adc r31,r19
 1567               	.LVL130:
 516:drivers/oled/oled_driver.c ****         uint8_t c = pgm_read_byte(data++);
 1568               		.loc 1 516 21 is_stmt 0 view .LVU363
 1569               	/* #APP */
 1570               	 ;  516 "drivers/oled/oled_driver.c" 1
 1571 0046 E491      		lpm r30, Z
 1572               		
 1573               	 ;  0 "" 2
 1574               	.LVL131:
 516:drivers/oled/oled_driver.c ****         uint8_t c = pgm_read_byte(data++);
 1575               		.loc 1 516 21 is_stmt 1 view .LVU364
 516:drivers/oled/oled_driver.c ****         uint8_t c = pgm_read_byte(data++);
 1576               		.loc 1 516 21 is_stmt 0 view .LVU365
 1577               	/* #NOAPP */
 1578               	.LBE28:
 517:drivers/oled/oled_driver.c ****         oled_buffer[i] = c;
 1579               		.loc 1 517 9 is_stmt 1 view .LVU366
 517:drivers/oled/oled_driver.c ****         oled_buffer[i] = c;
 1580               		.loc 1 517 12 is_stmt 0 view .LVU367
 1581 0048 FC91      		ld r31,X
 1582 004a FE17      		cp r31,r30
 1583 004c 01F0      		breq .L80
 518:drivers/oled/oled_driver.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1584               		.loc 1 518 9 is_stmt 1 view .LVU368
 518:drivers/oled/oled_driver.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1585               		.loc 1 518 24 is_stmt 0 view .LVU369
 1586 004e EC93      		st X,r30
 519:drivers/oled/oled_driver.c ****     }
 1587               		.loc 1 519 9 is_stmt 1 view .LVU370
 519:drivers/oled/oled_driver.c ****     }
 1588               		.loc 1 519 49 is_stmt 0 view .LVU371
 1589 0050 F901      		movw r30,r18
 1590               	.LVL132:
 519:drivers/oled/oled_driver.c ****     }
 1591               		.loc 1 519 49 view .LVU372
 1592 0052 15E0      		ldi r17,5
 1593               		1:
 1594 0054 F695      		lsr r31
 1595 0056 E795      		ror r30
 1596 0058 1A95      		dec r17
 1597 005a 01F4      		brne 1b
 519:drivers/oled/oled_driver.c ****     }
 1598               		.loc 1 519 43 view .LVU373
 1599 005c 8E01      		movw r16,r28
 1600 005e 00C0      		rjmp 2f
 1601               		1:
 1602 0060 000F      		lsl r16
 1603 0062 111F      		rol r17
 1604               		2:
 1605 0064 EA95      		dec r30
 1606 0066 02F4      		brpl 1b
 1607 0068 F801      		movw r30,r16
 519:drivers/oled/oled_driver.c ****     }
 1608               		.loc 1 519 20 view .LVU374
 1609 006a 402B      		or r20,r16
 1610 006c 5F2B      		or r21,r31
 1611               	.LVL133:
 1612               	.L80:
 519:drivers/oled/oled_driver.c ****     }
 1613               		.loc 1 519 20 view .LVU375
 1614               	.LBE29:
 515:drivers/oled/oled_driver.c ****         uint8_t c = pgm_read_byte(data++);
 1615               		.loc 1 515 36 is_stmt 1 discriminator 2 view .LVU376
 515:drivers/oled/oled_driver.c ****         uint8_t c = pgm_read_byte(data++);
 1616               		.loc 1 515 37 is_stmt 0 discriminator 2 view .LVU377
 1617 006e 2F5F      		subi r18,-1
 1618 0070 3F4F      		sbci r19,-1
 1619               	.LVL134:
 515:drivers/oled/oled_driver.c ****         uint8_t c = pgm_read_byte(data++);
 1620               		.loc 1 515 37 discriminator 2 view .LVU378
 1621 0072 1196      		adiw r26,1
 1622 0074 00C0      		rjmp .L79
 1623               	.LBE30:
 1624               		.cfi_endproc
 1625               	.LFE24:
 1627               		.section	.text.oled_on,"ax",@progbits
 1628               	.global	oled_on
 1630               	oled_on:
 1631               	.LFB25:
 522:drivers/oled/oled_driver.c **** #endif  // defined(__AVR__)
 523:drivers/oled/oled_driver.c **** 
 524:drivers/oled/oled_driver.c **** bool oled_on(void) {
 1632               		.loc 1 524 20 is_stmt 1 view -0
 1633               		.cfi_startproc
 1634               	/* prologue: function */
 1635               	/* frame size = 0 */
 1636               	/* stack size = 0 */
 1637               	.L__stack_usage = 0
 525:drivers/oled/oled_driver.c **** #if OLED_TIMEOUT > 0
 526:drivers/oled/oled_driver.c ****     oled_timeout = timer_read32() + OLED_TIMEOUT;
 1638               		.loc 1 526 5 view .LVU380
 1639               		.loc 1 526 20 is_stmt 0 view .LVU381
 1640 0000 0E94 0000 		call timer_read32
 1641               	.LVL135:
 1642               		.loc 1 526 35 view .LVU382
 1643 0004 605A      		subi r22,-96
 1644 0006 7541      		sbci r23,21
 1645 0008 8F4F      		sbci r24,-1
 1646 000a 9F4F      		sbci r25,-1
 1647               		.loc 1 526 18 view .LVU383
 1648 000c 6093 0000 		sts oled_timeout,r22
 1649 0010 7093 0000 		sts oled_timeout+1,r23
 1650 0014 8093 0000 		sts oled_timeout+2,r24
 1651 0018 9093 0000 		sts oled_timeout+3,r25
 527:drivers/oled/oled_driver.c **** #endif
 528:drivers/oled/oled_driver.c **** 
 529:drivers/oled/oled_driver.c ****     static const uint8_t PROGMEM display_on[] = {I2C_CMD, DISPLAY_ON};
 1652               		.loc 1 529 5 is_stmt 1 view .LVU384
 530:drivers/oled/oled_driver.c ****     if (!oled_active) {
 1653               		.loc 1 530 5 view .LVU385
 1654               		.loc 1 530 8 is_stmt 0 view .LVU386
 1655 001c 8091 0000 		lds r24,oled_active
 1656 0020 8111      		cpse r24,__zero_reg__
 1657 0022 00C0      		rjmp .L83
 531:drivers/oled/oled_driver.c ****         if (I2C_TRANSMIT_P(display_on) != I2C_STATUS_SUCCESS) {
 1658               		.loc 1 531 9 is_stmt 1 view .LVU387
 1659               		.loc 1 531 13 is_stmt 0 view .LVU388
 1660 0024 62E0      		ldi r22,lo8(2)
 1661 0026 70E0      		ldi r23,0
 1662 0028 80E0      		ldi r24,lo8(display_on.2192)
 1663 002a 90E0      		ldi r25,hi8(display_on.2192)
 1664 002c 0E94 0000 		call i2c_transmit_P.constprop.2
 1665               	.LVL136:
 1666               		.loc 1 531 12 view .LVU389
 1667 0030 892B      		or r24,r25
 1668 0032 01F0      		breq .L84
 1669               	.L83:
 532:drivers/oled/oled_driver.c ****             print("oled_on cmd failed\n");
 533:drivers/oled/oled_driver.c ****             return oled_active;
 534:drivers/oled/oled_driver.c ****         }
 535:drivers/oled/oled_driver.c ****         oled_active = true;
 536:drivers/oled/oled_driver.c ****     }
 537:drivers/oled/oled_driver.c ****     return oled_active;
 1670               		.loc 1 537 5 is_stmt 1 view .LVU390
 1671               		.loc 1 537 12 is_stmt 0 view .LVU391
 1672 0034 8091 0000 		lds r24,oled_active
 1673               	/* epilogue start */
 538:drivers/oled/oled_driver.c **** }
 1674               		.loc 1 538 1 view .LVU392
 1675 0038 0895      		ret
 1676               	.L84:
 535:drivers/oled/oled_driver.c ****     }
 1677               		.loc 1 535 9 is_stmt 1 view .LVU393
 535:drivers/oled/oled_driver.c ****     }
 1678               		.loc 1 535 21 is_stmt 0 view .LVU394
 1679 003a 81E0      		ldi r24,lo8(1)
 1680 003c 8093 0000 		sts oled_active,r24
 1681 0040 00C0      		rjmp .L83
 1682               		.cfi_endproc
 1683               	.LFE25:
 1685               		.section	.text.oled_render,"ax",@progbits
 1686               	.global	oled_render
 1688               	oled_render:
 1689               	.LFB10:
 270:drivers/oled/oled_driver.c ****     // Do we have work to do?
 1690               		.loc 1 270 24 is_stmt 1 view -0
 1691               		.cfi_startproc
 1692 0000 2F92      		push r2
 1693               	.LCFI26:
 1694               		.cfi_def_cfa_offset 3
 1695               		.cfi_offset 2, -2
 1696 0002 3F92      		push r3
 1697               	.LCFI27:
 1698               		.cfi_def_cfa_offset 4
 1699               		.cfi_offset 3, -3
 1700 0004 5F92      		push r5
 1701               	.LCFI28:
 1702               		.cfi_def_cfa_offset 5
 1703               		.cfi_offset 5, -4
 1704 0006 6F92      		push r6
 1705               	.LCFI29:
 1706               		.cfi_def_cfa_offset 6
 1707               		.cfi_offset 6, -5
 1708 0008 7F92      		push r7
 1709               	.LCFI30:
 1710               		.cfi_def_cfa_offset 7
 1711               		.cfi_offset 7, -6
 1712 000a 8F92      		push r8
 1713               	.LCFI31:
 1714               		.cfi_def_cfa_offset 8
 1715               		.cfi_offset 8, -7
 1716 000c 9F92      		push r9
 1717               	.LCFI32:
 1718               		.cfi_def_cfa_offset 9
 1719               		.cfi_offset 9, -8
 1720 000e AF92      		push r10
 1721               	.LCFI33:
 1722               		.cfi_def_cfa_offset 10
 1723               		.cfi_offset 10, -9
 1724 0010 BF92      		push r11
 1725               	.LCFI34:
 1726               		.cfi_def_cfa_offset 11
 1727               		.cfi_offset 11, -10
 1728 0012 CF92      		push r12
 1729               	.LCFI35:
 1730               		.cfi_def_cfa_offset 12
 1731               		.cfi_offset 12, -11
 1732 0014 DF92      		push r13
 1733               	.LCFI36:
 1734               		.cfi_def_cfa_offset 13
 1735               		.cfi_offset 13, -12
 1736 0016 EF92      		push r14
 1737               	.LCFI37:
 1738               		.cfi_def_cfa_offset 14
 1739               		.cfi_offset 14, -13
 1740 0018 FF92      		push r15
 1741               	.LCFI38:
 1742               		.cfi_def_cfa_offset 15
 1743               		.cfi_offset 15, -14
 1744 001a 0F93      		push r16
 1745               	.LCFI39:
 1746               		.cfi_def_cfa_offset 16
 1747               		.cfi_offset 16, -15
 1748 001c 1F93      		push r17
 1749               	.LCFI40:
 1750               		.cfi_def_cfa_offset 17
 1751               		.cfi_offset 17, -16
 1752 001e CF93      		push r28
 1753               	.LCFI41:
 1754               		.cfi_def_cfa_offset 18
 1755               		.cfi_offset 28, -17
 1756 0020 DF93      		push r29
 1757               	.LCFI42:
 1758               		.cfi_def_cfa_offset 19
 1759               		.cfi_offset 29, -18
 1760               	/* prologue: function */
 1761               	/* frame size = 0 */
 1762               	/* stack size = 17 */
 1763               	.L__stack_usage = 17
 272:drivers/oled/oled_driver.c ****     if (!oled_dirty || oled_scrolling) {
 1764               		.loc 1 272 5 view .LVU396
 272:drivers/oled/oled_driver.c ****     if (!oled_dirty || oled_scrolling) {
 1765               		.loc 1 272 16 is_stmt 0 view .LVU397
 1766 0022 2091 0000 		lds r18,oled_dirty
 1767 0026 3091 0000 		lds r19,oled_dirty+1
 273:drivers/oled/oled_driver.c ****         return;
 1768               		.loc 1 273 5 is_stmt 1 view .LVU398
 273:drivers/oled/oled_driver.c ****         return;
 1769               		.loc 1 273 8 is_stmt 0 view .LVU399
 1770 002a 2115      		cp r18,__zero_reg__
 1771 002c 3105      		cpc r19,__zero_reg__
 1772 002e 01F0      		breq .L86
 273:drivers/oled/oled_driver.c ****         return;
 1773               		.loc 1 273 21 discriminator 1 view .LVU400
 1774 0030 8091 0000 		lds r24,oled_scrolling
 279:drivers/oled/oled_driver.c ****         ++update_start;
 1775               		.loc 1 279 47 discriminator 1 view .LVU401
 1776 0034 61E0      		ldi r22,lo8(1)
 1777 0036 70E0      		ldi r23,0
 273:drivers/oled/oled_driver.c ****         return;
 1778               		.loc 1 273 21 discriminator 1 view .LVU402
 1779 0038 8823      		tst r24
 1780 003a 01F0      		breq .L90
 1781               	.L86:
 1782               	/* epilogue start */
 326:drivers/oled/oled_driver.c **** 
 1783               		.loc 1 326 1 view .LVU403
 1784 003c DF91      		pop r29
 1785 003e CF91      		pop r28
 1786 0040 1F91      		pop r17
 1787 0042 0F91      		pop r16
 1788 0044 FF90      		pop r15
 1789 0046 EF90      		pop r14
 1790 0048 DF90      		pop r13
 1791 004a CF90      		pop r12
 1792 004c BF90      		pop r11
 1793 004e AF90      		pop r10
 1794 0050 9F90      		pop r9
 1795 0052 8F90      		pop r8
 1796 0054 7F90      		pop r7
 1797 0056 6F90      		pop r6
 1798 0058 5F90      		pop r5
 1799 005a 3F90      		pop r3
 1800 005c 2F90      		pop r2
 1801 005e 0895      		ret
 1802               	.LVL137:
 1803               	.L91:
 280:drivers/oled/oled_driver.c ****     }
 1804               		.loc 1 280 9 is_stmt 1 view .LVU404
 1805 0060 8F5F      		subi r24,lo8(-(1))
 1806               	.LVL138:
 1807               	.L90:
 279:drivers/oled/oled_driver.c ****         ++update_start;
 1808               		.loc 1 279 11 view .LVU405
 279:drivers/oled/oled_driver.c ****         ++update_start;
 1809               		.loc 1 279 47 is_stmt 0 view .LVU406
 1810 0062 082F      		mov r16,r24
 1811 0064 10E0      		ldi r17,0
 1812 0066 1B01      		movw r2,r22
 1813 0068 082E      		mov r0,r24
 1814 006a 00C0      		rjmp 2f
 1815               		1:
 1816 006c 220C      		lsl r2
 1817 006e 331C      		rol r3
 1818               		2:
 1819 0070 0A94      		dec r0
 1820 0072 02F4      		brpl 1b
 279:drivers/oled/oled_driver.c ****         ++update_start;
 1821               		.loc 1 279 25 view .LVU407
 1822 0074 A901      		movw r20,r18
 1823 0076 4221      		and r20,r2
 1824 0078 5321      		and r21,r3
 279:drivers/oled/oled_driver.c ****         ++update_start;
 1825               		.loc 1 279 11 view .LVU408
 1826 007a 452B      		or r20,r21
 1827 007c 01F0      		breq .L91
 284:drivers/oled/oled_driver.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 1828               		.loc 1 284 5 is_stmt 1 view .LVU409
 285:drivers/oled/oled_driver.c ****         calc_bounds(update_start, &display_start[1]);  // Offset from I2C_CMD byte at the start
 1829               		.loc 1 285 5 view .LVU410
 285:drivers/oled/oled_driver.c ****         calc_bounds(update_start, &display_start[1]);  // Offset from I2C_CMD byte at the start
 1830               		.loc 1 285 8 is_stmt 0 view .LVU411
 1831 007e 9091 0000 		lds r25,oled_rotation
 1832 0082 90FD      		sbrc r25,0
 1833 0084 00C0      		rjmp .L92
 286:drivers/oled/oled_driver.c ****     } else {
 1834               		.loc 1 286 9 is_stmt 1 view .LVU412
 1835               	.LVL139:
 1836               	.LBB44:
 1837               	.LBI44:
 225:drivers/oled/oled_driver.c ****     // Calculate commands to set memory addressing bounds.
 1838               		.loc 1 225 13 view .LVU413
 1839               	.LBB45:
 227:drivers/oled/oled_driver.c ****     uint8_t start_column = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_WIDTH;
 1840               		.loc 1 227 5 view .LVU414
 228:drivers/oled/oled_driver.c **** #if (OLED_IC == OLED_IC_SH1106)
 1841               		.loc 1 228 5 view .LVU415
 228:drivers/oled/oled_driver.c **** #if (OLED_IC == OLED_IC_SH1106)
 1842               		.loc 1 228 44 is_stmt 0 view .LVU416
 1843 0086 8295      		swap r24
 1844               	.LVL140:
 228:drivers/oled/oled_driver.c **** #if (OLED_IC == OLED_IC_SH1106)
 1845               		.loc 1 228 44 view .LVU417
 1846 0088 880F      		lsl r24
 228:drivers/oled/oled_driver.c **** #if (OLED_IC == OLED_IC_SH1106)
 1847               		.loc 1 228 13 view .LVU418
 1848 008a 8076      		andi r24,lo8(96)
 1849               	.LVL141:
 240:drivers/oled/oled_driver.c ****     cmd_array[4] = start_page;
 1850               		.loc 1 240 5 is_stmt 1 view .LVU419
 240:drivers/oled/oled_driver.c ****     cmd_array[4] = start_page;
 1851               		.loc 1 240 18 is_stmt 0 view .LVU420
 1852 008c 8093 0000 		sts display_start.2072+2,r24
 241:drivers/oled/oled_driver.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) % OLED_DISPLAY_WIDTH + cmd_array[1];
 1853               		.loc 1 241 5 is_stmt 1 view .LVU421
 227:drivers/oled/oled_driver.c ****     uint8_t start_column = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_WIDTH;
 1854               		.loc 1 227 59 is_stmt 0 view .LVU422
 1855 0090 9801      		movw r18,r16
 1856 0092 3695      		lsr r19
 1857 0094 2795      		ror r18
 1858 0096 3695      		lsr r19
 1859 0098 2795      		ror r18
 227:drivers/oled/oled_driver.c ****     uint8_t start_column = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_WIDTH;
 1860               		.loc 1 227 13 view .LVU423
 1861 009a 2093 0000 		sts display_start.2072+5,r18
 242:drivers/oled/oled_driver.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) / OLED_DISPLAY_WIDTH - 1;
 1862               		.loc 1 242 5 is_stmt 1 view .LVU424
 242:drivers/oled/oled_driver.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) / OLED_DISPLAY_WIDTH - 1;
 1863               		.loc 1 242 84 is_stmt 0 view .LVU425
 1864 009e 815E      		subi r24,lo8(-(31))
 1865               	.LVL142:
 242:drivers/oled/oled_driver.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) / OLED_DISPLAY_WIDTH - 1;
 1866               		.loc 1 242 18 view .LVU426
 1867 00a0 8093 0000 		sts display_start.2072+3,r24
 243:drivers/oled/oled_driver.c **** #endif
 1868               		.loc 1 243 5 is_stmt 1 view .LVU427
 243:drivers/oled/oled_driver.c **** #endif
 1869               		.loc 1 243 18 is_stmt 0 view .LVU428
 1870 00a4 1092 0000 		sts display_start.2072+6,__zero_reg__
 1871               	.LVL143:
 1872               	.L93:
 243:drivers/oled/oled_driver.c **** #endif
 1873               		.loc 1 243 18 view .LVU429
 1874               	.LBE45:
 1875               	.LBE44:
 292:drivers/oled/oled_driver.c ****         print("oled_render offset command failed\n");
 1876               		.loc 1 292 5 is_stmt 1 view .LVU430
 292:drivers/oled/oled_driver.c ****         print("oled_render offset command failed\n");
 1877               		.loc 1 292 9 is_stmt 0 view .LVU431
 1878 00a8 24E6      		ldi r18,lo8(100)
 1879 00aa 30E0      		ldi r19,0
 1880 00ac 47E0      		ldi r20,lo8(7)
 1881 00ae 50E0      		ldi r21,0
 1882 00b0 60E0      		ldi r22,lo8(display_start.2072)
 1883 00b2 70E0      		ldi r23,hi8(display_start.2072)
 1884 00b4 88E7      		ldi r24,lo8(120)
 1885 00b6 0E94 0000 		call i2c_transmit
 1886               	.LVL144:
 292:drivers/oled/oled_driver.c ****         print("oled_render offset command failed\n");
 1887               		.loc 1 292 8 view .LVU432
 1888 00ba 892B      		or r24,r25
 1889 00bc 01F0      		breq .+2
 1890 00be 00C0      		rjmp .L86
 297:drivers/oled/oled_driver.c ****         // Send render data chunk as is
 1891               		.loc 1 297 5 is_stmt 1 view .LVU433
 1892 00c0 A801      		movw r20,r16
 1893 00c2 25E0      		ldi r18,5
 1894               		1:
 1895 00c4 440F      		lsl r20
 1896 00c6 551F      		rol r21
 1897 00c8 2A95      		dec r18
 1898 00ca 01F4      		brne 1b
 297:drivers/oled/oled_driver.c ****         // Send render data chunk as is
 1899               		.loc 1 297 8 is_stmt 0 view .LVU434
 1900 00cc 8091 0000 		lds r24,oled_rotation
 1901 00d0 80FD      		sbrc r24,0
 1902 00d2 00C0      		rjmp .L94
 299:drivers/oled/oled_driver.c ****             print("oled_render data failed\n");
 1903               		.loc 1 299 9 is_stmt 1 view .LVU435
 299:drivers/oled/oled_driver.c ****             print("oled_render data failed\n");
 1904               		.loc 1 299 13 is_stmt 0 view .LVU436
 1905 00d4 4050      		subi r20,lo8(-(oled_buffer))
 1906 00d6 5040      		sbci r21,hi8(-(oled_buffer))
 1907 00d8 04E6      		ldi r16,lo8(100)
 1908 00da 10E0      		ldi r17,0
 1909               	.LVL145:
 299:drivers/oled/oled_driver.c ****             print("oled_render data failed\n");
 1910               		.loc 1 299 13 view .LVU437
 1911 00dc 20E2      		ldi r18,lo8(32)
 1912 00de 30E0      		ldi r19,0
 1913               	.L102:
 1914 00e0 60E4      		ldi r22,lo8(64)
 1915 00e2 88E7      		ldi r24,lo8(120)
 1916 00e4 0E94 0000 		call i2c_writeReg
 1917               	.LVL146:
 299:drivers/oled/oled_driver.c ****             print("oled_render data failed\n");
 1918               		.loc 1 299 12 view .LVU438
 1919 00e8 892B      		or r24,r25
 1920 00ea 01F0      		breq .+2
 1921 00ec 00C0      		rjmp .L86
 322:drivers/oled/oled_driver.c **** 
 1922               		.loc 1 322 5 is_stmt 1 view .LVU439
 1923 00ee 0E94 0000 		call oled_on
 1924               	.LVL147:
 325:drivers/oled/oled_driver.c **** }
 1925               		.loc 1 325 5 view .LVU440
 325:drivers/oled/oled_driver.c **** }
 1926               		.loc 1 325 19 is_stmt 0 view .LVU441
 1927 00f2 E101      		movw r28,r2
 1928 00f4 C095      		com r28
 1929 00f6 D095      		com r29
 325:drivers/oled/oled_driver.c **** }
 1930               		.loc 1 325 16 view .LVU442
 1931 00f8 8091 0000 		lds r24,oled_dirty
 1932 00fc 9091 0000 		lds r25,oled_dirty+1
 1933 0100 C823      		and r28,r24
 1934 0102 D923      		and r29,r25
 1935 0104 D093 0000 		sts oled_dirty+1,r29
 1936 0108 C093 0000 		sts oled_dirty,r28
 1937 010c 00C0      		rjmp .L86
 1938               	.LVL148:
 1939               	.L92:
 288:drivers/oled/oled_driver.c ****     }
 1940               		.loc 1 288 9 is_stmt 1 view .LVU443
 1941               	.LBB46:
 1942               	.LBI46:
 247:drivers/oled/oled_driver.c ****     cmd_array[1] = OLED_BLOCK_SIZE * update_start / OLED_DISPLAY_HEIGHT * 8;
 1943               		.loc 1 247 13 view .LVU444
 1944               	.LBB47:
 248:drivers/oled/oled_driver.c ****     cmd_array[4] = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_HEIGHT;
 1945               		.loc 1 248 5 view .LVU445
 248:drivers/oled/oled_driver.c ****     cmd_array[4] = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_HEIGHT;
 1946               		.loc 1 248 73 is_stmt 0 view .LVU446
 1947 010e 880F      		lsl r24
 1948 0110 880F      		lsl r24
 1949 0112 880F      		lsl r24
 248:drivers/oled/oled_driver.c ****     cmd_array[4] = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_HEIGHT;
 1950               		.loc 1 248 18 view .LVU447
 1951 0114 8093 0000 		sts display_start.2072+2,r24
 249:drivers/oled/oled_driver.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) / OLED_DISPLAY_HEIGHT * 8 - 1 + cmd_
 1952               		.loc 1 249 5 is_stmt 1 view .LVU448
 249:drivers/oled/oled_driver.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) / OLED_DISPLAY_HEIGHT * 8 - 1 + cmd_
 1953               		.loc 1 249 18 is_stmt 0 view .LVU449
 1954 0118 1092 0000 		sts display_start.2072+5,__zero_reg__
 250:drivers/oled/oled_driver.c ****     ;
 1955               		.loc 1 250 5 is_stmt 1 view .LVU450
 250:drivers/oled/oled_driver.c ****     ;
 1956               		.loc 1 250 94 is_stmt 0 view .LVU451
 1957 011c 895F      		subi r24,lo8(-(7))
 250:drivers/oled/oled_driver.c ****     ;
 1958               		.loc 1 250 18 view .LVU452
 1959 011e 8093 0000 		sts display_start.2072+3,r24
 251:drivers/oled/oled_driver.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) % OLED_DISPLAY_HEIGHT / 8;
 1960               		.loc 1 251 5 is_stmt 1 view .LVU453
 252:drivers/oled/oled_driver.c **** }
 1961               		.loc 1 252 5 view .LVU454
 252:drivers/oled/oled_driver.c **** }
 1962               		.loc 1 252 18 is_stmt 0 view .LVU455
 1963 0122 83E0      		ldi r24,lo8(3)
 1964 0124 8093 0000 		sts display_start.2072+6,r24
 1965 0128 00C0      		rjmp .L93
 1966               	.LVL149:
 1967               	.L94:
 252:drivers/oled/oled_driver.c **** }
 1968               		.loc 1 252 18 view .LVU456
 1969               	.LBE47:
 1970               	.LBE46:
 1971               	.LBB48:
 305:drivers/oled/oled_driver.c ****         const static uint8_t target_map[] = OLED_TARGET_MAP;
 1972               		.loc 1 305 9 is_stmt 1 view .LVU457
 306:drivers/oled/oled_driver.c **** 
 1973               		.loc 1 306 9 view .LVU458
 308:drivers/oled/oled_driver.c ****         memset(temp_buffer, 0, sizeof(temp_buffer));
 1974               		.loc 1 308 9 view .LVU459
 309:drivers/oled/oled_driver.c ****         for (uint8_t i = 0; i < sizeof(source_map); ++i) {
 1975               		.loc 1 309 9 view .LVU460
 1976 012a E0E0      		ldi r30,lo8(temp_buffer.2075)
 1977 012c F0E0      		ldi r31,hi8(temp_buffer.2075)
 1978 012e 80E2      		ldi r24,lo8(32)
 1979 0130 DF01      		movw r26,r30
 1980               		0:
 1981 0132 1D92      		st X+,__zero_reg__
 1982 0134 8A95      		dec r24
 1983 0136 01F4      		brne 0b
 310:drivers/oled/oled_driver.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 1984               		.loc 1 310 9 view .LVU461
 1985               	.LBB49:
 310:drivers/oled/oled_driver.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 1986               		.loc 1 310 14 view .LVU462
 1987               	.LVL150:
 310:drivers/oled/oled_driver.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 1988               		.loc 1 310 29 view .LVU463
 1989 0138 A0E0      		ldi r26,lo8(target_map.2074)
 1990 013a B0E0      		ldi r27,hi8(target_map.2074)
 1991 013c 00E0      		ldi r16,lo8(source_map.2073)
 1992 013e 10E0      		ldi r17,hi8(source_map.2073)
 1993               	.LVL151:
 310:drivers/oled/oled_driver.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 1994               		.loc 1 310 29 is_stmt 0 view .LVU464
 1995 0140 80E0      		ldi r24,lo8(target_map.2074+4)
 1996 0142 C82E      		mov r12,r24
 1997 0144 80E0      		ldi r24,hi8(target_map.2074+4)
 1998 0146 D82E      		mov r13,r24
 1999 0148 97E0      		ldi r25,lo8(7)
 2000 014a 592E      		mov r5,r25
 2001               	.LBB50:
 2002               	.LBB51:
 2003               	.LBB52:
 263:drivers/oled/oled_driver.c ****         for (uint8_t j = 0; j < 8; ++j) {
 2004               		.loc 1 263 31 view .LVU465
 2005 014c 7724      		clr r7
 2006 014e 7394      		inc r7
 2007               	.LVL152:
 2008               	.L97:
 263:drivers/oled/oled_driver.c ****         for (uint8_t j = 0; j < 8; ++j) {
 2009               		.loc 1 263 31 view .LVU466
 2010               	.LBE52:
 2011               	.LBE51:
 2012               	.LBE50:
 311:drivers/oled/oled_driver.c ****         }
 2013               		.loc 1 311 13 is_stmt 1 discriminator 3 view .LVU467
 311:drivers/oled/oled_driver.c ****         }
 2014               		.loc 1 311 108 is_stmt 0 discriminator 3 view .LVU468
 2015 0150 8D91      		ld r24,X+
 2016               	.LVL153:
 311:drivers/oled/oled_driver.c ****         }
 2017               		.loc 1 311 79 discriminator 3 view .LVU469
 2018 0152 E801      		movw r28,r16
 2019 0154 2991      		ld r18,Y+
 2020 0156 8E01      		movw r16,r28
 311:drivers/oled/oled_driver.c ****         }
 2021               		.loc 1 311 67 discriminator 3 view .LVU470
 2022 0158 240F      		add r18,r20
 2023 015a 352F      		mov r19,r21
 2024 015c 311D      		adc r19,__zero_reg__
 311:drivers/oled/oled_driver.c ****         }
 2025               		.loc 1 311 23 discriminator 3 view .LVU471
 2026 015e 2050      		subi r18,lo8(-(oled_buffer))
 2027 0160 3040      		sbci r19,hi8(-(oled_buffer))
 2028               	.LVL154:
 2029               	.LBB61:
 2030               	.LBI50:
 261:drivers/oled/oled_driver.c ****     for (uint8_t i = 0, shift = 7; i < 8; ++i, --shift) {
 2031               		.loc 1 261 13 is_stmt 1 discriminator 3 view .LVU472
 2032               	.LBE61:
 2033               	.LBE49:
 2034               	.LBE48:
 262:drivers/oled/oled_driver.c ****         uint8_t selector = (1 << i);
 2035               		.loc 1 262 5 discriminator 3 view .LVU473
 2036               	.LBB65:
 2037               	.LBB64:
 2038               	.LBB62:
 2039               	.LBB59:
 262:drivers/oled/oled_driver.c ****         uint8_t selector = (1 << i);
 2040               		.loc 1 262 10 discriminator 3 view .LVU474
 262:drivers/oled/oled_driver.c ****         uint8_t selector = (1 << i);
 2041               		.loc 1 262 36 discriminator 3 view .LVU475
 2042               	.LBE59:
 2043               	.LBE62:
 311:drivers/oled/oled_driver.c ****         }
 2044               		.loc 1 311 13 is_stmt 0 discriminator 3 view .LVU476
 2045 0162 E82F      		mov r30,r24
 2046 0164 F0E0      		ldi r31,0
 2047 0166 E050      		subi r30,lo8(-(temp_buffer.2075))
 2048 0168 F040      		sbci r31,hi8(-(temp_buffer.2075))
 311:drivers/oled/oled_driver.c ****         }
 2049               		.loc 1 311 23 discriminator 3 view .LVU477
 2050 016a 90E0      		ldi r25,0
 2051 016c 80E0      		ldi r24,0
 2052               	.LVL155:
 2053               	.L96:
 311:drivers/oled/oled_driver.c ****         }
 2054               		.loc 1 311 23 discriminator 3 view .LVU478
 2055 016e 652C      		mov r6,r5
 2056 0170 681A      		sub r6,r24
 2057               	.LVL156:
 2058               	.LBB63:
 2059               	.LBB60:
 2060               	.LBB58:
 263:drivers/oled/oled_driver.c ****         for (uint8_t j = 0; j < 8; ++j) {
 2061               		.loc 1 263 9 is_stmt 1 view .LVU479
 263:drivers/oled/oled_driver.c ****         for (uint8_t j = 0; j < 8; ++j) {
 2062               		.loc 1 263 17 is_stmt 0 view .LVU480
 2063 0172 872C      		mov r8,r7
 2064 0174 082E      		mov r0,r24
 2065 0176 00C0      		rjmp 2f
 2066               		1:
 2067 0178 880C      		lsl r8
 2068               		2:
 2069 017a 0A94      		dec r0
 2070 017c 02F4      		brpl 1b
 2071               	.LVL157:
 264:drivers/oled/oled_driver.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2072               		.loc 1 264 9 is_stmt 1 view .LVU481
 2073               	.LBB53:
 264:drivers/oled/oled_driver.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2074               		.loc 1 264 14 view .LVU482
 264:drivers/oled/oled_driver.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2075               		.loc 1 264 29 view .LVU483
 2076 017e 7901      		movw r14,r18
 264:drivers/oled/oled_driver.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2077               		.loc 1 264 22 is_stmt 0 view .LVU484
 2078 0180 A12C      		mov r10,__zero_reg__
 2079               	.LVL158:
 2080               	.L95:
 265:drivers/oled/oled_driver.c ****         }
 2081               		.loc 1 265 13 is_stmt 1 view .LVU485
 265:drivers/oled/oled_driver.c ****         }
 2082               		.loc 1 265 32 is_stmt 0 view .LVU486
 2083 0182 E701      		movw r28,r14
 2084 0184 B990      		ld r11,Y+
 2085 0186 7E01      		movw r14,r28
 2086               	.LVL159:
 2087               	.LBB54:
 2088               	.LBI54:
 255:drivers/oled/oled_driver.c ****     const uint8_t mask = 0x7;
 2089               		.loc 1 255 9 is_stmt 1 view .LVU487
 2090               	.LBB55:
 256:drivers/oled/oled_driver.c ****     n &= mask;
 2091               		.loc 1 256 5 view .LVU488
 257:drivers/oled/oled_driver.c ****     return a << n | a >> (-n & mask);
 2092               		.loc 1 257 5 view .LVU489
 258:drivers/oled/oled_driver.c **** }
 2093               		.loc 1 258 5 view .LVU490
 258:drivers/oled/oled_driver.c **** }
 2094               		.loc 1 258 5 is_stmt 0 view .LVU491
 2095               	.LBE55:
 2096               	.LBE54:
 265:drivers/oled/oled_driver.c ****         }
 2097               		.loc 1 265 24 view .LVU492
 2098 0188 B820      		and r11,r8
 2099               	.LBB57:
 2100               	.LBB56:
 257:drivers/oled/oled_driver.c ****     return a << n | a >> (-n & mask);
 2101               		.loc 1 257 7 view .LVU493
 2102 018a 662D      		mov r22,r6
 2103 018c 6A19      		sub r22,r10
 2104 018e 6770      		andi r22,lo8(7)
 2105 0190 962E      		mov r9,r22
 258:drivers/oled/oled_driver.c **** }
 2106               		.loc 1 258 14 view .LVU494
 2107 0192 062E      		mov __tmp_reg__,r22
 2108 0194 000C      		lsl r0
 2109 0196 770B      		sbc r23,r23
 2110               	.LBE56:
 2111               	.LBE57:
 265:drivers/oled/oled_driver.c ****         }
 2112               		.loc 1 265 21 view .LVU495
 2113 0198 DB2D      		mov r29,r11
 2114 019a 00C0      		rjmp 2f
 2115               		1:
 2116 019c DD0F      		lsl r29
 2117               		2:
 2118 019e 9A94      		dec r9
 2119 01a0 02F4      		brpl 1b
 2120 01a2 7195      		neg r23
 2121 01a4 6195      		neg r22
 2122 01a6 7109      		sbc r23,__zero_reg__
 2123 01a8 6770      		andi r22,7
 2124 01aa 7727      		clr r23
 2125 01ac 00C0      		rjmp 2f
 2126               		1:
 2127 01ae B694      		lsr r11
 2128               		2:
 2129 01b0 6A95      		dec r22
 2130 01b2 02F4      		brpl 1b
 2131 01b4 BD2A      		or r11,r29
 2132 01b6 6081      		ld r22,Z
 2133 01b8 962E      		mov r9,r22
 2134 01ba 9B28      		or r9,r11
 2135 01bc 9082      		st Z,r9
 264:drivers/oled/oled_driver.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2136               		.loc 1 264 36 is_stmt 1 view .LVU496
 2137 01be A394      		inc r10
 2138               	.LVL160:
 264:drivers/oled/oled_driver.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2139               		.loc 1 264 29 view .LVU497
 264:drivers/oled/oled_driver.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2140               		.loc 1 264 9 is_stmt 0 view .LVU498
 2141 01c0 68E0      		ldi r22,lo8(8)
 2142 01c2 A612      		cpse r10,r22
 2143 01c4 00C0      		rjmp .L95
 2144               	.LBE53:
 2145               	.LBE58:
 262:drivers/oled/oled_driver.c ****         uint8_t selector = (1 << i);
 2146               		.loc 1 262 43 is_stmt 1 view .LVU499
 2147               	.LVL161:
 262:drivers/oled/oled_driver.c ****         uint8_t selector = (1 << i);
 2148               		.loc 1 262 36 view .LVU500
 2149 01c6 0196      		adiw r24,1
 2150               	.LVL162:
 262:drivers/oled/oled_driver.c ****         uint8_t selector = (1 << i);
 2151               		.loc 1 262 36 is_stmt 0 view .LVU501
 2152 01c8 3196      		adiw r30,1
 262:drivers/oled/oled_driver.c ****         uint8_t selector = (1 << i);
 2153               		.loc 1 262 5 view .LVU502
 2154 01ca 8830      		cpi r24,8
 2155 01cc 9105      		cpc r25,__zero_reg__
 2156 01ce 01F4      		brne .L96
 2157               	.LVL163:
 262:drivers/oled/oled_driver.c ****         uint8_t selector = (1 << i);
 2158               		.loc 1 262 5 view .LVU503
 2159               	.LBE60:
 2160               	.LBE63:
 310:drivers/oled/oled_driver.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 2161               		.loc 1 310 53 is_stmt 1 discriminator 3 view .LVU504
 310:drivers/oled/oled_driver.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 2162               		.loc 1 310 29 discriminator 3 view .LVU505
 310:drivers/oled/oled_driver.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 2163               		.loc 1 310 9 is_stmt 0 discriminator 3 view .LVU506
 2164 01d0 CA16      		cp r12,r26
 2165 01d2 DB06      		cpc r13,r27
 2166 01d4 01F0      		breq .+2
 2167 01d6 00C0      		rjmp .L97
 2168               	.LBE64:
 315:drivers/oled/oled_driver.c ****             print("oled_render90 data failed\n");
 2169               		.loc 1 315 9 is_stmt 1 view .LVU507
 315:drivers/oled/oled_driver.c ****             print("oled_render90 data failed\n");
 2170               		.loc 1 315 13 is_stmt 0 view .LVU508
 2171 01d8 04E6      		ldi r16,lo8(100)
 2172 01da 10E0      		ldi r17,0
 2173 01dc 20E2      		ldi r18,lo8(32)
 2174 01de 30E0      		ldi r19,0
 2175 01e0 40E0      		ldi r20,lo8(temp_buffer.2075)
 2176 01e2 50E0      		ldi r21,hi8(temp_buffer.2075)
 2177 01e4 00C0      		rjmp .L102
 2178               	.LBE65:
 2179               		.cfi_endproc
 2180               	.LFE10:
 2182               		.section	.text.oled_off,"ax",@progbits
 2183               	.global	oled_off
 2185               	oled_off:
 2186               	.LFB26:
 539:drivers/oled/oled_driver.c **** 
 540:drivers/oled/oled_driver.c **** bool oled_off(void) {
 2187               		.loc 1 540 21 is_stmt 1 view -0
 2188               		.cfi_startproc
 2189               	/* prologue: function */
 2190               	/* frame size = 0 */
 2191               	/* stack size = 0 */
 2192               	.L__stack_usage = 0
 541:drivers/oled/oled_driver.c ****     static const uint8_t PROGMEM display_off[] = {I2C_CMD, DISPLAY_OFF};
 2193               		.loc 1 541 5 view .LVU510
 542:drivers/oled/oled_driver.c ****     if (oled_active) {
 2194               		.loc 1 542 5 view .LVU511
 2195               		.loc 1 542 8 is_stmt 0 view .LVU512
 2196 0000 8091 0000 		lds r24,oled_active
 2197 0004 8823      		tst r24
 2198 0006 01F0      		breq .L104
 543:drivers/oled/oled_driver.c ****         if (I2C_TRANSMIT_P(display_off) != I2C_STATUS_SUCCESS) {
 2199               		.loc 1 543 9 is_stmt 1 view .LVU513
 2200               		.loc 1 543 13 is_stmt 0 view .LVU514
 2201 0008 62E0      		ldi r22,lo8(2)
 2202 000a 70E0      		ldi r23,0
 2203 000c 80E0      		ldi r24,lo8(display_off.2196)
 2204 000e 90E0      		ldi r25,hi8(display_off.2196)
 2205 0010 0E94 0000 		call i2c_transmit_P.constprop.2
 2206               	.LVL164:
 2207               		.loc 1 543 12 view .LVU515
 2208 0014 892B      		or r24,r25
 2209 0016 01F0      		breq .L105
 544:drivers/oled/oled_driver.c ****             print("oled_off cmd failed\n");
 2210               		.loc 1 544 43 is_stmt 1 view .LVU516
 545:drivers/oled/oled_driver.c ****             return oled_active;
 2211               		.loc 1 545 13 view .LVU517
 2212               		.loc 1 545 20 is_stmt 0 view .LVU518
 2213 0018 8091 0000 		lds r24,oled_active
 2214 001c 0895      		ret
 2215               	.L105:
 546:drivers/oled/oled_driver.c ****         }
 547:drivers/oled/oled_driver.c ****         oled_active = false;
 2216               		.loc 1 547 9 is_stmt 1 view .LVU519
 2217               		.loc 1 547 21 is_stmt 0 view .LVU520
 2218 001e 1092 0000 		sts oled_active,__zero_reg__
 2219               	.L104:
 548:drivers/oled/oled_driver.c ****     }
 549:drivers/oled/oled_driver.c ****     return !oled_active;
 2220               		.loc 1 549 5 is_stmt 1 view .LVU521
 2221 0022 8091 0000 		lds r24,oled_active
 2222 0026 91E0      		ldi r25,lo8(1)
 2223 0028 8927      		eor r24,r25
 2224               	/* epilogue start */
 550:drivers/oled/oled_driver.c **** }
 2225               		.loc 1 550 1 is_stmt 0 view .LVU522
 2226 002a 0895      		ret
 2227               		.cfi_endproc
 2228               	.LFE26:
 2230               		.section	.text.is_oled_on,"ax",@progbits
 2231               	.global	is_oled_on
 2233               	is_oled_on:
 2234               	.LFB27:
 551:drivers/oled/oled_driver.c **** 
 552:drivers/oled/oled_driver.c **** bool is_oled_on(void) { return oled_active; }
 2235               		.loc 1 552 23 is_stmt 1 view -0
 2236               		.cfi_startproc
 2237               	/* prologue: function */
 2238               	/* frame size = 0 */
 2239               	/* stack size = 0 */
 2240               	.L__stack_usage = 0
 2241               		.loc 1 552 25 view .LVU524
 2242               		.loc 1 552 1 is_stmt 0 view .LVU525
 2243 0000 8091 0000 		lds r24,oled_active
 2244               	/* epilogue start */
 2245 0004 0895      		ret
 2246               		.cfi_endproc
 2247               	.LFE27:
 2249               		.section	.text.oled_set_brightness,"ax",@progbits
 2250               	.global	oled_set_brightness
 2252               	oled_set_brightness:
 2253               	.LVL165:
 2254               	.LFB28:
 553:drivers/oled/oled_driver.c **** 
 554:drivers/oled/oled_driver.c **** uint8_t oled_set_brightness(uint8_t level) {
 2255               		.loc 1 554 44 is_stmt 1 view -0
 2256               		.cfi_startproc
 2257               		.loc 1 554 44 is_stmt 0 view .LVU527
 2258 0000 1F93      		push r17
 2259               	.LCFI43:
 2260               		.cfi_def_cfa_offset 3
 2261               		.cfi_offset 17, -2
 2262 0002 CF93      		push r28
 2263               	.LCFI44:
 2264               		.cfi_def_cfa_offset 4
 2265               		.cfi_offset 28, -3
 2266 0004 DF93      		push r29
 2267               	.LCFI45:
 2268               		.cfi_def_cfa_offset 5
 2269               		.cfi_offset 29, -4
 2270 0006 00D0      		rcall .
 2271 0008 0F92      		push __tmp_reg__
 2272               	.LCFI46:
 2273               		.cfi_def_cfa_offset 8
 2274 000a CDB7      		in r28,__SP_L__
 2275 000c DEB7      		in r29,__SP_H__
 2276               	.LCFI47:
 2277               		.cfi_def_cfa_register 28
 2278               	/* prologue: function */
 2279               	/* frame size = 3 */
 2280               	/* stack size = 6 */
 2281               	.L__stack_usage = 6
 2282 000e 182F      		mov r17,r24
 555:drivers/oled/oled_driver.c ****     uint8_t set_contrast[] = {I2C_CMD, CONTRAST, level};
 2283               		.loc 1 555 5 is_stmt 1 view .LVU528
 2284               		.loc 1 555 13 is_stmt 0 view .LVU529
 2285 0010 1982      		std Y+1,__zero_reg__
 2286 0012 81E8      		ldi r24,lo8(-127)
 2287               	.LVL166:
 2288               		.loc 1 555 13 view .LVU530
 2289 0014 8A83      		std Y+2,r24
 2290 0016 1B83      		std Y+3,r17
 556:drivers/oled/oled_driver.c ****     if (oled_brightness != level) {
 2291               		.loc 1 556 5 is_stmt 1 view .LVU531
 2292               		.loc 1 556 8 is_stmt 0 view .LVU532
 2293 0018 8091 0000 		lds r24,oled_brightness
 2294 001c 8117      		cp r24,r17
 2295 001e 01F0      		breq .L112
 557:drivers/oled/oled_driver.c ****         if (I2C_TRANSMIT(set_contrast) != I2C_STATUS_SUCCESS) {
 2296               		.loc 1 557 9 is_stmt 1 view .LVU533
 2297               		.loc 1 557 13 is_stmt 0 view .LVU534
 2298 0020 24E6      		ldi r18,lo8(100)
 2299 0022 30E0      		ldi r19,0
 2300 0024 43E0      		ldi r20,lo8(3)
 2301 0026 50E0      		ldi r21,0
 2302 0028 BE01      		movw r22,r28
 2303 002a 6F5F      		subi r22,-1
 2304 002c 7F4F      		sbci r23,-1
 2305 002e 88E7      		ldi r24,lo8(120)
 2306 0030 0E94 0000 		call i2c_transmit
 2307               	.LVL167:
 2308               		.loc 1 557 12 view .LVU535
 2309 0034 892B      		or r24,r25
 2310 0036 01F0      		breq .L113
 2311               	.L112:
 558:drivers/oled/oled_driver.c ****             print("set_brightness cmd failed\n");
 559:drivers/oled/oled_driver.c ****             return oled_brightness;
 560:drivers/oled/oled_driver.c ****         }
 561:drivers/oled/oled_driver.c ****         oled_brightness = level;
 562:drivers/oled/oled_driver.c ****     }
 563:drivers/oled/oled_driver.c ****     return oled_brightness;
 2312               		.loc 1 563 5 is_stmt 1 view .LVU536
 2313               		.loc 1 563 12 is_stmt 0 view .LVU537
 2314 0038 8091 0000 		lds r24,oled_brightness
 2315               	/* epilogue start */
 564:drivers/oled/oled_driver.c **** }
 2316               		.loc 1 564 1 view .LVU538
 2317 003c 0F90      		pop __tmp_reg__
 2318 003e 0F90      		pop __tmp_reg__
 2319 0040 0F90      		pop __tmp_reg__
 2320 0042 DF91      		pop r29
 2321 0044 CF91      		pop r28
 2322 0046 1F91      		pop r17
 2323               	.LVL168:
 2324               		.loc 1 564 1 view .LVU539
 2325 0048 0895      		ret
 2326               	.LVL169:
 2327               	.L113:
 561:drivers/oled/oled_driver.c ****     }
 2328               		.loc 1 561 9 is_stmt 1 view .LVU540
 561:drivers/oled/oled_driver.c ****     }
 2329               		.loc 1 561 25 is_stmt 0 view .LVU541
 2330 004a 1093 0000 		sts oled_brightness,r17
 2331 004e 00C0      		rjmp .L112
 2332               		.cfi_endproc
 2333               	.LFE28:
 2335               		.section	.text.oled_get_brightness,"ax",@progbits
 2336               	.global	oled_get_brightness
 2338               	oled_get_brightness:
 2339               	.LFB29:
 565:drivers/oled/oled_driver.c **** 
 566:drivers/oled/oled_driver.c **** uint8_t oled_get_brightness(void) { return oled_brightness; }
 2340               		.loc 1 566 35 is_stmt 1 view -0
 2341               		.cfi_startproc
 2342               	/* prologue: function */
 2343               	/* frame size = 0 */
 2344               	/* stack size = 0 */
 2345               	.L__stack_usage = 0
 2346               		.loc 1 566 37 view .LVU543
 2347               		.loc 1 566 1 is_stmt 0 view .LVU544
 2348 0000 8091 0000 		lds r24,oled_brightness
 2349               	/* epilogue start */
 2350 0004 0895      		ret
 2351               		.cfi_endproc
 2352               	.LFE29:
 2354               		.section	.text.oled_scroll_set_area,"ax",@progbits
 2355               	.global	oled_scroll_set_area
 2357               	oled_scroll_set_area:
 2358               	.LVL170:
 2359               	.LFB30:
 567:drivers/oled/oled_driver.c **** 
 568:drivers/oled/oled_driver.c **** // Set the specific 8 lines rows of the screen to scroll.
 569:drivers/oled/oled_driver.c **** // 0 is the default for start, and 7 for end, which is the entire
 570:drivers/oled/oled_driver.c **** // height of the screen.  For 128x32 screens, rows 4-7 are not used.
 571:drivers/oled/oled_driver.c **** void oled_scroll_set_area(uint8_t start_line, uint8_t end_line) {
 2360               		.loc 1 571 65 is_stmt 1 view -0
 2361               		.cfi_startproc
 2362               	/* prologue: function */
 2363               	/* frame size = 0 */
 2364               	/* stack size = 0 */
 2365               	.L__stack_usage = 0
 572:drivers/oled/oled_driver.c ****     oled_scroll_start = start_line;
 2366               		.loc 1 572 5 view .LVU546
 2367               		.loc 1 572 23 is_stmt 0 view .LVU547
 2368 0000 8093 0000 		sts oled_scroll_start,r24
 573:drivers/oled/oled_driver.c ****     oled_scroll_end   = end_line;
 2369               		.loc 1 573 5 is_stmt 1 view .LVU548
 2370               		.loc 1 573 23 is_stmt 0 view .LVU549
 2371 0004 6093 0000 		sts oled_scroll_end,r22
 2372               	/* epilogue start */
 574:drivers/oled/oled_driver.c **** }
 2373               		.loc 1 574 1 view .LVU550
 2374 0008 0895      		ret
 2375               		.cfi_endproc
 2376               	.LFE30:
 2378               		.section	.text.oled_scroll_set_speed,"ax",@progbits
 2379               	.global	oled_scroll_set_speed
 2381               	oled_scroll_set_speed:
 2382               	.LVL171:
 2383               	.LFB31:
 575:drivers/oled/oled_driver.c **** 
 576:drivers/oled/oled_driver.c **** void oled_scroll_set_speed(uint8_t speed) {
 2384               		.loc 1 576 43 is_stmt 1 view -0
 2385               		.cfi_startproc
 2386               	/* prologue: function */
 2387               	/* frame size = 0 */
 2388               	/* stack size = 0 */
 2389               	.L__stack_usage = 0
 577:drivers/oled/oled_driver.c ****     // Sets the speed for scrolling... does not take effect
 578:drivers/oled/oled_driver.c ****     // until scrolling is either started or restarted
 579:drivers/oled/oled_driver.c ****     // the ssd1306 supports 8 speeds
 580:drivers/oled/oled_driver.c ****     // FrameRate2   speed = 7
 581:drivers/oled/oled_driver.c ****     // FrameRate3   speed = 4
 582:drivers/oled/oled_driver.c ****     // FrameRate4   speed = 5
 583:drivers/oled/oled_driver.c ****     // FrameRate5   speed = 0
 584:drivers/oled/oled_driver.c ****     // FrameRate25  speed = 6
 585:drivers/oled/oled_driver.c ****     // FrameRate64  speed = 1
 586:drivers/oled/oled_driver.c ****     // FrameRate128 speed = 2
 587:drivers/oled/oled_driver.c ****     // FrameRate256 speed = 3
 588:drivers/oled/oled_driver.c ****     // for ease of use these are remaped here to be in order
 589:drivers/oled/oled_driver.c ****     static const uint8_t scroll_remap[8] = {7, 4, 5, 0, 6, 1, 2, 3};
 2390               		.loc 1 589 5 view .LVU552
 590:drivers/oled/oled_driver.c ****     oled_scroll_speed                    = scroll_remap[speed];
 2391               		.loc 1 590 5 view .LVU553
 2392               		.loc 1 590 56 is_stmt 0 view .LVU554
 2393 0000 E82F      		mov r30,r24
 2394 0002 F0E0      		ldi r31,0
 2395 0004 E050      		subi r30,lo8(-(scroll_remap.2214))
 2396 0006 F040      		sbci r31,hi8(-(scroll_remap.2214))
 2397               		.loc 1 590 42 view .LVU555
 2398 0008 8081      		ld r24,Z
 2399               	.LVL172:
 2400               		.loc 1 590 42 view .LVU556
 2401 000a 8093 0000 		sts oled_scroll_speed,r24
 2402               	/* epilogue start */
 591:drivers/oled/oled_driver.c **** }
 2403               		.loc 1 591 1 view .LVU557
 2404 000e 0895      		ret
 2405               		.cfi_endproc
 2406               	.LFE31:
 2408               		.section	.text.oled_scroll_right,"ax",@progbits
 2409               	.global	oled_scroll_right
 2411               	oled_scroll_right:
 2412               	.LFB32:
 592:drivers/oled/oled_driver.c **** 
 593:drivers/oled/oled_driver.c **** bool oled_scroll_right(void) {
 2413               		.loc 1 593 30 is_stmt 1 view -0
 2414               		.cfi_startproc
 2415 0000 CF93      		push r28
 2416               	.LCFI48:
 2417               		.cfi_def_cfa_offset 3
 2418               		.cfi_offset 28, -2
 2419 0002 DF93      		push r29
 2420               	.LCFI49:
 2421               		.cfi_def_cfa_offset 4
 2422               		.cfi_offset 29, -3
 2423 0004 CDB7      		in r28,__SP_L__
 2424 0006 DEB7      		in r29,__SP_H__
 2425               	.LCFI50:
 2426               		.cfi_def_cfa_register 28
 2427 0008 2997      		sbiw r28,9
 2428               	.LCFI51:
 2429               		.cfi_def_cfa_offset 13
 2430 000a 0FB6      		in __tmp_reg__,__SREG__
 2431 000c F894      		cli
 2432 000e DEBF      		out __SP_H__,r29
 2433 0010 0FBE      		out __SREG__,__tmp_reg__
 2434 0012 CDBF      		out __SP_L__,r28
 2435               	/* prologue: function */
 2436               	/* frame size = 9 */
 2437               	/* stack size = 11 */
 2438               	.L__stack_usage = 11
 594:drivers/oled/oled_driver.c ****     // Dont enable scrolling if we need to update the display
 595:drivers/oled/oled_driver.c ****     // This prevents scrolling of bad data from starting the scroll too early after init
 596:drivers/oled/oled_driver.c ****     if (!oled_dirty && !oled_scrolling) {
 2439               		.loc 1 596 5 view .LVU559
 2440               		.loc 1 596 8 is_stmt 0 view .LVU560
 2441 0014 8091 0000 		lds r24,oled_dirty
 2442 0018 9091 0000 		lds r25,oled_dirty+1
 2443 001c 892B      		or r24,r25
 2444 001e 01F4      		brne .L119
 2445               		.loc 1 596 21 discriminator 1 view .LVU561
 2446 0020 8091 0000 		lds r24,oled_scrolling
 2447 0024 8111      		cpse r24,__zero_reg__
 2448 0026 00C0      		rjmp .L119
 2449               	.LBB66:
 597:drivers/oled/oled_driver.c ****         uint8_t display_scroll_right[] = {I2C_CMD, SCROLL_RIGHT, 0x00, oled_scroll_start, oled_scro
 2450               		.loc 1 597 9 is_stmt 1 view .LVU562
 2451               		.loc 1 597 17 is_stmt 0 view .LVU563
 2452 0028 1982      		std Y+1,__zero_reg__
 2453 002a 86E2      		ldi r24,lo8(38)
 2454 002c 8A83      		std Y+2,r24
 2455 002e 1B82      		std Y+3,__zero_reg__
 2456 0030 8091 0000 		lds r24,oled_scroll_start
 2457 0034 8C83      		std Y+4,r24
 2458 0036 8091 0000 		lds r24,oled_scroll_speed
 2459 003a 8D83      		std Y+5,r24
 2460 003c 8091 0000 		lds r24,oled_scroll_end
 2461 0040 8E83      		std Y+6,r24
 2462 0042 1F82      		std Y+7,__zero_reg__
 2463 0044 8FEF      		ldi r24,lo8(-1)
 2464 0046 8887      		std Y+8,r24
 2465 0048 8FE2      		ldi r24,lo8(47)
 2466 004a 8987      		std Y+9,r24
 598:drivers/oled/oled_driver.c ****         if (I2C_TRANSMIT(display_scroll_right) != I2C_STATUS_SUCCESS) {
 2467               		.loc 1 598 9 is_stmt 1 view .LVU564
 2468               		.loc 1 598 13 is_stmt 0 view .LVU565
 2469 004c 24E6      		ldi r18,lo8(100)
 2470 004e 30E0      		ldi r19,0
 2471 0050 49E0      		ldi r20,lo8(9)
 2472 0052 50E0      		ldi r21,0
 2473 0054 BE01      		movw r22,r28
 2474 0056 6F5F      		subi r22,-1
 2475 0058 7F4F      		sbci r23,-1
 2476 005a 88E7      		ldi r24,lo8(120)
 2477 005c 0E94 0000 		call i2c_transmit
 2478               	.LVL173:
 2479               		.loc 1 598 12 view .LVU566
 2480 0060 892B      		or r24,r25
 2481 0062 01F0      		breq .L120
 2482               	.L119:
 2483               	.LBE66:
 599:drivers/oled/oled_driver.c ****             print("oled_scroll_right cmd failed\n");
 600:drivers/oled/oled_driver.c ****             return oled_scrolling;
 601:drivers/oled/oled_driver.c ****         }
 602:drivers/oled/oled_driver.c ****         oled_scrolling = true;
 603:drivers/oled/oled_driver.c ****     }
 604:drivers/oled/oled_driver.c ****     return oled_scrolling;
 2484               		.loc 1 604 5 is_stmt 1 view .LVU567
 2485               		.loc 1 604 12 is_stmt 0 view .LVU568
 2486 0064 8091 0000 		lds r24,oled_scrolling
 2487               	/* epilogue start */
 605:drivers/oled/oled_driver.c **** }
 2488               		.loc 1 605 1 view .LVU569
 2489 0068 2996      		adiw r28,9
 2490 006a 0FB6      		in __tmp_reg__,__SREG__
 2491 006c F894      		cli
 2492 006e DEBF      		out __SP_H__,r29
 2493 0070 0FBE      		out __SREG__,__tmp_reg__
 2494 0072 CDBF      		out __SP_L__,r28
 2495 0074 DF91      		pop r29
 2496 0076 CF91      		pop r28
 2497 0078 0895      		ret
 2498               	.L120:
 2499               	.LBB67:
 602:drivers/oled/oled_driver.c ****     }
 2500               		.loc 1 602 9 is_stmt 1 view .LVU570
 602:drivers/oled/oled_driver.c ****     }
 2501               		.loc 1 602 24 is_stmt 0 view .LVU571
 2502 007a 81E0      		ldi r24,lo8(1)
 2503 007c 8093 0000 		sts oled_scrolling,r24
 2504 0080 00C0      		rjmp .L119
 2505               	.LBE67:
 2506               		.cfi_endproc
 2507               	.LFE32:
 2509               		.section	.text.oled_scroll_left,"ax",@progbits
 2510               	.global	oled_scroll_left
 2512               	oled_scroll_left:
 2513               	.LFB33:
 606:drivers/oled/oled_driver.c **** 
 607:drivers/oled/oled_driver.c **** bool oled_scroll_left(void) {
 2514               		.loc 1 607 29 is_stmt 1 view -0
 2515               		.cfi_startproc
 2516 0000 CF93      		push r28
 2517               	.LCFI52:
 2518               		.cfi_def_cfa_offset 3
 2519               		.cfi_offset 28, -2
 2520 0002 DF93      		push r29
 2521               	.LCFI53:
 2522               		.cfi_def_cfa_offset 4
 2523               		.cfi_offset 29, -3
 2524 0004 CDB7      		in r28,__SP_L__
 2525 0006 DEB7      		in r29,__SP_H__
 2526               	.LCFI54:
 2527               		.cfi_def_cfa_register 28
 2528 0008 2997      		sbiw r28,9
 2529               	.LCFI55:
 2530               		.cfi_def_cfa_offset 13
 2531 000a 0FB6      		in __tmp_reg__,__SREG__
 2532 000c F894      		cli
 2533 000e DEBF      		out __SP_H__,r29
 2534 0010 0FBE      		out __SREG__,__tmp_reg__
 2535 0012 CDBF      		out __SP_L__,r28
 2536               	/* prologue: function */
 2537               	/* frame size = 9 */
 2538               	/* stack size = 11 */
 2539               	.L__stack_usage = 11
 608:drivers/oled/oled_driver.c ****     // Dont enable scrolling if we need to update the display
 609:drivers/oled/oled_driver.c ****     // This prevents scrolling of bad data from starting the scroll too early after init
 610:drivers/oled/oled_driver.c ****     if (!oled_dirty && !oled_scrolling) {
 2540               		.loc 1 610 5 view .LVU573
 2541               		.loc 1 610 8 is_stmt 0 view .LVU574
 2542 0014 8091 0000 		lds r24,oled_dirty
 2543 0018 9091 0000 		lds r25,oled_dirty+1
 2544 001c 892B      		or r24,r25
 2545 001e 01F4      		brne .L123
 2546               		.loc 1 610 21 discriminator 1 view .LVU575
 2547 0020 8091 0000 		lds r24,oled_scrolling
 2548 0024 8111      		cpse r24,__zero_reg__
 2549 0026 00C0      		rjmp .L123
 2550               	.LBB68:
 611:drivers/oled/oled_driver.c ****         uint8_t display_scroll_left[] = {I2C_CMD, SCROLL_LEFT, 0x00, oled_scroll_start, oled_scroll
 2551               		.loc 1 611 9 is_stmt 1 view .LVU576
 2552               		.loc 1 611 17 is_stmt 0 view .LVU577
 2553 0028 1982      		std Y+1,__zero_reg__
 2554 002a 87E2      		ldi r24,lo8(39)
 2555 002c 8A83      		std Y+2,r24
 2556 002e 1B82      		std Y+3,__zero_reg__
 2557 0030 8091 0000 		lds r24,oled_scroll_start
 2558 0034 8C83      		std Y+4,r24
 2559 0036 8091 0000 		lds r24,oled_scroll_speed
 2560 003a 8D83      		std Y+5,r24
 2561 003c 8091 0000 		lds r24,oled_scroll_end
 2562 0040 8E83      		std Y+6,r24
 2563 0042 1F82      		std Y+7,__zero_reg__
 2564 0044 8FEF      		ldi r24,lo8(-1)
 2565 0046 8887      		std Y+8,r24
 2566 0048 8FE2      		ldi r24,lo8(47)
 2567 004a 8987      		std Y+9,r24
 612:drivers/oled/oled_driver.c ****         if (I2C_TRANSMIT(display_scroll_left) != I2C_STATUS_SUCCESS) {
 2568               		.loc 1 612 9 is_stmt 1 view .LVU578
 2569               		.loc 1 612 13 is_stmt 0 view .LVU579
 2570 004c 24E6      		ldi r18,lo8(100)
 2571 004e 30E0      		ldi r19,0
 2572 0050 49E0      		ldi r20,lo8(9)
 2573 0052 50E0      		ldi r21,0
 2574 0054 BE01      		movw r22,r28
 2575 0056 6F5F      		subi r22,-1
 2576 0058 7F4F      		sbci r23,-1
 2577 005a 88E7      		ldi r24,lo8(120)
 2578 005c 0E94 0000 		call i2c_transmit
 2579               	.LVL174:
 2580               		.loc 1 612 12 view .LVU580
 2581 0060 892B      		or r24,r25
 2582 0062 01F0      		breq .L124
 2583               	.L123:
 2584               	.LBE68:
 613:drivers/oled/oled_driver.c ****             print("oled_scroll_left cmd failed\n");
 614:drivers/oled/oled_driver.c ****             return oled_scrolling;
 615:drivers/oled/oled_driver.c ****         }
 616:drivers/oled/oled_driver.c ****         oled_scrolling = true;
 617:drivers/oled/oled_driver.c ****     }
 618:drivers/oled/oled_driver.c ****     return oled_scrolling;
 2585               		.loc 1 618 5 is_stmt 1 view .LVU581
 2586               		.loc 1 618 12 is_stmt 0 view .LVU582
 2587 0064 8091 0000 		lds r24,oled_scrolling
 2588               	/* epilogue start */
 619:drivers/oled/oled_driver.c **** }
 2589               		.loc 1 619 1 view .LVU583
 2590 0068 2996      		adiw r28,9
 2591 006a 0FB6      		in __tmp_reg__,__SREG__
 2592 006c F894      		cli
 2593 006e DEBF      		out __SP_H__,r29
 2594 0070 0FBE      		out __SREG__,__tmp_reg__
 2595 0072 CDBF      		out __SP_L__,r28
 2596 0074 DF91      		pop r29
 2597 0076 CF91      		pop r28
 2598 0078 0895      		ret
 2599               	.L124:
 2600               	.LBB69:
 616:drivers/oled/oled_driver.c ****     }
 2601               		.loc 1 616 9 is_stmt 1 view .LVU584
 616:drivers/oled/oled_driver.c ****     }
 2602               		.loc 1 616 24 is_stmt 0 view .LVU585
 2603 007a 81E0      		ldi r24,lo8(1)
 2604 007c 8093 0000 		sts oled_scrolling,r24
 2605 0080 00C0      		rjmp .L123
 2606               	.LBE69:
 2607               		.cfi_endproc
 2608               	.LFE33:
 2610               		.section	.text.oled_scroll_off,"ax",@progbits
 2611               	.global	oled_scroll_off
 2613               	oled_scroll_off:
 2614               	.LFB34:
 620:drivers/oled/oled_driver.c **** 
 621:drivers/oled/oled_driver.c **** bool oled_scroll_off(void) {
 2615               		.loc 1 621 28 is_stmt 1 view -0
 2616               		.cfi_startproc
 2617               	/* prologue: function */
 2618               	/* frame size = 0 */
 2619               	/* stack size = 0 */
 2620               	.L__stack_usage = 0
 622:drivers/oled/oled_driver.c ****     if (oled_scrolling) {
 2621               		.loc 1 622 5 view .LVU587
 2622               		.loc 1 622 8 is_stmt 0 view .LVU588
 2623 0000 8091 0000 		lds r24,oled_scrolling
 2624 0004 8823      		tst r24
 2625 0006 01F0      		breq .L127
 2626               	.LBB70:
 623:drivers/oled/oled_driver.c ****         static const uint8_t PROGMEM display_scroll_off[] = {I2C_CMD, DEACTIVATE_SCROLL};
 2627               		.loc 1 623 9 is_stmt 1 view .LVU589
 624:drivers/oled/oled_driver.c ****         if (I2C_TRANSMIT_P(display_scroll_off) != I2C_STATUS_SUCCESS) {
 2628               		.loc 1 624 9 view .LVU590
 2629               		.loc 1 624 13 is_stmt 0 view .LVU591
 2630 0008 62E0      		ldi r22,lo8(2)
 2631 000a 70E0      		ldi r23,0
 2632 000c 80E0      		ldi r24,lo8(display_scroll_off.2226)
 2633 000e 90E0      		ldi r25,hi8(display_scroll_off.2226)
 2634 0010 0E94 0000 		call i2c_transmit_P.constprop.2
 2635               	.LVL175:
 2636               		.loc 1 624 12 view .LVU592
 2637 0014 892B      		or r24,r25
 2638 0016 01F0      		breq .L128
 625:drivers/oled/oled_driver.c ****             print("oled_scroll_off cmd failed\n");
 2639               		.loc 1 625 50 is_stmt 1 view .LVU593
 626:drivers/oled/oled_driver.c ****             return oled_scrolling;
 2640               		.loc 1 626 13 view .LVU594
 2641               		.loc 1 626 20 is_stmt 0 view .LVU595
 2642 0018 8091 0000 		lds r24,oled_scrolling
 2643 001c 0895      		ret
 2644               	.L128:
 627:drivers/oled/oled_driver.c ****         }
 628:drivers/oled/oled_driver.c ****         oled_scrolling = false;
 2645               		.loc 1 628 9 is_stmt 1 view .LVU596
 2646               		.loc 1 628 24 is_stmt 0 view .LVU597
 2647 001e 1092 0000 		sts oled_scrolling,__zero_reg__
 629:drivers/oled/oled_driver.c ****         oled_dirty     = OLED_ALL_BLOCKS_MASK;
 2648               		.loc 1 629 9 is_stmt 1 view .LVU598
 2649               		.loc 1 629 24 is_stmt 0 view .LVU599
 2650 0022 8FEF      		ldi r24,lo8(-1)
 2651 0024 9FEF      		ldi r25,lo8(-1)
 2652 0026 9093 0000 		sts oled_dirty+1,r25
 2653 002a 8093 0000 		sts oled_dirty,r24
 2654               	.L127:
 2655               	.LBE70:
 630:drivers/oled/oled_driver.c ****     }
 631:drivers/oled/oled_driver.c ****     return !oled_scrolling;
 2656               		.loc 1 631 5 is_stmt 1 view .LVU600
 2657 002e 8091 0000 		lds r24,oled_scrolling
 2658 0032 91E0      		ldi r25,lo8(1)
 2659 0034 8927      		eor r24,r25
 2660               	/* epilogue start */
 632:drivers/oled/oled_driver.c **** }
 2661               		.loc 1 632 1 is_stmt 0 view .LVU601
 2662 0036 0895      		ret
 2663               		.cfi_endproc
 2664               	.LFE34:
 2666               		.section	.text.oled_max_chars,"ax",@progbits
 2667               	.global	oled_max_chars
 2669               	oled_max_chars:
 2670               	.LFB35:
 633:drivers/oled/oled_driver.c **** 
 634:drivers/oled/oled_driver.c **** uint8_t oled_max_chars(void) {
 2671               		.loc 1 634 30 is_stmt 1 view -0
 2672               		.cfi_startproc
 2673               	/* prologue: function */
 2674               	/* frame size = 0 */
 2675               	/* stack size = 0 */
 2676               	.L__stack_usage = 0
 635:drivers/oled/oled_driver.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 2677               		.loc 1 635 5 view .LVU603
 2678               		.loc 1 635 8 is_stmt 0 view .LVU604
 2679 0000 8091 0000 		lds r24,oled_rotation
 2680 0004 80FD      		sbrc r24,0
 2681 0006 00C0      		rjmp .L135
 636:drivers/oled/oled_driver.c ****         return OLED_DISPLAY_WIDTH / OLED_FONT_WIDTH;
 2682               		.loc 1 636 16 view .LVU605
 2683 0008 85E1      		ldi r24,lo8(21)
 2684 000a 0895      		ret
 2685               	.L135:
 637:drivers/oled/oled_driver.c ****     }
 638:drivers/oled/oled_driver.c ****     return OLED_DISPLAY_HEIGHT / OLED_FONT_WIDTH;
 2686               		.loc 1 638 12 view .LVU606
 2687 000c 85E0      		ldi r24,lo8(5)
 2688               	/* epilogue start */
 639:drivers/oled/oled_driver.c **** }
 2689               		.loc 1 639 1 view .LVU607
 2690 000e 0895      		ret
 2691               		.cfi_endproc
 2692               	.LFE35:
 2694               		.section	.text.oled_max_lines,"ax",@progbits
 2695               	.global	oled_max_lines
 2697               	oled_max_lines:
 2698               	.LFB36:
 640:drivers/oled/oled_driver.c **** 
 641:drivers/oled/oled_driver.c **** uint8_t oled_max_lines(void) {
 2699               		.loc 1 641 30 is_stmt 1 view -0
 2700               		.cfi_startproc
 2701               	/* prologue: function */
 2702               	/* frame size = 0 */
 2703               	/* stack size = 0 */
 2704               	.L__stack_usage = 0
 642:drivers/oled/oled_driver.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 2705               		.loc 1 642 5 view .LVU609
 2706               		.loc 1 642 8 is_stmt 0 view .LVU610
 2707 0000 8091 0000 		lds r24,oled_rotation
 2708 0004 80FD      		sbrc r24,0
 2709 0006 00C0      		rjmp .L138
 643:drivers/oled/oled_driver.c ****         return OLED_DISPLAY_HEIGHT / OLED_FONT_HEIGHT;
 2710               		.loc 1 643 16 view .LVU611
 2711 0008 84E0      		ldi r24,lo8(4)
 2712 000a 0895      		ret
 2713               	.L138:
 644:drivers/oled/oled_driver.c ****     }
 645:drivers/oled/oled_driver.c ****     return OLED_DISPLAY_WIDTH / OLED_FONT_HEIGHT;
 2714               		.loc 1 645 12 view .LVU612
 2715 000c 80E1      		ldi r24,lo8(16)
 2716               	/* epilogue start */
 646:drivers/oled/oled_driver.c **** }
 2717               		.loc 1 646 1 view .LVU613
 2718 000e 0895      		ret
 2719               		.cfi_endproc
 2720               	.LFE36:
 2722               		.section	.text.oled_task_user,"ax",@progbits
 2723               		.weak	oled_task_user
 2725               	oled_task_user:
 2726               	.LFB38:
 647:drivers/oled/oled_driver.c **** 
 648:drivers/oled/oled_driver.c **** void oled_task(void) {
 649:drivers/oled/oled_driver.c ****     if (!oled_initialized) {
 650:drivers/oled/oled_driver.c ****         return;
 651:drivers/oled/oled_driver.c ****     }
 652:drivers/oled/oled_driver.c **** 
 653:drivers/oled/oled_driver.c ****     oled_set_cursor(0, 0);
 654:drivers/oled/oled_driver.c **** 
 655:drivers/oled/oled_driver.c ****     oled_task_user();
 656:drivers/oled/oled_driver.c **** 
 657:drivers/oled/oled_driver.c **** #if OLED_SCROLL_TIMEOUT > 0
 658:drivers/oled/oled_driver.c ****     if (oled_dirty && oled_scrolling) {
 659:drivers/oled/oled_driver.c ****         oled_scroll_timeout = timer_read32() + OLED_SCROLL_TIMEOUT;
 660:drivers/oled/oled_driver.c ****         oled_scroll_off();
 661:drivers/oled/oled_driver.c ****     }
 662:drivers/oled/oled_driver.c **** #endif
 663:drivers/oled/oled_driver.c **** 
 664:drivers/oled/oled_driver.c ****     // Smart render system, no need to check for dirty
 665:drivers/oled/oled_driver.c ****     oled_render();
 666:drivers/oled/oled_driver.c **** 
 667:drivers/oled/oled_driver.c ****     // Display timeout check
 668:drivers/oled/oled_driver.c **** #if OLED_TIMEOUT > 0
 669:drivers/oled/oled_driver.c ****     if (oled_active && timer_expired32(timer_read32(), oled_timeout)) {
 670:drivers/oled/oled_driver.c ****         oled_off();
 671:drivers/oled/oled_driver.c ****     }
 672:drivers/oled/oled_driver.c **** #endif
 673:drivers/oled/oled_driver.c **** 
 674:drivers/oled/oled_driver.c **** #if OLED_SCROLL_TIMEOUT > 0
 675:drivers/oled/oled_driver.c ****     if (!oled_scrolling && timer_expired32(timer_read32(), oled_scroll_timeout)) {
 676:drivers/oled/oled_driver.c **** #    ifdef OLED_SCROLL_TIMEOUT_RIGHT
 677:drivers/oled/oled_driver.c ****         oled_scroll_right();
 678:drivers/oled/oled_driver.c **** #    else
 679:drivers/oled/oled_driver.c ****         oled_scroll_left();
 680:drivers/oled/oled_driver.c **** #    endif
 681:drivers/oled/oled_driver.c ****     }
 682:drivers/oled/oled_driver.c **** #endif
 683:drivers/oled/oled_driver.c **** }
 684:drivers/oled/oled_driver.c **** 
 685:drivers/oled/oled_driver.c **** __attribute__((weak)) void oled_task_user(void) {}
 2727               		.loc 1 685 49 is_stmt 1 view -0
 2728               		.cfi_startproc
 2729               	/* prologue: function */
 2730               	/* frame size = 0 */
 2731               	/* stack size = 0 */
 2732               	.L__stack_usage = 0
 2733               		.loc 1 685 50 view .LVU615
 2734               	/* epilogue start */
 2735               		.loc 1 685 1 is_stmt 0 view .LVU616
 2736 0000 0895      		ret
 2737               		.cfi_endproc
 2738               	.LFE38:
 2740               		.section	.text.oled_task,"ax",@progbits
 2741               	.global	oled_task
 2743               	oled_task:
 2744               	.LFB37:
 648:drivers/oled/oled_driver.c ****     if (!oled_initialized) {
 2745               		.loc 1 648 22 is_stmt 1 view -0
 2746               		.cfi_startproc
 2747 0000 0F93      		push r16
 2748               	.LCFI56:
 2749               		.cfi_def_cfa_offset 3
 2750               		.cfi_offset 16, -2
 2751 0002 1F93      		push r17
 2752               	.LCFI57:
 2753               		.cfi_def_cfa_offset 4
 2754               		.cfi_offset 17, -3
 2755               	/* prologue: function */
 2756               	/* frame size = 0 */
 2757               	/* stack size = 2 */
 2758               	.L__stack_usage = 2
 649:drivers/oled/oled_driver.c ****         return;
 2759               		.loc 1 649 5 view .LVU618
 649:drivers/oled/oled_driver.c ****         return;
 2760               		.loc 1 649 8 is_stmt 0 view .LVU619
 2761 0004 8091 0000 		lds r24,oled_initialized
 2762 0008 8823      		tst r24
 2763 000a 01F0      		breq .L140
 653:drivers/oled/oled_driver.c **** 
 2764               		.loc 1 653 5 is_stmt 1 view .LVU620
 2765 000c 60E0      		ldi r22,0
 2766 000e 80E0      		ldi r24,0
 2767 0010 0E94 0000 		call oled_set_cursor
 2768               	.LVL176:
 655:drivers/oled/oled_driver.c **** 
 2769               		.loc 1 655 5 view .LVU621
 2770 0014 0E94 0000 		call oled_task_user
 2771               	.LVL177:
 665:drivers/oled/oled_driver.c **** 
 2772               		.loc 1 665 5 view .LVU622
 2773 0018 0E94 0000 		call oled_render
 2774               	.LVL178:
 669:drivers/oled/oled_driver.c ****         oled_off();
 2775               		.loc 1 669 5 view .LVU623
 669:drivers/oled/oled_driver.c ****         oled_off();
 2776               		.loc 1 669 8 is_stmt 0 view .LVU624
 2777 001c 8091 0000 		lds r24,oled_active
 2778 0020 8823      		tst r24
 2779 0022 01F0      		breq .L140
 669:drivers/oled/oled_driver.c ****         oled_off();
 2780               		.loc 1 669 24 discriminator 1 view .LVU625
 2781 0024 0E94 0000 		call timer_read32
 2782               	.LVL179:
 2783 0028 0091 0000 		lds r16,oled_timeout
 2784 002c 1091 0000 		lds r17,oled_timeout+1
 2785 0030 2091 0000 		lds r18,oled_timeout+2
 2786 0034 3091 0000 		lds r19,oled_timeout+3
 2787 0038 601B      		sub r22,r16
 2788 003a 710B      		sbc r23,r17
 2789 003c 820B      		sbc r24,r18
 2790 003e 930B      		sbc r25,r19
 669:drivers/oled/oled_driver.c ****         oled_off();
 2791               		.loc 1 669 21 discriminator 1 view .LVU626
 2792 0040 97FD      		sbrc r25,7
 2793 0042 00C0      		rjmp .L140
 670:drivers/oled/oled_driver.c ****     }
 2794               		.loc 1 670 9 is_stmt 1 view .LVU627
 2795               	/* epilogue start */
 683:drivers/oled/oled_driver.c **** 
 2796               		.loc 1 683 1 is_stmt 0 view .LVU628
 2797 0044 1F91      		pop r17
 2798 0046 0F91      		pop r16
 670:drivers/oled/oled_driver.c ****     }
 2799               		.loc 1 670 9 view .LVU629
 2800 0048 0C94 0000 		jmp oled_off
 2801               	.LVL180:
 2802               	.L140:
 2803               	/* epilogue start */
 683:drivers/oled/oled_driver.c **** 
 2804               		.loc 1 683 1 view .LVU630
 2805 004c 1F91      		pop r17
 2806 004e 0F91      		pop r16
 2807 0050 0895      		ret
 2808               		.cfi_endproc
 2809               	.LFE37:
 2811               		.section	.progmem.data.display_scroll_off.2226,"a"
 2814               	display_scroll_off.2226:
 2815 0000 00        		.byte	0
 2816 0001 2E        		.byte	46
 2817               		.section	.rodata.scroll_remap.2214,"a"
 2820               	scroll_remap.2214:
 2821 0000 07        		.byte	7
 2822 0001 04        		.byte	4
 2823 0002 05        		.byte	5
 2824 0003 00        		.byte	0
 2825 0004 06        		.byte	6
 2826 0005 01        		.byte	1
 2827 0006 02        		.byte	2
 2828 0007 03        		.byte	3
 2829               		.section	.progmem.data.display_off.2196,"a"
 2832               	display_off.2196:
 2833 0000 00        		.byte	0
 2834 0001 AE        		.byte	-82
 2835               		.section	.progmem.data.display_on.2192,"a"
 2838               	display_on.2192:
 2839 0000 00        		.byte	0
 2840 0001 AF        		.byte	-81
 2841               		.section	.bss.oled_temp_buffer.2102,"aw",@nobits
 2844               	oled_temp_buffer.2102:
 2845 0000 0000 0000 		.zero	6
 2845      0000 
 2846               		.section	.rodata.source_map.2073,"a"
 2849               	source_map.2073:
 2850 0000 00        		.byte	0
 2851 0001 08        		.byte	8
 2852 0002 10        		.byte	16
 2853 0003 18        		.byte	24
 2854               		.section	.rodata.target_map.2074,"a"
 2857               	target_map.2074:
 2858 0000 18        		.byte	24
 2859 0001 10        		.byte	16
 2860 0002 08        		.byte	8
 2861 0003 00        		.byte	0
 2862               		.section	.bss.temp_buffer.2075,"aw",@nobits
 2865               	temp_buffer.2075:
 2866 0000 0000 0000 		.zero	32
 2866      0000 0000 
 2866      0000 0000 
 2866      0000 0000 
 2866      0000 0000 
 2867               		.section	.data.display_start.2072,"aw"
 2870               	display_start.2072:
 2871 0000 00        		.byte	0
 2872 0001 21        		.byte	33
 2873 0002 00        		.byte	0
 2874 0003 7F        		.byte	127
 2875 0004 22        		.byte	34
 2876 0005 00        		.byte	0
 2877 0006 03        		.byte	3
 2878               		.section	.progmem.data.display_setup2.2029,"a"
 2881               	display_setup2.2029:
 2882 0000 00        		.byte	0
 2883 0001 DA        		.byte	-38
 2884 0002 02        		.byte	2
 2885 0003 81        		.byte	-127
 2886 0004 FF        		.byte	-1
 2887 0005 D9        		.byte	-39
 2888 0006 F1        		.byte	-15
 2889 0007 DB        		.byte	-37
 2890 0008 20        		.byte	32
 2891 0009 A4        		.byte	-92
 2892 000a A6        		.byte	-90
 2893 000b 2E        		.byte	46
 2894 000c AF        		.byte	-81
 2895               		.section	.progmem.data.display_flipped.2028,"a"
 2898               	display_flipped.2028:
 2899 0000 00        		.byte	0
 2900 0001 A0        		.byte	-96
 2901 0002 C0        		.byte	-64
 2902               		.section	.progmem.data.display_normal.2027,"a"
 2905               	display_normal.2027:
 2906 0000 00        		.byte	0
 2907 0001 A1        		.byte	-95
 2908 0002 C8        		.byte	-56
 2909               		.section	.progmem.data.display_setup1.2026,"a"
 2912               	display_setup1.2026:
 2913 0000 00        		.byte	0
 2914 0001 AE        		.byte	-82
 2915 0002 D5        		.byte	-43
 2916 0003 80        		.byte	-128
 2917 0004 A8        		.byte	-88
 2918 0005 1F        		.byte	31
 2919 0006 D3        		.byte	-45
 2920 0007 00        		.byte	0
 2921 0008 40        		.byte	64
 2922 0009 8D        		.byte	-115
 2923 000a 14        		.byte	20
 2924 000b 20        		.byte	32
 2925 000c 00        		.byte	0
 2926               		.comm	oled_timeout,4,1
 2927               	.global	oled_scroll_end
 2928               		.section	.data.oled_scroll_end,"aw"
 2931               	oled_scroll_end:
 2932 0000 07        		.byte	7
 2933               	.global	oled_scroll_start
 2934               		.section	.bss.oled_scroll_start,"aw",@nobits
 2937               	oled_scroll_start:
 2938 0000 00        		.zero	1
 2939               	.global	oled_scroll_speed
 2940               		.section	.bss.oled_scroll_speed,"aw",@nobits
 2943               	oled_scroll_speed:
 2944 0000 00        		.zero	1
 2945               	.global	oled_rotation_width
 2946               		.section	.bss.oled_rotation_width,"aw",@nobits
 2949               	oled_rotation_width:
 2950 0000 00        		.zero	1
 2951               	.global	oled_rotation
 2952               		.section	.bss.oled_rotation,"aw",@nobits
 2955               	oled_rotation:
 2956 0000 00        		.zero	1
 2957               	.global	oled_brightness
 2958               		.section	.data.oled_brightness,"aw"
 2961               	oled_brightness:
 2962 0000 FF        		.byte	-1
 2963               	.global	oled_scrolling
 2964               		.section	.bss.oled_scrolling,"aw",@nobits
 2967               	oled_scrolling:
 2968 0000 00        		.zero	1
 2969               	.global	oled_active
 2970               		.section	.bss.oled_active,"aw",@nobits
 2973               	oled_active:
 2974 0000 00        		.zero	1
 2975               	.global	oled_initialized
 2976               		.section	.bss.oled_initialized,"aw",@nobits
 2979               	oled_initialized:
 2980 0000 00        		.zero	1
 2981               	.global	oled_dirty
 2982               		.section	.bss.oled_dirty,"aw",@nobits
 2985               	oled_dirty:
 2986 0000 0000      		.zero	2
 2987               		.comm	oled_cursor,2,1
 2988               		.comm	oled_buffer,512,1
 2989               	.global	font
 2990               		.section	.progmem.data.font,"a"
 2993               	font:
 2994 0000 00        		.byte	0
 2995 0001 00        		.byte	0
 2996 0002 00        		.byte	0
 2997 0003 00        		.byte	0
 2998 0004 00        		.byte	0
 2999 0005 00        		.byte	0
 3000 0006 3E        		.byte	62
 3001 0007 5B        		.byte	91
 3002 0008 4F        		.byte	79
 3003 0009 5B        		.byte	91
 3004 000a 3E        		.byte	62
 3005 000b 00        		.byte	0
 3006 000c 3E        		.byte	62
 3007 000d 6B        		.byte	107
 3008 000e 4F        		.byte	79
 3009 000f 6B        		.byte	107
 3010 0010 3E        		.byte	62
 3011 0011 00        		.byte	0
 3012 0012 1C        		.byte	28
 3013 0013 3E        		.byte	62
 3014 0014 7C        		.byte	124
 3015 0015 3E        		.byte	62
 3016 0016 1C        		.byte	28
 3017 0017 00        		.byte	0
 3018 0018 18        		.byte	24
 3019 0019 3C        		.byte	60
 3020 001a 7E        		.byte	126
 3021 001b 3C        		.byte	60
 3022 001c 18        		.byte	24
 3023 001d 00        		.byte	0
 3024 001e 1C        		.byte	28
 3025 001f 57        		.byte	87
 3026 0020 7D        		.byte	125
 3027 0021 57        		.byte	87
 3028 0022 1C        		.byte	28
 3029 0023 00        		.byte	0
 3030 0024 1C        		.byte	28
 3031 0025 5E        		.byte	94
 3032 0026 7F        		.byte	127
 3033 0027 5E        		.byte	94
 3034 0028 1C        		.byte	28
 3035 0029 00        		.byte	0
 3036 002a 00        		.byte	0
 3037 002b 18        		.byte	24
 3038 002c 3C        		.byte	60
 3039 002d 18        		.byte	24
 3040 002e 00        		.byte	0
 3041 002f 00        		.byte	0
 3042 0030 FF        		.byte	-1
 3043 0031 E7        		.byte	-25
 3044 0032 C3        		.byte	-61
 3045 0033 E7        		.byte	-25
 3046 0034 FF        		.byte	-1
 3047 0035 00        		.byte	0
 3048 0036 00        		.byte	0
 3049 0037 18        		.byte	24
 3050 0038 24        		.byte	36
 3051 0039 18        		.byte	24
 3052 003a 00        		.byte	0
 3053 003b 00        		.byte	0
 3054 003c FF        		.byte	-1
 3055 003d E7        		.byte	-25
 3056 003e DB        		.byte	-37
 3057 003f E7        		.byte	-25
 3058 0040 FF        		.byte	-1
 3059 0041 00        		.byte	0
 3060 0042 30        		.byte	48
 3061 0043 48        		.byte	72
 3062 0044 3A        		.byte	58
 3063 0045 06        		.byte	6
 3064 0046 0E        		.byte	14
 3065 0047 00        		.byte	0
 3066 0048 26        		.byte	38
 3067 0049 29        		.byte	41
 3068 004a 79        		.byte	121
 3069 004b 29        		.byte	41
 3070 004c 26        		.byte	38
 3071 004d 00        		.byte	0
 3072 004e 40        		.byte	64
 3073 004f 7F        		.byte	127
 3074 0050 05        		.byte	5
 3075 0051 05        		.byte	5
 3076 0052 07        		.byte	7
 3077 0053 00        		.byte	0
 3078 0054 40        		.byte	64
 3079 0055 7F        		.byte	127
 3080 0056 05        		.byte	5
 3081 0057 25        		.byte	37
 3082 0058 3F        		.byte	63
 3083 0059 00        		.byte	0
 3084 005a 5A        		.byte	90
 3085 005b 3C        		.byte	60
 3086 005c E7        		.byte	-25
 3087 005d 3C        		.byte	60
 3088 005e 5A        		.byte	90
 3089 005f 00        		.byte	0
 3090 0060 7F        		.byte	127
 3091 0061 3E        		.byte	62
 3092 0062 1C        		.byte	28
 3093 0063 1C        		.byte	28
 3094 0064 08        		.byte	8
 3095 0065 00        		.byte	0
 3096 0066 08        		.byte	8
 3097 0067 1C        		.byte	28
 3098 0068 1C        		.byte	28
 3099 0069 3E        		.byte	62
 3100 006a 7F        		.byte	127
 3101 006b 00        		.byte	0
 3102 006c 14        		.byte	20
 3103 006d 22        		.byte	34
 3104 006e 7F        		.byte	127
 3105 006f 22        		.byte	34
 3106 0070 14        		.byte	20
 3107 0071 00        		.byte	0
 3108 0072 5F        		.byte	95
 3109 0073 5F        		.byte	95
 3110 0074 00        		.byte	0
 3111 0075 5F        		.byte	95
 3112 0076 5F        		.byte	95
 3113 0077 00        		.byte	0
 3114 0078 06        		.byte	6
 3115 0079 09        		.byte	9
 3116 007a 7F        		.byte	127
 3117 007b 01        		.byte	1
 3118 007c 7F        		.byte	127
 3119 007d 00        		.byte	0
 3120 007e 00        		.byte	0
 3121 007f 66        		.byte	102
 3122 0080 89        		.byte	-119
 3123 0081 95        		.byte	-107
 3124 0082 6A        		.byte	106
 3125 0083 00        		.byte	0
 3126 0084 60        		.byte	96
 3127 0085 60        		.byte	96
 3128 0086 60        		.byte	96
 3129 0087 60        		.byte	96
 3130 0088 60        		.byte	96
 3131 0089 00        		.byte	0
 3132 008a 94        		.byte	-108
 3133 008b A2        		.byte	-94
 3134 008c FF        		.byte	-1
 3135 008d A2        		.byte	-94
 3136 008e 94        		.byte	-108
 3137 008f 00        		.byte	0
 3138 0090 08        		.byte	8
 3139 0091 04        		.byte	4
 3140 0092 7E        		.byte	126
 3141 0093 04        		.byte	4
 3142 0094 08        		.byte	8
 3143 0095 00        		.byte	0
 3144 0096 10        		.byte	16
 3145 0097 20        		.byte	32
 3146 0098 7E        		.byte	126
 3147 0099 20        		.byte	32
 3148 009a 10        		.byte	16
 3149 009b 00        		.byte	0
 3150 009c 08        		.byte	8
 3151 009d 08        		.byte	8
 3152 009e 2A        		.byte	42
 3153 009f 1C        		.byte	28
 3154 00a0 08        		.byte	8
 3155 00a1 00        		.byte	0
 3156 00a2 08        		.byte	8
 3157 00a3 1C        		.byte	28
 3158 00a4 2A        		.byte	42
 3159 00a5 08        		.byte	8
 3160 00a6 08        		.byte	8
 3161 00a7 00        		.byte	0
 3162 00a8 1E        		.byte	30
 3163 00a9 10        		.byte	16
 3164 00aa 10        		.byte	16
 3165 00ab 10        		.byte	16
 3166 00ac 10        		.byte	16
 3167 00ad 00        		.byte	0
 3168 00ae 0C        		.byte	12
 3169 00af 1E        		.byte	30
 3170 00b0 0C        		.byte	12
 3171 00b1 1E        		.byte	30
 3172 00b2 0C        		.byte	12
 3173 00b3 00        		.byte	0
 3174 00b4 30        		.byte	48
 3175 00b5 38        		.byte	56
 3176 00b6 3E        		.byte	62
 3177 00b7 38        		.byte	56
 3178 00b8 30        		.byte	48
 3179 00b9 00        		.byte	0
 3180 00ba 06        		.byte	6
 3181 00bb 0E        		.byte	14
 3182 00bc 3E        		.byte	62
 3183 00bd 0E        		.byte	14
 3184 00be 06        		.byte	6
 3185 00bf 00        		.byte	0
 3186 00c0 00        		.byte	0
 3187 00c1 00        		.byte	0
 3188 00c2 00        		.byte	0
 3189 00c3 00        		.byte	0
 3190 00c4 00        		.byte	0
 3191 00c5 00        		.byte	0
 3192 00c6 00        		.byte	0
 3193 00c7 00        		.byte	0
 3194 00c8 5F        		.byte	95
 3195 00c9 00        		.byte	0
 3196 00ca 00        		.byte	0
 3197 00cb 00        		.byte	0
 3198 00cc 00        		.byte	0
 3199 00cd 07        		.byte	7
 3200 00ce 00        		.byte	0
 3201 00cf 07        		.byte	7
 3202 00d0 00        		.byte	0
 3203 00d1 00        		.byte	0
 3204 00d2 14        		.byte	20
 3205 00d3 7F        		.byte	127
 3206 00d4 14        		.byte	20
 3207 00d5 7F        		.byte	127
 3208 00d6 14        		.byte	20
 3209 00d7 00        		.byte	0
 3210 00d8 24        		.byte	36
 3211 00d9 2A        		.byte	42
 3212 00da 7F        		.byte	127
 3213 00db 2A        		.byte	42
 3214 00dc 12        		.byte	18
 3215 00dd 00        		.byte	0
 3216 00de 23        		.byte	35
 3217 00df 13        		.byte	19
 3218 00e0 08        		.byte	8
 3219 00e1 64        		.byte	100
 3220 00e2 62        		.byte	98
 3221 00e3 00        		.byte	0
 3222 00e4 36        		.byte	54
 3223 00e5 49        		.byte	73
 3224 00e6 56        		.byte	86
 3225 00e7 20        		.byte	32
 3226 00e8 50        		.byte	80
 3227 00e9 00        		.byte	0
 3228 00ea 00        		.byte	0
 3229 00eb 08        		.byte	8
 3230 00ec 07        		.byte	7
 3231 00ed 03        		.byte	3
 3232 00ee 00        		.byte	0
 3233 00ef 00        		.byte	0
 3234 00f0 00        		.byte	0
 3235 00f1 1C        		.byte	28
 3236 00f2 22        		.byte	34
 3237 00f3 41        		.byte	65
 3238 00f4 00        		.byte	0
 3239 00f5 00        		.byte	0
 3240 00f6 00        		.byte	0
 3241 00f7 41        		.byte	65
 3242 00f8 22        		.byte	34
 3243 00f9 1C        		.byte	28
 3244 00fa 00        		.byte	0
 3245 00fb 00        		.byte	0
 3246 00fc 2A        		.byte	42
 3247 00fd 1C        		.byte	28
 3248 00fe 7F        		.byte	127
 3249 00ff 1C        		.byte	28
 3250 0100 2A        		.byte	42
 3251 0101 00        		.byte	0
 3252 0102 08        		.byte	8
 3253 0103 08        		.byte	8
 3254 0104 3E        		.byte	62
 3255 0105 08        		.byte	8
 3256 0106 08        		.byte	8
 3257 0107 00        		.byte	0
 3258 0108 00        		.byte	0
 3259 0109 80        		.byte	-128
 3260 010a 70        		.byte	112
 3261 010b 30        		.byte	48
 3262 010c 00        		.byte	0
 3263 010d 00        		.byte	0
 3264 010e 08        		.byte	8
 3265 010f 08        		.byte	8
 3266 0110 08        		.byte	8
 3267 0111 08        		.byte	8
 3268 0112 08        		.byte	8
 3269 0113 00        		.byte	0
 3270 0114 00        		.byte	0
 3271 0115 00        		.byte	0
 3272 0116 60        		.byte	96
 3273 0117 60        		.byte	96
 3274 0118 00        		.byte	0
 3275 0119 00        		.byte	0
 3276 011a 20        		.byte	32
 3277 011b 10        		.byte	16
 3278 011c 08        		.byte	8
 3279 011d 04        		.byte	4
 3280 011e 02        		.byte	2
 3281 011f 00        		.byte	0
 3282 0120 3E        		.byte	62
 3283 0121 51        		.byte	81
 3284 0122 49        		.byte	73
 3285 0123 45        		.byte	69
 3286 0124 3E        		.byte	62
 3287 0125 00        		.byte	0
 3288 0126 00        		.byte	0
 3289 0127 42        		.byte	66
 3290 0128 7F        		.byte	127
 3291 0129 40        		.byte	64
 3292 012a 00        		.byte	0
 3293 012b 00        		.byte	0
 3294 012c 72        		.byte	114
 3295 012d 49        		.byte	73
 3296 012e 49        		.byte	73
 3297 012f 49        		.byte	73
 3298 0130 46        		.byte	70
 3299 0131 00        		.byte	0
 3300 0132 21        		.byte	33
 3301 0133 41        		.byte	65
 3302 0134 49        		.byte	73
 3303 0135 4D        		.byte	77
 3304 0136 33        		.byte	51
 3305 0137 00        		.byte	0
 3306 0138 18        		.byte	24
 3307 0139 14        		.byte	20
 3308 013a 12        		.byte	18
 3309 013b 7F        		.byte	127
 3310 013c 10        		.byte	16
 3311 013d 00        		.byte	0
 3312 013e 27        		.byte	39
 3313 013f 45        		.byte	69
 3314 0140 45        		.byte	69
 3315 0141 45        		.byte	69
 3316 0142 39        		.byte	57
 3317 0143 00        		.byte	0
 3318 0144 3C        		.byte	60
 3319 0145 4A        		.byte	74
 3320 0146 49        		.byte	73
 3321 0147 49        		.byte	73
 3322 0148 31        		.byte	49
 3323 0149 00        		.byte	0
 3324 014a 41        		.byte	65
 3325 014b 21        		.byte	33
 3326 014c 11        		.byte	17
 3327 014d 09        		.byte	9
 3328 014e 07        		.byte	7
 3329 014f 00        		.byte	0
 3330 0150 36        		.byte	54
 3331 0151 49        		.byte	73
 3332 0152 49        		.byte	73
 3333 0153 49        		.byte	73
 3334 0154 36        		.byte	54
 3335 0155 00        		.byte	0
 3336 0156 46        		.byte	70
 3337 0157 49        		.byte	73
 3338 0158 49        		.byte	73
 3339 0159 29        		.byte	41
 3340 015a 1E        		.byte	30
 3341 015b 00        		.byte	0
 3342 015c 00        		.byte	0
 3343 015d 00        		.byte	0
 3344 015e 14        		.byte	20
 3345 015f 00        		.byte	0
 3346 0160 00        		.byte	0
 3347 0161 00        		.byte	0
 3348 0162 00        		.byte	0
 3349 0163 40        		.byte	64
 3350 0164 34        		.byte	52
 3351 0165 00        		.byte	0
 3352 0166 00        		.byte	0
 3353 0167 00        		.byte	0
 3354 0168 00        		.byte	0
 3355 0169 08        		.byte	8
 3356 016a 14        		.byte	20
 3357 016b 22        		.byte	34
 3358 016c 41        		.byte	65
 3359 016d 00        		.byte	0
 3360 016e 14        		.byte	20
 3361 016f 14        		.byte	20
 3362 0170 14        		.byte	20
 3363 0171 14        		.byte	20
 3364 0172 14        		.byte	20
 3365 0173 00        		.byte	0
 3366 0174 00        		.byte	0
 3367 0175 41        		.byte	65
 3368 0176 22        		.byte	34
 3369 0177 14        		.byte	20
 3370 0178 08        		.byte	8
 3371 0179 00        		.byte	0
 3372 017a 02        		.byte	2
 3373 017b 01        		.byte	1
 3374 017c 59        		.byte	89
 3375 017d 09        		.byte	9
 3376 017e 06        		.byte	6
 3377 017f 00        		.byte	0
 3378 0180 3E        		.byte	62
 3379 0181 41        		.byte	65
 3380 0182 5D        		.byte	93
 3381 0183 59        		.byte	89
 3382 0184 4E        		.byte	78
 3383 0185 00        		.byte	0
 3384 0186 7C        		.byte	124
 3385 0187 12        		.byte	18
 3386 0188 11        		.byte	17
 3387 0189 12        		.byte	18
 3388 018a 7C        		.byte	124
 3389 018b 00        		.byte	0
 3390 018c 7F        		.byte	127
 3391 018d 49        		.byte	73
 3392 018e 49        		.byte	73
 3393 018f 49        		.byte	73
 3394 0190 36        		.byte	54
 3395 0191 00        		.byte	0
 3396 0192 3E        		.byte	62
 3397 0193 41        		.byte	65
 3398 0194 41        		.byte	65
 3399 0195 41        		.byte	65
 3400 0196 22        		.byte	34
 3401 0197 00        		.byte	0
 3402 0198 7F        		.byte	127
 3403 0199 41        		.byte	65
 3404 019a 41        		.byte	65
 3405 019b 41        		.byte	65
 3406 019c 3E        		.byte	62
 3407 019d 00        		.byte	0
 3408 019e 7F        		.byte	127
 3409 019f 49        		.byte	73
 3410 01a0 49        		.byte	73
 3411 01a1 49        		.byte	73
 3412 01a2 41        		.byte	65
 3413 01a3 00        		.byte	0
 3414 01a4 7F        		.byte	127
 3415 01a5 09        		.byte	9
 3416 01a6 09        		.byte	9
 3417 01a7 09        		.byte	9
 3418 01a8 01        		.byte	1
 3419 01a9 00        		.byte	0
 3420 01aa 3E        		.byte	62
 3421 01ab 41        		.byte	65
 3422 01ac 41        		.byte	65
 3423 01ad 51        		.byte	81
 3424 01ae 73        		.byte	115
 3425 01af 00        		.byte	0
 3426 01b0 7F        		.byte	127
 3427 01b1 08        		.byte	8
 3428 01b2 08        		.byte	8
 3429 01b3 08        		.byte	8
 3430 01b4 7F        		.byte	127
 3431 01b5 00        		.byte	0
 3432 01b6 00        		.byte	0
 3433 01b7 41        		.byte	65
 3434 01b8 7F        		.byte	127
 3435 01b9 41        		.byte	65
 3436 01ba 00        		.byte	0
 3437 01bb 00        		.byte	0
 3438 01bc 20        		.byte	32
 3439 01bd 40        		.byte	64
 3440 01be 41        		.byte	65
 3441 01bf 3F        		.byte	63
 3442 01c0 01        		.byte	1
 3443 01c1 00        		.byte	0
 3444 01c2 7F        		.byte	127
 3445 01c3 08        		.byte	8
 3446 01c4 14        		.byte	20
 3447 01c5 22        		.byte	34
 3448 01c6 41        		.byte	65
 3449 01c7 00        		.byte	0
 3450 01c8 7F        		.byte	127
 3451 01c9 40        		.byte	64
 3452 01ca 40        		.byte	64
 3453 01cb 40        		.byte	64
 3454 01cc 40        		.byte	64
 3455 01cd 00        		.byte	0
 3456 01ce 7F        		.byte	127
 3457 01cf 02        		.byte	2
 3458 01d0 1C        		.byte	28
 3459 01d1 02        		.byte	2
 3460 01d2 7F        		.byte	127
 3461 01d3 00        		.byte	0
 3462 01d4 7F        		.byte	127
 3463 01d5 04        		.byte	4
 3464 01d6 08        		.byte	8
 3465 01d7 10        		.byte	16
 3466 01d8 7F        		.byte	127
 3467 01d9 00        		.byte	0
 3468 01da 3E        		.byte	62
 3469 01db 41        		.byte	65
 3470 01dc 41        		.byte	65
 3471 01dd 41        		.byte	65
 3472 01de 3E        		.byte	62
 3473 01df 00        		.byte	0
 3474 01e0 7F        		.byte	127
 3475 01e1 09        		.byte	9
 3476 01e2 09        		.byte	9
 3477 01e3 09        		.byte	9
 3478 01e4 06        		.byte	6
 3479 01e5 00        		.byte	0
 3480 01e6 3E        		.byte	62
 3481 01e7 41        		.byte	65
 3482 01e8 51        		.byte	81
 3483 01e9 21        		.byte	33
 3484 01ea 5E        		.byte	94
 3485 01eb 00        		.byte	0
 3486 01ec 7F        		.byte	127
 3487 01ed 09        		.byte	9
 3488 01ee 19        		.byte	25
 3489 01ef 29        		.byte	41
 3490 01f0 46        		.byte	70
 3491 01f1 00        		.byte	0
 3492 01f2 26        		.byte	38
 3493 01f3 49        		.byte	73
 3494 01f4 49        		.byte	73
 3495 01f5 49        		.byte	73
 3496 01f6 32        		.byte	50
 3497 01f7 00        		.byte	0
 3498 01f8 03        		.byte	3
 3499 01f9 01        		.byte	1
 3500 01fa 7F        		.byte	127
 3501 01fb 01        		.byte	1
 3502 01fc 03        		.byte	3
 3503 01fd 00        		.byte	0
 3504 01fe 3F        		.byte	63
 3505 01ff 40        		.byte	64
 3506 0200 40        		.byte	64
 3507 0201 40        		.byte	64
 3508 0202 3F        		.byte	63
 3509 0203 00        		.byte	0
 3510 0204 1F        		.byte	31
 3511 0205 20        		.byte	32
 3512 0206 40        		.byte	64
 3513 0207 20        		.byte	32
 3514 0208 1F        		.byte	31
 3515 0209 00        		.byte	0
 3516 020a 3F        		.byte	63
 3517 020b 40        		.byte	64
 3518 020c 38        		.byte	56
 3519 020d 40        		.byte	64
 3520 020e 3F        		.byte	63
 3521 020f 00        		.byte	0
 3522 0210 63        		.byte	99
 3523 0211 14        		.byte	20
 3524 0212 08        		.byte	8
 3525 0213 14        		.byte	20
 3526 0214 63        		.byte	99
 3527 0215 00        		.byte	0
 3528 0216 03        		.byte	3
 3529 0217 04        		.byte	4
 3530 0218 78        		.byte	120
 3531 0219 04        		.byte	4
 3532 021a 03        		.byte	3
 3533 021b 00        		.byte	0
 3534 021c 61        		.byte	97
 3535 021d 59        		.byte	89
 3536 021e 49        		.byte	73
 3537 021f 4D        		.byte	77
 3538 0220 43        		.byte	67
 3539 0221 00        		.byte	0
 3540 0222 00        		.byte	0
 3541 0223 7F        		.byte	127
 3542 0224 41        		.byte	65
 3543 0225 41        		.byte	65
 3544 0226 41        		.byte	65
 3545 0227 00        		.byte	0
 3546 0228 02        		.byte	2
 3547 0229 04        		.byte	4
 3548 022a 08        		.byte	8
 3549 022b 10        		.byte	16
 3550 022c 20        		.byte	32
 3551 022d 00        		.byte	0
 3552 022e 00        		.byte	0
 3553 022f 41        		.byte	65
 3554 0230 41        		.byte	65
 3555 0231 41        		.byte	65
 3556 0232 7F        		.byte	127
 3557 0233 00        		.byte	0
 3558 0234 04        		.byte	4
 3559 0235 02        		.byte	2
 3560 0236 01        		.byte	1
 3561 0237 02        		.byte	2
 3562 0238 04        		.byte	4
 3563 0239 00        		.byte	0
 3564 023a 40        		.byte	64
 3565 023b 40        		.byte	64
 3566 023c 40        		.byte	64
 3567 023d 40        		.byte	64
 3568 023e 40        		.byte	64
 3569 023f 00        		.byte	0
 3570 0240 00        		.byte	0
 3571 0241 03        		.byte	3
 3572 0242 07        		.byte	7
 3573 0243 08        		.byte	8
 3574 0244 00        		.byte	0
 3575 0245 00        		.byte	0
 3576 0246 20        		.byte	32
 3577 0247 54        		.byte	84
 3578 0248 54        		.byte	84
 3579 0249 78        		.byte	120
 3580 024a 40        		.byte	64
 3581 024b 00        		.byte	0
 3582 024c 7F        		.byte	127
 3583 024d 28        		.byte	40
 3584 024e 44        		.byte	68
 3585 024f 44        		.byte	68
 3586 0250 38        		.byte	56
 3587 0251 00        		.byte	0
 3588 0252 38        		.byte	56
 3589 0253 44        		.byte	68
 3590 0254 44        		.byte	68
 3591 0255 44        		.byte	68
 3592 0256 28        		.byte	40
 3593 0257 00        		.byte	0
 3594 0258 38        		.byte	56
 3595 0259 44        		.byte	68
 3596 025a 44        		.byte	68
 3597 025b 28        		.byte	40
 3598 025c 7F        		.byte	127
 3599 025d 00        		.byte	0
 3600 025e 38        		.byte	56
 3601 025f 54        		.byte	84
 3602 0260 54        		.byte	84
 3603 0261 54        		.byte	84
 3604 0262 18        		.byte	24
 3605 0263 00        		.byte	0
 3606 0264 00        		.byte	0
 3607 0265 08        		.byte	8
 3608 0266 7E        		.byte	126
 3609 0267 09        		.byte	9
 3610 0268 02        		.byte	2
 3611 0269 00        		.byte	0
 3612 026a 18        		.byte	24
 3613 026b 24        		.byte	36
 3614 026c 24        		.byte	36
 3615 026d 1C        		.byte	28
 3616 026e 78        		.byte	120
 3617 026f 00        		.byte	0
 3618 0270 7F        		.byte	127
 3619 0271 08        		.byte	8
 3620 0272 04        		.byte	4
 3621 0273 04        		.byte	4
 3622 0274 78        		.byte	120
 3623 0275 00        		.byte	0
 3624 0276 00        		.byte	0
 3625 0277 44        		.byte	68
 3626 0278 7D        		.byte	125
 3627 0279 40        		.byte	64
 3628 027a 00        		.byte	0
 3629 027b 00        		.byte	0
 3630 027c 20        		.byte	32
 3631 027d 40        		.byte	64
 3632 027e 40        		.byte	64
 3633 027f 3D        		.byte	61
 3634 0280 00        		.byte	0
 3635 0281 00        		.byte	0
 3636 0282 7F        		.byte	127
 3637 0283 10        		.byte	16
 3638 0284 28        		.byte	40
 3639 0285 44        		.byte	68
 3640 0286 00        		.byte	0
 3641 0287 00        		.byte	0
 3642 0288 00        		.byte	0
 3643 0289 41        		.byte	65
 3644 028a 7F        		.byte	127
 3645 028b 40        		.byte	64
 3646 028c 00        		.byte	0
 3647 028d 00        		.byte	0
 3648 028e 7C        		.byte	124
 3649 028f 04        		.byte	4
 3650 0290 78        		.byte	120
 3651 0291 04        		.byte	4
 3652 0292 78        		.byte	120
 3653 0293 00        		.byte	0
 3654 0294 7C        		.byte	124
 3655 0295 08        		.byte	8
 3656 0296 04        		.byte	4
 3657 0297 04        		.byte	4
 3658 0298 78        		.byte	120
 3659 0299 00        		.byte	0
 3660 029a 38        		.byte	56
 3661 029b 44        		.byte	68
 3662 029c 44        		.byte	68
 3663 029d 44        		.byte	68
 3664 029e 38        		.byte	56
 3665 029f 00        		.byte	0
 3666 02a0 7C        		.byte	124
 3667 02a1 18        		.byte	24
 3668 02a2 24        		.byte	36
 3669 02a3 24        		.byte	36
 3670 02a4 18        		.byte	24
 3671 02a5 00        		.byte	0
 3672 02a6 18        		.byte	24
 3673 02a7 24        		.byte	36
 3674 02a8 24        		.byte	36
 3675 02a9 18        		.byte	24
 3676 02aa 7C        		.byte	124
 3677 02ab 00        		.byte	0
 3678 02ac 7C        		.byte	124
 3679 02ad 08        		.byte	8
 3680 02ae 04        		.byte	4
 3681 02af 04        		.byte	4
 3682 02b0 08        		.byte	8
 3683 02b1 00        		.byte	0
 3684 02b2 48        		.byte	72
 3685 02b3 54        		.byte	84
 3686 02b4 54        		.byte	84
 3687 02b5 54        		.byte	84
 3688 02b6 24        		.byte	36
 3689 02b7 00        		.byte	0
 3690 02b8 04        		.byte	4
 3691 02b9 04        		.byte	4
 3692 02ba 3F        		.byte	63
 3693 02bb 44        		.byte	68
 3694 02bc 24        		.byte	36
 3695 02bd 00        		.byte	0
 3696 02be 3C        		.byte	60
 3697 02bf 40        		.byte	64
 3698 02c0 40        		.byte	64
 3699 02c1 20        		.byte	32
 3700 02c2 7C        		.byte	124
 3701 02c3 00        		.byte	0
 3702 02c4 1C        		.byte	28
 3703 02c5 20        		.byte	32
 3704 02c6 40        		.byte	64
 3705 02c7 20        		.byte	32
 3706 02c8 1C        		.byte	28
 3707 02c9 00        		.byte	0
 3708 02ca 3C        		.byte	60
 3709 02cb 40        		.byte	64
 3710 02cc 30        		.byte	48
 3711 02cd 40        		.byte	64
 3712 02ce 3C        		.byte	60
 3713 02cf 00        		.byte	0
 3714 02d0 44        		.byte	68
 3715 02d1 28        		.byte	40
 3716 02d2 10        		.byte	16
 3717 02d3 28        		.byte	40
 3718 02d4 44        		.byte	68
 3719 02d5 00        		.byte	0
 3720 02d6 4C        		.byte	76
 3721 02d7 90        		.byte	-112
 3722 02d8 90        		.byte	-112
 3723 02d9 90        		.byte	-112
 3724 02da 7C        		.byte	124
 3725 02db 00        		.byte	0
 3726 02dc 44        		.byte	68
 3727 02dd 64        		.byte	100
 3728 02de 54        		.byte	84
 3729 02df 4C        		.byte	76
 3730 02e0 44        		.byte	68
 3731 02e1 00        		.byte	0
 3732 02e2 00        		.byte	0
 3733 02e3 08        		.byte	8
 3734 02e4 36        		.byte	54
 3735 02e5 41        		.byte	65
 3736 02e6 00        		.byte	0
 3737 02e7 00        		.byte	0
 3738 02e8 00        		.byte	0
 3739 02e9 00        		.byte	0
 3740 02ea 77        		.byte	119
 3741 02eb 00        		.byte	0
 3742 02ec 00        		.byte	0
 3743 02ed 00        		.byte	0
 3744 02ee 00        		.byte	0
 3745 02ef 41        		.byte	65
 3746 02f0 36        		.byte	54
 3747 02f1 08        		.byte	8
 3748 02f2 00        		.byte	0
 3749 02f3 00        		.byte	0
 3750 02f4 02        		.byte	2
 3751 02f5 01        		.byte	1
 3752 02f6 02        		.byte	2
 3753 02f7 04        		.byte	4
 3754 02f8 02        		.byte	2
 3755 02f9 00        		.byte	0
 3756 02fa 3C        		.byte	60
 3757 02fb 26        		.byte	38
 3758 02fc 23        		.byte	35
 3759 02fd 26        		.byte	38
 3760 02fe 3C        		.byte	60
 3761 02ff 00        		.byte	0
 3762 0300 F0        		.byte	-16
 3763 0301 18        		.byte	24
 3764 0302 0C        		.byte	12
 3765 0303 06        		.byte	6
 3766 0304 02        		.byte	2
 3767 0305 01        		.byte	1
 3768 0306 01        		.byte	1
 3769 0307 01        		.byte	1
 3770 0308 01        		.byte	1
 3771 0309 01        		.byte	1
 3772 030a 39        		.byte	57
 3773 030b 29        		.byte	41
 3774 030c 33        		.byte	51
 3775 030d 02        		.byte	2
 3776 030e 02        		.byte	2
 3777 030f 07        		.byte	7
 3778 0310 05        		.byte	5
 3779 0311 06        		.byte	6
 3780 0312 0C        		.byte	12
 3781 0313 08        		.byte	8
 3782 0314 18        		.byte	24
 3783 0315 10        		.byte	16
 3784 0316 30        		.byte	48
 3785 0317 60        		.byte	96
 3786 0318 C0        		.byte	-64
 3787 0319 80        		.byte	-128
 3788 031a 00        		.byte	0
 3789 031b 00        		.byte	0
 3790 031c 00        		.byte	0
 3791 031d 00        		.byte	0
 3792 031e 00        		.byte	0
 3793 031f F8        		.byte	-8
 3794 0320 04        		.byte	4
 3795 0321 22        		.byte	34
 3796 0322 52        		.byte	82
 3797 0323 E2        		.byte	-30
 3798 0324 42        		.byte	66
 3799 0325 42        		.byte	66
 3800 0326 42        		.byte	66
 3801 0327 E2        		.byte	-30
 3802 0328 52        		.byte	82
 3803 0329 22        		.byte	34
 3804 032a 22        		.byte	34
 3805 032b 22        		.byte	34
 3806 032c 42        		.byte	66
 3807 032d 82        		.byte	-126
 3808 032e 02        		.byte	2
 3809 032f 02        		.byte	2
 3810 0330 22        		.byte	34
 3811 0331 22        		.byte	34
 3812 0332 02        		.byte	2
 3813 0333 04        		.byte	4
 3814 0334 F8        		.byte	-8
 3815 0335 00        		.byte	0
 3816 0336 00        		.byte	0
 3817 0337 F8        		.byte	-8
 3818 0338 04        		.byte	4
 3819 0339 02        		.byte	2
 3820 033a 02        		.byte	2
 3821 033b 82        		.byte	-126
 3822 033c 42        		.byte	66
 3823 033d 22        		.byte	34
 3824 033e 42        		.byte	66
 3825 033f 82        		.byte	-126
 3826 0340 02        		.byte	2
 3827 0341 02        		.byte	2
 3828 0342 02        		.byte	2
 3829 0343 82        		.byte	-126
 3830 0344 42        		.byte	66
 3831 0345 22        		.byte	34
 3832 0346 12        		.byte	18
 3833 0347 22        		.byte	34
 3834 0348 42        		.byte	66
 3835 0349 82        		.byte	-126
 3836 034a 02        		.byte	2
 3837 034b 04        		.byte	4
 3838 034c F8        		.byte	-8
 3839 034d 00        		.byte	0
 3840 034e 00        		.byte	0
 3841 034f F8        		.byte	-8
 3842 0350 FC        		.byte	-4
 3843 0351 DE        		.byte	-34
 3844 0352 AE        		.byte	-82
 3845 0353 1E        		.byte	30
 3846 0354 BE        		.byte	-66
 3847 0355 BE        		.byte	-66
 3848 0356 BE        		.byte	-66
 3849 0357 1E        		.byte	30
 3850 0358 AE        		.byte	-82
 3851 0359 DE        		.byte	-34
 3852 035a DE        		.byte	-34
 3853 035b DE        		.byte	-34
 3854 035c BE        		.byte	-66
 3855 035d 7E        		.byte	126
 3856 035e FE        		.byte	-2
 3857 035f FE        		.byte	-2
 3858 0360 DE        		.byte	-34
 3859 0361 DE        		.byte	-34
 3860 0362 FE        		.byte	-2
 3861 0363 FC        		.byte	-4
 3862 0364 F8        		.byte	-8
 3863 0365 00        		.byte	0
 3864 0366 00        		.byte	0
 3865 0367 F8        		.byte	-8
 3866 0368 FC        		.byte	-4
 3867 0369 FE        		.byte	-2
 3868 036a FE        		.byte	-2
 3869 036b 7E        		.byte	126
 3870 036c BE        		.byte	-66
 3871 036d DE        		.byte	-34
 3872 036e BE        		.byte	-66
 3873 036f 7E        		.byte	126
 3874 0370 FE        		.byte	-2
 3875 0371 FE        		.byte	-2
 3876 0372 00        		.byte	0
 3877 0373 00        		.byte	0
 3878 0374 00        		.byte	0
 3879 0375 00        		.byte	0
 3880 0376 00        		.byte	0
 3881 0377 00        		.byte	0
 3882 0378 80        		.byte	-128
 3883 0379 80        		.byte	-128
 3884 037a 40        		.byte	64
 3885 037b 40        		.byte	64
 3886 037c 20        		.byte	32
 3887 037d 20        		.byte	32
 3888 037e 10        		.byte	16
 3889 037f 10        		.byte	16
 3890 0380 08        		.byte	8
 3891 0381 08        		.byte	8
 3892 0382 10        		.byte	16
 3893 0383 10        		.byte	16
 3894 0384 20        		.byte	32
 3895 0385 20        		.byte	32
 3896 0386 40        		.byte	64
 3897 0387 40        		.byte	64
 3898 0388 80        		.byte	-128
 3899 0389 80        		.byte	-128
 3900 038a 80        		.byte	-128
 3901 038b 80        		.byte	-128
 3902 038c C0        		.byte	-64
 3903 038d C0        		.byte	-64
 3904 038e E0        		.byte	-32
 3905 038f E0        		.byte	-32
 3906 0390 F0        		.byte	-16
 3907 0391 F0        		.byte	-16
 3908 0392 F8        		.byte	-8
 3909 0393 F8        		.byte	-8
 3910 0394 F0        		.byte	-16
 3911 0395 F0        		.byte	-16
 3912 0396 E0        		.byte	-32
 3913 0397 E0        		.byte	-32
 3914 0398 C0        		.byte	-64
 3915 0399 C0        		.byte	-64
 3916 039a 80        		.byte	-128
 3917 039b 80        		.byte	-128
 3918 039c 80        		.byte	-128
 3919 039d 80        		.byte	-128
 3920 039e 40        		.byte	64
 3921 039f 40        		.byte	64
 3922 03a0 20        		.byte	32
 3923 03a1 20        		.byte	32
 3924 03a2 10        		.byte	16
 3925 03a3 10        		.byte	16
 3926 03a4 08        		.byte	8
 3927 03a5 08        		.byte	8
 3928 03a6 10        		.byte	16
 3929 03a7 10        		.byte	16
 3930 03a8 20        		.byte	32
 3931 03a9 20        		.byte	32
 3932 03aa 40        		.byte	64
 3933 03ab 40        		.byte	64
 3934 03ac 80        		.byte	-128
 3935 03ad 80        		.byte	-128
 3936 03ae 80        		.byte	-128
 3937 03af 80        		.byte	-128
 3938 03b0 40        		.byte	64
 3939 03b1 C0        		.byte	-64
 3940 03b2 60        		.byte	96
 3941 03b3 A0        		.byte	-96
 3942 03b4 50        		.byte	80
 3943 03b5 B0        		.byte	-80
 3944 03b6 58        		.byte	88
 3945 03b7 A8        		.byte	-88
 3946 03b8 50        		.byte	80
 3947 03b9 B0        		.byte	-80
 3948 03ba 60        		.byte	96
 3949 03bb A0        		.byte	-96
 3950 03bc 40        		.byte	64
 3951 03bd C0        		.byte	-64
 3952 03be 80        		.byte	-128
 3953 03bf 80        		.byte	-128
 3954 03c0 0F        		.byte	15
 3955 03c1 F8        		.byte	-8
 3956 03c2 00        		.byte	0
 3957 03c3 00        		.byte	0
 3958 03c4 00        		.byte	0
 3959 03c5 00        		.byte	0
 3960 03c6 80        		.byte	-128
 3961 03c7 80        		.byte	-128
 3962 03c8 C0        		.byte	-64
 3963 03c9 40        		.byte	64
 3964 03ca C0        		.byte	-64
 3965 03cb C0        		.byte	-64
 3966 03cc 40        		.byte	64
 3967 03cd C0        		.byte	-64
 3968 03ce C0        		.byte	-64
 3969 03cf 40        		.byte	64
 3970 03d0 C0        		.byte	-64
 3971 03d1 C0        		.byte	-64
 3972 03d2 40        		.byte	64
 3973 03d3 C0        		.byte	-64
 3974 03d4 80        		.byte	-128
 3975 03d5 80        		.byte	-128
 3976 03d6 80        		.byte	-128
 3977 03d7 80        		.byte	-128
 3978 03d8 00        		.byte	0
 3979 03d9 01        		.byte	1
 3980 03da 03        		.byte	3
 3981 03db 86        		.byte	-122
 3982 03dc 7C        		.byte	124
 3983 03dd 00        		.byte	0
 3984 03de 00        		.byte	0
 3985 03df 1F        		.byte	31
 3986 03e0 20        		.byte	32
 3987 03e1 44        		.byte	68
 3988 03e2 4A        		.byte	74
 3989 03e3 47        		.byte	71
 3990 03e4 42        		.byte	66
 3991 03e5 42        		.byte	66
 3992 03e6 42        		.byte	66
 3993 03e7 47        		.byte	71
 3994 03e8 4A        		.byte	74
 3995 03e9 44        		.byte	68
 3996 03ea 40        		.byte	64
 3997 03eb 40        		.byte	64
 3998 03ec 40        		.byte	64
 3999 03ed 40        		.byte	64
 4000 03ee 41        		.byte	65
 4001 03ef 42        		.byte	66
 4002 03f0 44        		.byte	68
 4003 03f1 44        		.byte	68
 4004 03f2 40        		.byte	64
 4005 03f3 20        		.byte	32
 4006 03f4 1F        		.byte	31
 4007 03f5 00        		.byte	0
 4008 03f6 00        		.byte	0
 4009 03f7 1F        		.byte	31
 4010 03f8 20        		.byte	32
 4011 03f9 40        		.byte	64
 4012 03fa 41        		.byte	65
 4013 03fb 40        		.byte	64
 4014 03fc 40        		.byte	64
 4015 03fd 40        		.byte	64
 4016 03fe 40        		.byte	64
 4017 03ff 40        		.byte	64
 4018 0400 41        		.byte	65
 4019 0401 40        		.byte	64
 4020 0402 41        		.byte	65
 4021 0403 41        		.byte	65
 4022 0404 4F        		.byte	79
 4023 0405 48        		.byte	72
 4024 0406 48        		.byte	72
 4025 0407 48        		.byte	72
 4026 0408 4F        		.byte	79
 4027 0409 41        		.byte	65
 4028 040a 41        		.byte	65
 4029 040b 20        		.byte	32
 4030 040c 1F        		.byte	31
 4031 040d 00        		.byte	0
 4032 040e 00        		.byte	0
 4033 040f 1F        		.byte	31
 4034 0410 3F        		.byte	63
 4035 0411 7B        		.byte	123
 4036 0412 75        		.byte	117
 4037 0413 78        		.byte	120
 4038 0414 7D        		.byte	125
 4039 0415 7D        		.byte	125
 4040 0416 7D        		.byte	125
 4041 0417 78        		.byte	120
 4042 0418 75        		.byte	117
 4043 0419 7B        		.byte	123
 4044 041a 7F        		.byte	127
 4045 041b 7F        		.byte	127
 4046 041c 7F        		.byte	127
 4047 041d 7F        		.byte	127
 4048 041e 7E        		.byte	126
 4049 041f 7D        		.byte	125
 4050 0420 7B        		.byte	123
 4051 0421 7B        		.byte	123
 4052 0422 7F        		.byte	127
 4053 0423 3F        		.byte	63
 4054 0424 1F        		.byte	31
 4055 0425 00        		.byte	0
 4056 0426 00        		.byte	0
 4057 0427 1F        		.byte	31
 4058 0428 3F        		.byte	63
 4059 0429 7F        		.byte	127
 4060 042a 7E        		.byte	126
 4061 042b 7F        		.byte	127
 4062 042c 7F        		.byte	127
 4063 042d 7F        		.byte	127
 4064 042e 7F        		.byte	127
 4065 042f 7F        		.byte	127
 4066 0430 7E        		.byte	126
 4067 0431 7F        		.byte	127
 4068 0432 00        		.byte	0
 4069 0433 00        		.byte	0
 4070 0434 00        		.byte	0
 4071 0435 00        		.byte	0
 4072 0436 00        		.byte	0
 4073 0437 00        		.byte	0
 4074 0438 88        		.byte	-120
 4075 0439 88        		.byte	-120
 4076 043a 5D        		.byte	93
 4077 043b 5D        		.byte	93
 4078 043c 3E        		.byte	62
 4079 043d 3E        		.byte	62
 4080 043e 7C        		.byte	124
 4081 043f 7C        		.byte	124
 4082 0440 F8        		.byte	-8
 4083 0441 F8        		.byte	-8
 4084 0442 7C        		.byte	124
 4085 0443 7C        		.byte	124
 4086 0444 3E        		.byte	62
 4087 0445 3E        		.byte	62
 4088 0446 5D        		.byte	93
 4089 0447 5D        		.byte	93
 4090 0448 88        		.byte	-120
 4091 0449 88        		.byte	-120
 4092 044a 88        		.byte	-120
 4093 044b 88        		.byte	-120
 4094 044c 55        		.byte	85
 4095 044d 55        		.byte	85
 4096 044e 23        		.byte	35
 4097 044f 23        		.byte	35
 4098 0450 47        		.byte	71
 4099 0451 47        		.byte	71
 4100 0452 8F        		.byte	-113
 4101 0453 8F        		.byte	-113
 4102 0454 47        		.byte	71
 4103 0455 47        		.byte	71
 4104 0456 23        		.byte	35
 4105 0457 23        		.byte	35
 4106 0458 55        		.byte	85
 4107 0459 55        		.byte	85
 4108 045a 88        		.byte	-120
 4109 045b 88        		.byte	-120
 4110 045c 88        		.byte	-120
 4111 045d 88        		.byte	-120
 4112 045e D5        		.byte	-43
 4113 045f D5        		.byte	-43
 4114 0460 E2        		.byte	-30
 4115 0461 E2        		.byte	-30
 4116 0462 C4        		.byte	-60
 4117 0463 C4        		.byte	-60
 4118 0464 88        		.byte	-120
 4119 0465 88        		.byte	-120
 4120 0466 C4        		.byte	-60
 4121 0467 C4        		.byte	-60
 4122 0468 E2        		.byte	-30
 4123 0469 E2        		.byte	-30
 4124 046a D5        		.byte	-43
 4125 046b D5        		.byte	-43
 4126 046c 88        		.byte	-120
 4127 046d 88        		.byte	-120
 4128 046e 88        		.byte	-120
 4129 046f 88        		.byte	-120
 4130 0470 5D        		.byte	93
 4131 0471 D5        		.byte	-43
 4132 0472 6B        		.byte	107
 4133 0473 B6        		.byte	-74
 4134 0474 6D        		.byte	109
 4135 0475 D6        		.byte	-42
 4136 0476 AD        		.byte	-83
 4137 0477 DA        		.byte	-38
 4138 0478 6D        		.byte	109
 4139 0479 D6        		.byte	-42
 4140 047a 6B        		.byte	107
 4141 047b B6        		.byte	-74
 4142 047c 5D        		.byte	93
 4143 047d D5        		.byte	-43
 4144 047e 88        		.byte	-120
 4145 047f 88        		.byte	-120
 4146 0480 1C        		.byte	28
 4147 0481 3F        		.byte	63
 4148 0482 3F        		.byte	63
 4149 0483 70        		.byte	112
 4150 0484 70        		.byte	112
 4151 0485 E1        		.byte	-31
 4152 0486 E0        		.byte	-32
 4153 0487 C1        		.byte	-63
 4154 0488 C1        		.byte	-63
 4155 0489 C0        		.byte	-64
 4156 048a C0        		.byte	-64
 4157 048b C0        		.byte	-64
 4158 048c C0        		.byte	-64
 4159 048d C4        		.byte	-60
 4160 048e E2        		.byte	-30
 4161 048f 7F        		.byte	127
 4162 0490 71        		.byte	113
 4163 0491 20        		.byte	32
 4164 0492 00        		.byte	0
 4165 0493 01        		.byte	1
 4166 0494 01        		.byte	1
 4167 0495 00        		.byte	0
 4168 0496 03        		.byte	3
 4169 0497 03        		.byte	3
 4170 0498 01        		.byte	1
 4171 0499 03        		.byte	3
 4172 049a 03        		.byte	3
 4173 049b 01        		.byte	1
 4174 049c 00        		.byte	0
 4175 049d 00        		.byte	0
 4176 049e 04        		.byte	4
 4177 049f F8        		.byte	-8
 4178 04a0 00        		.byte	0
 4179 04a1 00        		.byte	0
 4180 04a2 F8        		.byte	-8
 4181 04a3 04        		.byte	4
 4182 04a4 20        		.byte	32
 4183 04a5 1F        		.byte	31
 4184 04a6 00        		.byte	0
 4185 04a7 00        		.byte	0
 4186 04a8 1F        		.byte	31
 4187 04a9 20        		.byte	32
 4188 04aa FC        		.byte	-4
 4189 04ab F8        		.byte	-8
 4190 04ac 00        		.byte	0
 4191 04ad 00        		.byte	0
 4192 04ae F8        		.byte	-8
 4193 04af 04        		.byte	4
 4194 04b0 3F        		.byte	63
 4195 04b1 1F        		.byte	31
 4196 04b2 00        		.byte	0
 4197 04b3 00        		.byte	0
 4198 04b4 1F        		.byte	31
 4199 04b5 20        		.byte	32
 4200 04b6 04        		.byte	4
 4201 04b7 F8        		.byte	-8
 4202 04b8 00        		.byte	0
 4203 04b9 00        		.byte	0
 4204 04ba F8        		.byte	-8
 4205 04bb FC        		.byte	-4
 4206 04bc 20        		.byte	32
 4207 04bd 1F        		.byte	31
 4208 04be 00        		.byte	0
 4209 04bf 00        		.byte	0
 4210 04c0 1F        		.byte	31
 4211 04c1 3F        		.byte	63
 4212 04c2 FC        		.byte	-4
 4213 04c3 F8        		.byte	-8
 4214 04c4 00        		.byte	0
 4215 04c5 00        		.byte	0
 4216 04c6 F8        		.byte	-8
 4217 04c7 FC        		.byte	-4
 4218 04c8 3F        		.byte	63
 4219 04c9 1F        		.byte	31
 4220 04ca 00        		.byte	0
 4221 04cb 00        		.byte	0
 4222 04cc 1F        		.byte	31
 4223 04cd 3F        		.byte	63
 4224 04ce FE        		.byte	-2
 4225 04cf 7E        		.byte	126
 4226 04d0 BE        		.byte	-66
 4227 04d1 DE        		.byte	-34
 4228 04d2 EE        		.byte	-18
 4229 04d3 DE        		.byte	-34
 4230 04d4 BE        		.byte	-66
 4231 04d5 7E        		.byte	126
 4232 04d6 FE        		.byte	-2
 4233 04d7 FC        		.byte	-4
 4234 04d8 F8        		.byte	-8
 4235 04d9 00        		.byte	0
 4236 04da 7E        		.byte	126
 4237 04db 7E        		.byte	126
 4238 04dc 70        		.byte	112
 4239 04dd 77        		.byte	119
 4240 04de 77        		.byte	119
 4241 04df 77        		.byte	119
 4242 04e0 70        		.byte	112
 4243 04e1 7E        		.byte	126
 4244 04e2 7E        		.byte	126
 4245 04e3 3F        		.byte	63
 4246 04e4 1F        		.byte	31
 4247 04e5 00        		.byte	0
 4248 04e6 00        		.byte	0
 4249 04e7 00        		.byte	0
 4250 04e8 00        		.byte	0
 4251 04e9 00        		.byte	0
 4252 04ea 00        		.byte	0
 4253 04eb 00        		.byte	0
 4254 04ec 00        		.byte	0
 4255 04ed 00        		.byte	0
 4256 04ee 00        		.byte	0
 4257 04ef 00        		.byte	0
 4258 04f0 00        		.byte	0
 4259 04f1 00        		.byte	0
 4260 04f2 00        		.byte	0
 4261 04f3 00        		.byte	0
 4262 04f4 00        		.byte	0
 4263 04f5 00        		.byte	0
 4264 04f6 00        		.byte	0
 4265 04f7 00        		.byte	0
 4266 04f8 00        		.byte	0
 4267 04f9 00        		.byte	0
 4268 04fa 01        		.byte	1
 4269 04fb 01        		.byte	1
 4270 04fc 02        		.byte	2
 4271 04fd 02        		.byte	2
 4272 04fe 04        		.byte	4
 4273 04ff 04        		.byte	4
 4274 0500 08        		.byte	8
 4275 0501 08        		.byte	8
 4276 0502 04        		.byte	4
 4277 0503 04        		.byte	4
 4278 0504 02        		.byte	2
 4279 0505 02        		.byte	2
 4280 0506 01        		.byte	1
 4281 0507 01        		.byte	1
 4282 0508 00        		.byte	0
 4283 0509 00        		.byte	0
 4284 050a 00        		.byte	0
 4285 050b 00        		.byte	0
 4286 050c 01        		.byte	1
 4287 050d 01        		.byte	1
 4288 050e 02        		.byte	2
 4289 050f 02        		.byte	2
 4290 0510 04        		.byte	4
 4291 0511 04        		.byte	4
 4292 0512 08        		.byte	8
 4293 0513 08        		.byte	8
 4294 0514 04        		.byte	4
 4295 0515 04        		.byte	4
 4296 0516 02        		.byte	2
 4297 0517 02        		.byte	2
 4298 0518 01        		.byte	1
 4299 0519 01        		.byte	1
 4300 051a 00        		.byte	0
 4301 051b 00        		.byte	0
 4302 051c 00        		.byte	0
 4303 051d 00        		.byte	0
 4304 051e 01        		.byte	1
 4305 051f 01        		.byte	1
 4306 0520 03        		.byte	3
 4307 0521 03        		.byte	3
 4308 0522 07        		.byte	7
 4309 0523 07        		.byte	7
 4310 0524 0F        		.byte	15
 4311 0525 0F        		.byte	15
 4312 0526 07        		.byte	7
 4313 0527 07        		.byte	7
 4314 0528 03        		.byte	3
 4315 0529 03        		.byte	3
 4316 052a 01        		.byte	1
 4317 052b 01        		.byte	1
 4318 052c 00        		.byte	0
 4319 052d 00        		.byte	0
 4320 052e 00        		.byte	0
 4321 052f 00        		.byte	0
 4322 0530 01        		.byte	1
 4323 0531 01        		.byte	1
 4324 0532 03        		.byte	3
 4325 0533 02        		.byte	2
 4326 0534 05        		.byte	5
 4327 0535 06        		.byte	6
 4328 0536 0D        		.byte	13
 4329 0537 0A        		.byte	10
 4330 0538 05        		.byte	5
 4331 0539 06        		.byte	6
 4332 053a 03        		.byte	3
 4333 053b 02        		.byte	2
 4334 053c 01        		.byte	1
 4335 053d 01        		.byte	1
 4336 053e 00        		.byte	0
 4337 053f 00        		.byte	0
 4338               		.text
 4339               	.Letext0:
 4340               		.file 2 "c:\\msys64\\mingw64\\avr\\include\\stdint.h"
 4341               		.file 3 "drivers/avr/i2c_master.h"
 4342               		.file 4 "drivers/oled/oled_driver.h"
 4343               		.file 5 "./keyboards/crkbd/keymaps/nahum_qwerty/glcdfont.c"
 4344               		.file 6 "tmk_core/common/timer.h"
 4345               		.file 7 "c:\\msys64\\mingw64\\avr\\include\\avr\\pgmspace.h"
 4346               		.file 8 "c:\\msys64\\mingw64\\avr\\include\\string.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 oled_driver.c
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2      *ABS*:000000000000003e __SP_H__
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:3      *ABS*:000000000000003d __SP_L__
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:4      *ABS*:000000000000003f __SREG__
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:5      *ABS*:0000000000000000 __tmp_reg__
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:6      *ABS*:0000000000000001 __zero_reg__
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:12     .text.i2c_transmit_P.constprop.2:0000000000000000 i2c_transmit_P.constprop.2
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:154    .text.oled_init_user:0000000000000000 oled_init_user
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:173    .text.oled_clear:0000000000000000 oled_clear
                            *COM*:0000000000000200 oled_buffer
                            *COM*:0000000000000002 oled_cursor
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2985   .bss.oled_dirty:0000000000000000 oled_dirty
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:212    .text.oled_init:0000000000000000 oled_init
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2955   .bss.oled_rotation:0000000000000000 oled_rotation
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2949   .bss.oled_rotation_width:0000000000000000 oled_rotation_width
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2912   .progmem.data.display_setup1.2026:0000000000000000 display_setup1.2026
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2905   .progmem.data.display_normal.2027:0000000000000000 display_normal.2027
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2881   .progmem.data.display_setup2.2029:0000000000000000 display_setup2.2029
                            *COM*:0000000000000004 oled_timeout
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2979   .bss.oled_initialized:0000000000000000 oled_initialized
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2973   .bss.oled_active:0000000000000000 oled_active
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2967   .bss.oled_scrolling:0000000000000000 oled_scrolling
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2898   .progmem.data.display_flipped.2028:0000000000000000 display_flipped.2028
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:347    .text.crot:0000000000000000 crot
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:397    .text.oled_set_cursor:0000000000000000 oled_set_cursor
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:448    .text.oled_advance_char:0000000000000000 oled_advance_char
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:513    .text.oled_write_char:0000000000000000 oled_write_char
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:748    .text.oled_advance_page:0000000000000000 oled_advance_page
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2844   .bss.oled_temp_buffer.2102:0000000000000000 oled_temp_buffer.2102
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2993   .progmem.data.font:0000000000000000 font
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:855    .text.oled_write:0000000000000000 oled_write
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:937    .text.oled_write_ln:0000000000000000 oled_write_ln
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:959    .text.oled_pan:0000000000000000 oled_pan
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:1058   .text.oled_read_raw:0000000000000000 oled_read_raw
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:1105   .text.oled_write_raw_byte:0000000000000000 oled_write_raw_byte
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:1172   .text.oled_write_raw:0000000000000000 oled_write_raw
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:1278   .text.oled_write_pixel:0000000000000000 oled_write_pixel
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:1391   .text.oled_write_P:0000000000000000 oled_write_P
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:1464   .text.oled_write_ln_P:0000000000000000 oled_write_ln_P
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:1486   .text.oled_write_raw_P:0000000000000000 oled_write_raw_P
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:1630   .text.oled_on:0000000000000000 oled_on
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2838   .progmem.data.display_on.2192:0000000000000000 display_on.2192
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:1688   .text.oled_render:0000000000000000 oled_render
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2870   .data.display_start.2072:0000000000000000 display_start.2072
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2865   .bss.temp_buffer.2075:0000000000000000 temp_buffer.2075
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2857   .rodata.target_map.2074:0000000000000000 target_map.2074
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2849   .rodata.source_map.2073:0000000000000000 source_map.2073
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2185   .text.oled_off:0000000000000000 oled_off
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2832   .progmem.data.display_off.2196:0000000000000000 display_off.2196
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2233   .text.is_oled_on:0000000000000000 is_oled_on
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2252   .text.oled_set_brightness:0000000000000000 oled_set_brightness
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2961   .data.oled_brightness:0000000000000000 oled_brightness
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2338   .text.oled_get_brightness:0000000000000000 oled_get_brightness
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2357   .text.oled_scroll_set_area:0000000000000000 oled_scroll_set_area
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2937   .bss.oled_scroll_start:0000000000000000 oled_scroll_start
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2931   .data.oled_scroll_end:0000000000000000 oled_scroll_end
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2381   .text.oled_scroll_set_speed:0000000000000000 oled_scroll_set_speed
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2820   .rodata.scroll_remap.2214:0000000000000000 scroll_remap.2214
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2943   .bss.oled_scroll_speed:0000000000000000 oled_scroll_speed
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2411   .text.oled_scroll_right:0000000000000000 oled_scroll_right
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2512   .text.oled_scroll_left:0000000000000000 oled_scroll_left
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2613   .text.oled_scroll_off:0000000000000000 oled_scroll_off
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2814   .progmem.data.display_scroll_off.2226:0000000000000000 display_scroll_off.2226
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2669   .text.oled_max_chars:0000000000000000 oled_max_chars
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2697   .text.oled_max_lines:0000000000000000 oled_max_lines
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2725   .text.oled_task_user:0000000000000000 oled_task_user
C:\Users\renep\AppData\Local\Temp\ccWFBRe1.s:2743   .text.oled_task:0000000000000000 oled_task

UNDEFINED SYMBOLS
i2c_start
i2c_write
i2c_stop
i2c_init
timer_read32
__udivmodhi4
memcmp
memcpy_P
__udivmodqi4
i2c_transmit
i2c_writeReg
__do_copy_data
__do_clear_bss
