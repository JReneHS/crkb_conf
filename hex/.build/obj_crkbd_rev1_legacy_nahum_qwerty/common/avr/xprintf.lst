   1               	# 1 "tmk_core/common/avr/xprintf.S"
   1               	;---------------------------------------------------------------------------;
   0               	
   0               	
   1               	/*
   2               	Copyright 2019 @foostan
   3               	Copyright 2020 Drashna Jaelre <@drashna>
   4               	
   5               	This program is free software: you can redistribute it and/or modify
   6               	it under the terms of the GNU General Public License as published by
   7               	the Free Software Foundation, either version 2 of the License, or
   8               	(at your option) any later version.
   9               	
  10               	This program is distributed in the hope that it will be useful,
  11               	but WITHOUT ANY WARRANTY; without even the implied warranty of
  12               	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13               	GNU General Public License for more details.
  14               	
  15               	You should have received a copy of the GNU General Public License
  16               	along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17               	*/
  18               	
  19               	#pragma once
  20               	
  21               	#include "config_common.h"
   1               	/* Copyright 2015-2018 Jack Humbert
   2               	 *
   3               	 * This program is free software: you can redistribute it and/or modify
   4               	 * it under the terms of the GNU General Public License as published by
   5               	 * the Free Software Foundation, either version 2 of the License, or
   6               	 * (at your option) any later version.
   7               	 *
   8               	 * This program is distributed in the hope that it will be useful,
   9               	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10               	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11               	 * GNU General Public License for more details.
  12               	 *
  13               	 * You should have received a copy of the GNU General Public License
  14               	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15               	 */
  16               	
  17               	#pragma once
  18               	
  19               	/* diode directions */
  20               	#define COL2ROW 0
  21               	#define ROW2COL 1
  22               	
  23               	// useful for direct pin mapping
  24               	#define NO_PIN (pin_t)(~0)
  25               	
  26               	#ifdef __AVR__
  27               	#    ifndef __ASSEMBLER__
  28               	#        include <avr/io.h>
  29               	#    endif
  30               	#    define PORT_SHIFTER 4  // this may be 4 for all AVR chips
  31               	
  32               	// If you want to add more to this list, reference the PINx definitions in these header
  33               	// files: https://github.com/vancegroup-mirrors/avr-libc/tree/master/avr-libc/include/avr
  34               	
  35               	#    if defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__)
  36               	#        define ADDRESS_BASE 0x00
  37               	#        define PINB_ADDRESS 0x3
  38               	#        define PINC_ADDRESS 0x6
  39               	#        define PIND_ADDRESS 0x9
  40               	#        define PINE_ADDRESS 0xC
  41               	#        define PINF_ADDRESS 0xF
  42               	#    elif defined(__AVR_ATmega32U2__) || defined(__AVR_ATmega16U2__)
  43               	#        define ADDRESS_BASE 0x00
  44               	#        define PINB_ADDRESS 0x3
  45               	#        define PINC_ADDRESS 0x6
  46               	#        define PIND_ADDRESS 0x9
  47               	#    elif defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_AT90USB1286__
  48               	#        define ADDRESS_BASE 0x00
  49               	#        define PINA_ADDRESS 0x0
  50               	#        define PINB_ADDRESS 0x3
  51               	#        define PINC_ADDRESS 0x6
  52               	#        define PIND_ADDRESS 0x9
  53               	#        define PINE_ADDRESS 0xC
  54               	#        define PINF_ADDRESS 0xF
  55               	#    elif defined(__AVR_ATmega32A__)
  56               	#        define ADDRESS_BASE 0x10
  57               	#        define PIND_ADDRESS 0x0
  58               	#        define PINC_ADDRESS 0x3
  59               	#        define PINB_ADDRESS 0x6
  60               	#        define PINA_ADDRESS 0x9
  61               	#    elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega328__)
  62               	#        define ADDRESS_BASE 0x00
  63               	#        define PINB_ADDRESS 0x3
  64               	#        define PINC_ADDRESS 0x6
  65               	#        define PIND_ADDRESS 0x9
  66               	#    elif defined(__AVR_ATtiny85__)
  67               	#        define ADDRESS_BASE 0x10
  68               	#        define PINB_ADDRESS 0x6
  69               	#    else
  70               	#        error "Pins are not defined"
  71               	#    endif
  72               	
  73               	/* I/O pins */
  74               	#    define PINDEF(port, pin) ((PIN##port##_ADDRESS << PORT_SHIFTER) | pin)
  75               	
  76               	#    ifdef PORTA
  77               	#        define A0 PINDEF(A, 0)
  78               	#        define A1 PINDEF(A, 1)
  79               	#        define A2 PINDEF(A, 2)
  80               	#        define A3 PINDEF(A, 3)
  81               	#        define A4 PINDEF(A, 4)
  82               	#        define A5 PINDEF(A, 5)
  83               	#        define A6 PINDEF(A, 6)
  84               	#        define A7 PINDEF(A, 7)
  85               	#    endif
  86               	#    ifdef PORTB
  87               	#        define B0 PINDEF(B, 0)
  88               	#        define B1 PINDEF(B, 1)
  89               	#        define B2 PINDEF(B, 2)
  90               	#        define B3 PINDEF(B, 3)
  91               	#        define B4 PINDEF(B, 4)
  92               	#        define B5 PINDEF(B, 5)
  93               	#        define B6 PINDEF(B, 6)
  94               	#        define B7 PINDEF(B, 7)
  95               	#    endif
  96               	#    ifdef PORTC
  97               	#        define C0 PINDEF(C, 0)
  98               	#        define C1 PINDEF(C, 1)
  99               	#        define C2 PINDEF(C, 2)
 100               	#        define C3 PINDEF(C, 3)
 101               	#        define C4 PINDEF(C, 4)
 102               	#        define C5 PINDEF(C, 5)
 103               	#        define C6 PINDEF(C, 6)
 104               	#        define C7 PINDEF(C, 7)
 105               	#    endif
 106               	#    ifdef PORTD
 107               	#        define D0 PINDEF(D, 0)
 108               	#        define D1 PINDEF(D, 1)
 109               	#        define D2 PINDEF(D, 2)
 110               	#        define D3 PINDEF(D, 3)
 111               	#        define D4 PINDEF(D, 4)
 112               	#        define D5 PINDEF(D, 5)
 113               	#        define D6 PINDEF(D, 6)
 114               	#        define D7 PINDEF(D, 7)
 115               	#    endif
 116               	#    ifdef PORTE
 117               	#        define E0 PINDEF(E, 0)
 118               	#        define E1 PINDEF(E, 1)
 119               	#        define E2 PINDEF(E, 2)
 120               	#        define E3 PINDEF(E, 3)
 121               	#        define E4 PINDEF(E, 4)
 122               	#        define E5 PINDEF(E, 5)
 123               	#        define E6 PINDEF(E, 6)
 124               	#        define E7 PINDEF(E, 7)
 125               	#    endif
 126               	#    ifdef PORTF
 127               	#        define F0 PINDEF(F, 0)
 128               	#        define F1 PINDEF(F, 1)
 129               	#        define F2 PINDEF(F, 2)
 130               	#        define F3 PINDEF(F, 3)
 131               	#        define F4 PINDEF(F, 4)
 132               	#        define F5 PINDEF(F, 5)
 133               	#        define F6 PINDEF(F, 6)
 134               	#        define F7 PINDEF(F, 7)
 135               	#    endif
 136               	
 137               	#    ifndef __ASSEMBLER__
 138               	#        define _PIN_ADDRESS(p, offset) _SFR_IO8(ADDRESS_BASE + ((p) >> PORT_SHIFTER) + (offset))
 139               	// Port X Input Pins Address
 140               	#        define PINx_ADDRESS(p) _PIN_ADDRESS(p, 0)
 141               	// Port X Data Direction Register,  0:input 1:output
 142               	#        define DDRx_ADDRESS(p) _PIN_ADDRESS(p, 1)
 143               	// Port X Data Register
 144               	#        define PORTx_ADDRESS(p) _PIN_ADDRESS(p, 2)
 145               	#    endif
 146               	
 147               	#elif defined(PROTOCOL_CHIBIOS)
 148               	// Defines mapping for Proton C replacement
 149               	#    ifdef CONVERT_TO_PROTON_C
 150               	// Left side (front)
 151               	#        define D3 PAL_LINE(GPIOA, 9)
 152               	#        define D2 PAL_LINE(GPIOA, 10)
 153               	//      GND
 154               	//      GND
 155               	#        define D1 PAL_LINE(GPIOB, 7)
 156               	#        define D0 PAL_LINE(GPIOB, 6)
 157               	#        define D4 PAL_LINE(GPIOB, 5)
 158               	#        define C6 PAL_LINE(GPIOB, 4)
 159               	#        define D7 PAL_LINE(GPIOB, 3)
 160               	#        define E6 PAL_LINE(GPIOB, 2)
 161               	#        define B4 PAL_LINE(GPIOB, 1)
 162               	#        define B5 PAL_LINE(GPIOB, 0)
 163               	
 164               	// Right side (front)
 165               	//      RAW
 166               	//      GND
 167               	//      RESET
 168               	//      VCC
 169               	#        define F4 PAL_LINE(GPIOA, 2)
 170               	#        define F5 PAL_LINE(GPIOA, 1)
 171               	#        define F6 PAL_LINE(GPIOA, 0)
 172               	#        define F7 PAL_LINE(GPIOB, 8)
 173               	#        define B1 PAL_LINE(GPIOB, 13)
 174               	#        define B3 PAL_LINE(GPIOB, 14)
 175               	#        define B2 PAL_LINE(GPIOB, 15)
 176               	#        define B6 PAL_LINE(GPIOB, 9)
 177               	
 178               	// LEDs (only D5/C13 uses an actual LED)
 179               	#        ifdef CONVERT_TO_PROTON_C_RXLED
 180               	#            define D5 PAL_LINE(GPIOC, 14)
 181               	#            define B0 PAL_LINE(GPIOC, 13)
 182               	#        else
 183               	#            define D5 PAL_LINE(GPIOC, 13)
 184               	#            define B0 PAL_LINE(GPIOC, 14)
 185               	#        endif
 186               	#    else
 187               	#        define A0 PAL_LINE(GPIOA, 0)
 188               	#        define A1 PAL_LINE(GPIOA, 1)
 189               	#        define A2 PAL_LINE(GPIOA, 2)
 190               	#        define A3 PAL_LINE(GPIOA, 3)
 191               	#        define A4 PAL_LINE(GPIOA, 4)
 192               	#        define A5 PAL_LINE(GPIOA, 5)
 193               	#        define A6 PAL_LINE(GPIOA, 6)
 194               	#        define A7 PAL_LINE(GPIOA, 7)
 195               	#        define A8 PAL_LINE(GPIOA, 8)
 196               	#        define A9 PAL_LINE(GPIOA, 9)
 197               	#        define A10 PAL_LINE(GPIOA, 10)
 198               	#        define A11 PAL_LINE(GPIOA, 11)
 199               	#        define A12 PAL_LINE(GPIOA, 12)
 200               	#        define A13 PAL_LINE(GPIOA, 13)
 201               	#        define A14 PAL_LINE(GPIOA, 14)
 202               	#        define A15 PAL_LINE(GPIOA, 15)
 203               	#        define B0 PAL_LINE(GPIOB, 0)
 204               	#        define B1 PAL_LINE(GPIOB, 1)
 205               	#        define B2 PAL_LINE(GPIOB, 2)
 206               	#        define B3 PAL_LINE(GPIOB, 3)
 207               	#        define B4 PAL_LINE(GPIOB, 4)
 208               	#        define B5 PAL_LINE(GPIOB, 5)
 209               	#        define B6 PAL_LINE(GPIOB, 6)
 210               	#        define B7 PAL_LINE(GPIOB, 7)
 211               	#        define B8 PAL_LINE(GPIOB, 8)
 212               	#        define B9 PAL_LINE(GPIOB, 9)
 213               	#        define B10 PAL_LINE(GPIOB, 10)
 214               	#        define B11 PAL_LINE(GPIOB, 11)
 215               	#        define B12 PAL_LINE(GPIOB, 12)
 216               	#        define B13 PAL_LINE(GPIOB, 13)
 217               	#        define B14 PAL_LINE(GPIOB, 14)
 218               	#        define B15 PAL_LINE(GPIOB, 15)
 219               	#        define B16 PAL_LINE(GPIOB, 16)
 220               	#        define B17 PAL_LINE(GPIOB, 17)
 221               	#        define B18 PAL_LINE(GPIOB, 18)
 222               	#        define B19 PAL_LINE(GPIOB, 19)
 223               	#        define C0 PAL_LINE(GPIOC, 0)
 224               	#        define C1 PAL_LINE(GPIOC, 1)
 225               	#        define C2 PAL_LINE(GPIOC, 2)
 226               	#        define C3 PAL_LINE(GPIOC, 3)
 227               	#        define C4 PAL_LINE(GPIOC, 4)
 228               	#        define C5 PAL_LINE(GPIOC, 5)
 229               	#        define C6 PAL_LINE(GPIOC, 6)
 230               	#        define C7 PAL_LINE(GPIOC, 7)
 231               	#        define C8 PAL_LINE(GPIOC, 8)
 232               	#        define C9 PAL_LINE(GPIOC, 9)
 233               	#        define C10 PAL_LINE(GPIOC, 10)
 234               	#        define C11 PAL_LINE(GPIOC, 11)
 235               	#        define C12 PAL_LINE(GPIOC, 12)
 236               	#        define C13 PAL_LINE(GPIOC, 13)
 237               	#        define C14 PAL_LINE(GPIOC, 14)
 238               	#        define C15 PAL_LINE(GPIOC, 15)
 239               	#        define D0 PAL_LINE(GPIOD, 0)
 240               	#        define D1 PAL_LINE(GPIOD, 1)
 241               	#        define D2 PAL_LINE(GPIOD, 2)
 242               	#        define D3 PAL_LINE(GPIOD, 3)
 243               	#        define D4 PAL_LINE(GPIOD, 4)
 244               	#        define D5 PAL_LINE(GPIOD, 5)
 245               	#        define D6 PAL_LINE(GPIOD, 6)
 246               	#        define D7 PAL_LINE(GPIOD, 7)
 247               	#        define D8 PAL_LINE(GPIOD, 8)
 248               	#        define D9 PAL_LINE(GPIOD, 9)
 249               	#        define D10 PAL_LINE(GPIOD, 10)
 250               	#        define D11 PAL_LINE(GPIOD, 11)
 251               	#        define D12 PAL_LINE(GPIOD, 12)
 252               	#        define D13 PAL_LINE(GPIOD, 13)
 253               	#        define D14 PAL_LINE(GPIOD, 14)
 254               	#        define D15 PAL_LINE(GPIOD, 15)
 255               	#        define E0 PAL_LINE(GPIOE, 0)
 256               	#        define E1 PAL_LINE(GPIOE, 1)
 257               	#        define E2 PAL_LINE(GPIOE, 2)
 258               	#        define E3 PAL_LINE(GPIOE, 3)
 259               	#        define E4 PAL_LINE(GPIOE, 4)
 260               	#        define E5 PAL_LINE(GPIOE, 5)
 261               	#        define E6 PAL_LINE(GPIOE, 6)
 262               	#        define E7 PAL_LINE(GPIOE, 7)
 263               	#        define E8 PAL_LINE(GPIOE, 8)
 264               	#        define E9 PAL_LINE(GPIOE, 9)
 265               	#        define E10 PAL_LINE(GPIOE, 10)
 266               	#        define E11 PAL_LINE(GPIOE, 11)
 267               	#        define E12 PAL_LINE(GPIOE, 12)
 268               	#        define E13 PAL_LINE(GPIOE, 13)
 269               	#        define E14 PAL_LINE(GPIOE, 14)
 270               	#        define E15 PAL_LINE(GPIOE, 15)
 271               	#        define F0 PAL_LINE(GPIOF, 0)
 272               	#        define F1 PAL_LINE(GPIOF, 1)
 273               	#        define F2 PAL_LINE(GPIOF, 2)
 274               	#        define F3 PAL_LINE(GPIOF, 3)
 275               	#        define F4 PAL_LINE(GPIOF, 4)
 276               	#        define F5 PAL_LINE(GPIOF, 5)
 277               	#        define F6 PAL_LINE(GPIOF, 6)
 278               	#        define F7 PAL_LINE(GPIOF, 7)
 279               	#        define F8 PAL_LINE(GPIOF, 8)
 280               	#        define F9 PAL_LINE(GPIOF, 9)
 281               	#        define F10 PAL_LINE(GPIOF, 10)
 282               	#        define F11 PAL_LINE(GPIOF, 11)
 283               	#        define F12 PAL_LINE(GPIOF, 12)
 284               	#        define F13 PAL_LINE(GPIOF, 13)
 285               	#        define F14 PAL_LINE(GPIOF, 14)
 286               	#        define F15 PAL_LINE(GPIOF, 15)
 287               	#    endif
 288               	#endif
 289               	
 290               	/* USART configuration */
 291               	#ifdef BLUETOOTH_ENABLE
 292               	#    ifdef __AVR_ATmega32U4__
 293               	#        define SERIAL_UART_BAUD 9600
 294               	#        define SERIAL_UART_DATA UDR1
 295               	#        define SERIAL_UART_UBRR (F_CPU / (16UL * SERIAL_UART_BAUD) - 1)
 296               	#        define SERIAL_UART_RXD_VECT USART1_RX_vect
 297               	#        define SERIAL_UART_TXD_READY (UCSR1A & _BV(UDRE1))
 298               	#        define SERIAL_UART_INIT()                  \
 299               	            do {                                    \
 300               	                /* baud rate */                     \
 301               	                UBRR1L = SERIAL_UART_UBRR;          \
 302               	                /* baud rate */                     \
 303               	                UBRR1H = SERIAL_UART_UBRR >> 8;     \
 304               	                /* enable TX */                     \
 305               	                UCSR1B = _BV(TXEN1);                \
 306               	                /* 8-bit data */                    \
 307               	                UCSR1C = _BV(UCSZ11) | _BV(UCSZ10); \
 308               	                sei();                              \
 309               	            } while (0)
 310               	#    elif defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_AT90USB1286__
 311               	#        define SERIAL_UART_BAUD 115200
 312               	#        define SERIAL_UART_DATA UDR1
 313               	/* UBRR should result in ~16 and set UCSR1A = _BV(U2X1) as per rn42 documentation. HC05 needs baudr
 314               	#        define SERIAL_UART_UBRR (F_CPU / (8UL * SERIAL_UART_BAUD) - 1)
 315               	#        define SERIAL_UART_RXD_VECT USART1_RX_vect
 316               	#        define SERIAL_UART_TXD_READY (UCSR1A & _BV(UDRE1))
 317               	#        define SERIAL_UART_INIT()                  \
 318               	            do {                                    \
 319               	                UCSR1A = _BV(U2X1);                 \
 320               	                /* baud rate */                     \
 321               	                UBRR1L = SERIAL_UART_UBRR;          \
 322               	                /* baud rate */                     \
 323               	                UBRR1H = SERIAL_UART_UBRR >> 8;     \
 324               	                /* enable TX */                     \
 325               	                UCSR1B = _BV(TXEN1);                \
 326               	                /* 8-bit data */                    \
 327               	                UCSR1C = _BV(UCSZ11) | _BV(UCSZ10); \
 328               	                sei();                              \
 329               	            } while (0)
 330               	#    else
 331               	#        error "USART configuration is needed."
 332               	#    endif
 333               	#endif
 334               	
 335               	#define API_SYSEX_MAX_SIZE 32
 336               	
 337               	#include "song_list.h"
   1               	/* Any song or sound without a license explicitly stated is:
   2               	 *
   3               	 * Copyright 2016 Jack Humbert
   4               	 * Copyright 2017 Zach White
   5               	 *
   6               	 * This program is free software: you can redistribute it and/or modify
   7               	 * it under the terms of the GNU General Public License as published by
   8               	 * the Free Software Foundation, either version 2 of the License, or
   9               	 * (at your option) any later version.
  10               	 *
  11               	 * This program is distributed in the hope that it will be useful,
  12               	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13               	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14               	 * GNU General Public License for more details.
  15               	 *
  16               	 * You should have received a copy of the GNU General Public License
  17               	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18               	 */
  19               	#pragma once
  20               	
  21               	#include "musical_notes.h"
   1               	/* Copyright 2016 Jack Humbert
  22               	
  22               	
   1               	/*
   2               	Copyright 2019 @foostan
   3               	Copyright 2020 Drashna Jaelre <@drashna>
   4               	
   5               	This program is free software: you can redistribute it and/or modify
   6               	it under the terms of the GNU General Public License as published by
   7               	the Free Software Foundation, either version 2 of the License, or
   8               	(at your option) any later version.
   9               	
  10               	This program is distributed in the hope that it will be useful,
  11               	but WITHOUT ANY WARRANTY; without even the implied warranty of
  12               	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13               	GNU General Public License for more details.
  14               	
  15               	You should have received a copy of the GNU General Public License
  16               	along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17               	*/
  18               	
  19               	#pragma once
  20               	
   1               	/*
   2               	Copyright 2012 Jun Wako <wakojun@gmail.com>
   3               	Copyright 2015 Jack Humbert
   4               	
   5               	This program is free software: you can redistribute it and/or modify
   6               	it under the terms of the GNU General Public License as published by
   7               	the Free Software Foundation, either version 2 of the License, or
   8               	(at your option) any later version.
   9               	
  10               	This program is distributed in the hope that it will be useful,
  11               	but WITHOUT ANY WARRANTY; without even the implied warranty of
  12               	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13               	GNU General Public License for more details.
  14               	
  15               	You should have received a copy of the GNU General Public License
  16               	along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17               	*/
  18               	
  19               	#pragma once
  20               	
  21               	#include <serial_config.h>
   1               	/*
  22               	
   1               	#pragma once
   2               	
   1               	/*
   2               	Copyright 2019 @foostan
   3               	Copyright 2020 Drashna Jaelre <@drashna>
   4               	
   5               	This program is free software: you can redistribute it and/or modify
   6               	it under the terms of the GNU General Public License as published by
   7               	the Free Software Foundation, either version 2 of the License, or
   8               	(at your option) any later version.
   9               	
  10               	This program is distributed in the hope that it will be useful,
  11               	but WITHOUT ANY WARRANTY; without even the implied warranty of
  12               	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13               	GNU General Public License for more details.
  14               	
  15               	You should have received a copy of the GNU General Public License
  16               	along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17               	*/
  18               	
  19               	#pragma once
  20               	
   2               	; Extended itoa, puts, printf and atoi                     (C)ChaN, 2011
   3               	;---------------------------------------------------------------------------;
   4               	
  19               	.list
  20               	
  21               	#ifdef SPM_PAGESIZE	// Recent devices have "lpm Rd,Z+" and "movw".
  22               	.macro	_LPMI	reg
  23               		lpm	\reg, Z+
  24               	.endm
  25               	.macro	_MOVW	dh,dl, sh,sl
  26               		movw	\dl, \sl
  27               	.endm
  28               	#else			// Earlier devices do not have "lpm Rd,Z+" nor "movw".
  29               	.macro	_LPMI	reg
  30               		lpm
  31               		mov	\reg, r0
  32               		adiw	ZL, 1
  33               	.endm
  34               	.macro	_MOVW	dh,dl, sh,sl
  35               		mov	\dl, \sl
  36               		mov	\dh, \sh
  37               	.endm
  38               	#endif
  39               	
  40               	
  41               	
  42               	;---------------------------------------------------------------------------
  43               	; Stub function to forward to user output function
  44               	;
  45               	;Prototype: void xputc (char chr	// a character to be output
  46               	;			);
  47               	;Size: 12/12 words
  48               	
  49               	.section .bss
  50               	.global xfunc_out	; xfunc_out must be initialized before using this module.
  51 0000 0000      	xfunc_out:	.ds.w	1
  52               	.section .text
  53               	
  54               	
  55               	.func xputc
  56               	.global xputc
  57               	xputc:
  58               	#if CR_CRLF
  59:tmk_core/common/avr/xprintf.S **** 	cpi	r24, 10		;LF --> CRLF
  60:tmk_core/common/avr/xprintf.S **** 	brne	1f		;
  61:tmk_core/common/avr/xprintf.S **** 	ldi	r24, 13		;
  62:tmk_core/common/avr/xprintf.S **** 	rcall	1f		;
  63:tmk_core/common/avr/xprintf.S **** 	ldi	r24, 10		;/
  64:tmk_core/common/avr/xprintf.S **** 1:
  65:tmk_core/common/avr/xprintf.S **** #endif
  66:tmk_core/common/avr/xprintf.S **** 	push	ZH
  67:tmk_core/common/avr/xprintf.S **** 	push	ZL
  68:tmk_core/common/avr/xprintf.S **** 	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
  69:tmk_core/common/avr/xprintf.S **** 	lds	ZH, xfunc_out+1	;/
  70:tmk_core/common/avr/xprintf.S **** 	sbiw	ZL, 0		;Skip if null
  71:tmk_core/common/avr/xprintf.S **** 	breq	2f		;/
  72:tmk_core/common/avr/xprintf.S **** 	icall
  73:tmk_core/common/avr/xprintf.S **** 2:	pop	ZL
  74:tmk_core/common/avr/xprintf.S **** 	pop	ZH
  75:tmk_core/common/avr/xprintf.S **** 	ret
  76               	.endfunc
  77               	
  78               	
  79               	
  80               	;---------------------------------------------------------------------------
  81               	; Direct ROM string output
  82               	;
  83               	;Prototype: void xputs (const char *str_p // rom string to be output
  84               	;			);
  85               	
  86               	.func xputs
  87               	.global xputs
  88               	xputs:
  89:tmk_core/common/avr/xprintf.S **** 	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
  90:tmk_core/common/avr/xprintf.S **** 1:	_LPMI	r24
  91:tmk_core/common/avr/xprintf.S **** 	cpi	r24, 0
  92:tmk_core/common/avr/xprintf.S **** 	breq	2f
  93:tmk_core/common/avr/xprintf.S **** 	rcall	xputc
  94:tmk_core/common/avr/xprintf.S **** 	rjmp	1b
  95:tmk_core/common/avr/xprintf.S **** 2:	ret
  96               	.endfunc
  97               	
  98               	
  99               	;---------------------------------------------------------------------------
 100               	; Extended direct numeral string output (32bit version)
 101               	;
 102               	;Prototype: void xitoa (long value,	// value to be output
 103               	;                       char radix,	// radix
 104               	;                       char width);	// minimum width
 105               	;
 106               	
 107               	.func xitoa
 108               	.global xitoa
 109               	xitoa:
 110               					;r25:r22 = value, r20 = base, r18 = digits
 111:tmk_core/common/avr/xprintf.S **** 	clr	r31		;r31 = stack level
 112:tmk_core/common/avr/xprintf.S **** 	ldi	r30, ' '	;r30 = sign
 113:tmk_core/common/avr/xprintf.S **** 	ldi	r19, ' '	;r19 = filler
 114:tmk_core/common/avr/xprintf.S **** 	sbrs	r20, 7		;When base indicates signd format and the value
 115:tmk_core/common/avr/xprintf.S **** 	rjmp	0f		;is minus, add a '-'.
 116:tmk_core/common/avr/xprintf.S **** 	neg	r20		;
 117:tmk_core/common/avr/xprintf.S **** 	sbrs	r25, 7		;
 118:tmk_core/common/avr/xprintf.S **** 	rjmp	0f		;
 119:tmk_core/common/avr/xprintf.S **** 	ldi	r30, '-'	;
 120:tmk_core/common/avr/xprintf.S **** 	com	r22		;
 121:tmk_core/common/avr/xprintf.S **** 	com	r23		;
 122:tmk_core/common/avr/xprintf.S **** 	com	r24		;
 123:tmk_core/common/avr/xprintf.S **** 	com	r25		;
 124:tmk_core/common/avr/xprintf.S **** 	adc	r22, r1		;
 125:tmk_core/common/avr/xprintf.S **** 	adc	r23, r1		;
 126:tmk_core/common/avr/xprintf.S **** 	adc	r24, r1		;
 127:tmk_core/common/avr/xprintf.S **** 	adc	r25, r1		;/
 128:tmk_core/common/avr/xprintf.S **** 0:	sbrs	r18, 7		;When digits indicates zero filled,
 129:tmk_core/common/avr/xprintf.S **** 	rjmp	1f		;filler is '0'.
 130:tmk_core/common/avr/xprintf.S **** 	neg	r18		;
 131:tmk_core/common/avr/xprintf.S **** 	ldi	r19, '0'	;/
 132               					;----- string conversion loop
 133:tmk_core/common/avr/xprintf.S **** 1:	ldi	r21, 32		;r26 = r25:r22 % r20
 134:tmk_core/common/avr/xprintf.S **** 	clr	r26		;r25:r22 /= r20
 135:tmk_core/common/avr/xprintf.S **** 2:	lsl	r22		;
 136:tmk_core/common/avr/xprintf.S **** 	rol	r23		;
 137:tmk_core/common/avr/xprintf.S **** 	rol	r24		;
 138:tmk_core/common/avr/xprintf.S **** 	rol	r25		;
 139:tmk_core/common/avr/xprintf.S **** 	rol	r26		;
 140:tmk_core/common/avr/xprintf.S **** 	cp	r26, r20	;
 141:tmk_core/common/avr/xprintf.S **** 	brcs	3f		;
 142:tmk_core/common/avr/xprintf.S **** 	sub	r26, r20	;
 143:tmk_core/common/avr/xprintf.S **** 	inc	r22		;
 144:tmk_core/common/avr/xprintf.S **** 3:	dec	r21		;
 145:tmk_core/common/avr/xprintf.S **** 	brne	2b		;/
 146:tmk_core/common/avr/xprintf.S **** 	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
 147:tmk_core/common/avr/xprintf.S **** 	brcs	4f		;
 148:tmk_core/common/avr/xprintf.S **** 	subi	r26, -7		;
 149:tmk_core/common/avr/xprintf.S **** 4:	subi	r26, -'0'	;/
 150:tmk_core/common/avr/xprintf.S **** 	push	r26		;Stack it
 151:tmk_core/common/avr/xprintf.S **** 	inc	r31		;/
 152:tmk_core/common/avr/xprintf.S **** 	cp	r22, r1		;Repeat until r25:r22 gets zero
 153:tmk_core/common/avr/xprintf.S **** 	cpc	r23, r1		;
 154:tmk_core/common/avr/xprintf.S **** 	cpc	r24, r1		;
 155:tmk_core/common/avr/xprintf.S **** 	cpc	r25, r1		;
 156:tmk_core/common/avr/xprintf.S **** 	brne	1b		;/
 157               	
 158:tmk_core/common/avr/xprintf.S **** 	cpi	r30, '-'	;Minus sign if needed
 159:tmk_core/common/avr/xprintf.S **** 	brne	5f		;
 160:tmk_core/common/avr/xprintf.S **** 	push	r30		;
 161:tmk_core/common/avr/xprintf.S **** 	inc	r31		;/
 162:tmk_core/common/avr/xprintf.S **** 5:	cp	r31, r18	;Filler
 163:tmk_core/common/avr/xprintf.S **** 	brcc	6f		;
 164:tmk_core/common/avr/xprintf.S **** 	push	r19		;
 165:tmk_core/common/avr/xprintf.S **** 	inc	r31		;
 166:tmk_core/common/avr/xprintf.S **** 	rjmp	5b		;/
 167               	
 168:tmk_core/common/avr/xprintf.S **** 6:	pop	r24		;Flush stacked digits and exit
 169:tmk_core/common/avr/xprintf.S **** 	rcall	xputc		;
 170:tmk_core/common/avr/xprintf.S **** 	dec	r31		;
 171:tmk_core/common/avr/xprintf.S **** 	brne	6b		;/
 172               	
 173:tmk_core/common/avr/xprintf.S **** 	ret
 174               	.endfunc
 175               	
 176               	
 177               	
 178               	;---------------------------------------------------------------------------;
 179               	; Formatted string output (16/32bit version)
 180               	;
 181               	;Prototype:
 182               	; void __xprintf (const char *format_p, ...);
 183               	; void __xsprintf(char*, const char *format_p, ...);
 184               	; void __xfprintf(void(*func)(char), const char *format_p, ...);
 185               	;
 186               	
 187               	#if USE_XPRINTF
 188               	
 189               	.func xvprintf
 190               	xvprintf:
 191:tmk_core/common/avr/xprintf.S **** 	ld	ZL, Y+		;Z = pointer to format string
 192:tmk_core/common/avr/xprintf.S **** 	ld	ZH, Y+		;/
 193               	
 194:tmk_core/common/avr/xprintf.S **** 0:	_LPMI	r24		;Get a format char
 195:tmk_core/common/avr/xprintf.S **** 	cpi	r24, 0		;End of format string?
 196:tmk_core/common/avr/xprintf.S **** 	breq	90f		;/
 197:tmk_core/common/avr/xprintf.S **** 	cpi	r24, '%'	;Is format?
 198:tmk_core/common/avr/xprintf.S **** 	breq	20f		;/
 199:tmk_core/common/avr/xprintf.S **** 1:	rcall	xputc		;Put a normal character
 200:tmk_core/common/avr/xprintf.S **** 	rjmp	0b		;/
 201:tmk_core/common/avr/xprintf.S **** 90:	ret
 202               	
 203:tmk_core/common/avr/xprintf.S **** 20:	ldi	r18, 0		;r18: digits
 204:tmk_core/common/avr/xprintf.S **** 	clt			;T: filler
 205:tmk_core/common/avr/xprintf.S **** 	_LPMI	r21		;Get flags
 206:tmk_core/common/avr/xprintf.S **** 	cpi	r21, '%'	;Is a %?
 207:tmk_core/common/avr/xprintf.S **** 	breq	1b		;/
 208:tmk_core/common/avr/xprintf.S **** 	cpi	r21, '0'	;Zero filled?
 209:tmk_core/common/avr/xprintf.S **** 	brne	23f		;
 210:tmk_core/common/avr/xprintf.S **** 	set			;/
 211:tmk_core/common/avr/xprintf.S **** 22:	_LPMI	r21		;Get width
 212:tmk_core/common/avr/xprintf.S **** 23:	cpi	r21, '9'+1	;
 213:tmk_core/common/avr/xprintf.S **** 	brcc	24f		;
 214:tmk_core/common/avr/xprintf.S **** 	subi	r21, '0'	;
 215:tmk_core/common/avr/xprintf.S **** 	brcs	90b		;
 216:tmk_core/common/avr/xprintf.S **** 	lsl	r18		;
 217:tmk_core/common/avr/xprintf.S **** 	mov	r0, r18		;
 218:tmk_core/common/avr/xprintf.S **** 	lsl	r18		;
 219:tmk_core/common/avr/xprintf.S **** 	lsl	r18		;
 220:tmk_core/common/avr/xprintf.S **** 	add	r18, r0		;
 221:tmk_core/common/avr/xprintf.S **** 	add	r18, r21	;
 222:tmk_core/common/avr/xprintf.S **** 	rjmp	22b		;/
 223               	
 224:tmk_core/common/avr/xprintf.S **** 24:	brtc	25f		;get value (low word)
 225:tmk_core/common/avr/xprintf.S **** 	neg	r18		;
 226:tmk_core/common/avr/xprintf.S **** 25:	ld	r24, Y+		;
 227:tmk_core/common/avr/xprintf.S **** 	ld	r25, Y+		;/
 228:tmk_core/common/avr/xprintf.S **** 	cpi	r21, 'c'	;Is type character?
 229:tmk_core/common/avr/xprintf.S **** 	breq	1b		;/
 230:tmk_core/common/avr/xprintf.S **** 	cpi	r21, 's'	;Is type RAM string?
 231:tmk_core/common/avr/xprintf.S **** 	breq	50f		;/
 232:tmk_core/common/avr/xprintf.S **** 	cpi	r21, 'S'	;Is type ROM string?
 233:tmk_core/common/avr/xprintf.S **** 	breq	60f		;/
 234:tmk_core/common/avr/xprintf.S **** 	_MOVW	r23,r22,r25,r24	;r25:r22 = value
 235:tmk_core/common/avr/xprintf.S **** 	clr	r24		;
 236:tmk_core/common/avr/xprintf.S **** 	clr	r25		;
 237:tmk_core/common/avr/xprintf.S **** 	clt			;/
 238:tmk_core/common/avr/xprintf.S **** 	cpi	r21, 'l'	;Is long int?
 239:tmk_core/common/avr/xprintf.S **** 	brne	26f		;
 240:tmk_core/common/avr/xprintf.S **** 	ld	r24, Y+		;get value (high word)
 241:tmk_core/common/avr/xprintf.S **** 	ld	r25, Y+		;
 242:tmk_core/common/avr/xprintf.S **** 	set			;
 243:tmk_core/common/avr/xprintf.S **** 	_LPMI	r21		;/
 244:tmk_core/common/avr/xprintf.S **** 26:	cpi	r21, 'd'	;Is type signed decimal?
 245:tmk_core/common/avr/xprintf.S **** 	brne	27f		;/
 246:tmk_core/common/avr/xprintf.S **** 	ldi	r20, -10	;
 247:tmk_core/common/avr/xprintf.S **** 	brts	40f		;
 248:tmk_core/common/avr/xprintf.S **** 	sbrs	r23, 7		;
 249:tmk_core/common/avr/xprintf.S **** 	rjmp	40f		;
 250:tmk_core/common/avr/xprintf.S **** 	ldi	r24, -1		;
 251:tmk_core/common/avr/xprintf.S **** 	ldi	r25, -1		;
 252:tmk_core/common/avr/xprintf.S **** 	rjmp	40f		;/
 253:tmk_core/common/avr/xprintf.S **** 27:	cpi	r21, 'u'	;Is type unsigned decimal?
 254:tmk_core/common/avr/xprintf.S **** 	ldi	r20, 10		;
 255:tmk_core/common/avr/xprintf.S **** 	breq	40f		;/
 256:tmk_core/common/avr/xprintf.S **** 	cpi	r21, 'X'	;Is type hexdecimal?
 257:tmk_core/common/avr/xprintf.S **** 	ldi	r20, 16		;
 258:tmk_core/common/avr/xprintf.S **** 	breq	40f		;/
 259:tmk_core/common/avr/xprintf.S **** 	cpi	r21, 'b'	;Is type binary?
 260:tmk_core/common/avr/xprintf.S **** 	ldi	r20, 2		;
 261:tmk_core/common/avr/xprintf.S **** 	breq	40f		;/
 262:tmk_core/common/avr/xprintf.S **** 	ret			;abort
 263:tmk_core/common/avr/xprintf.S **** 40:	push	ZH		;Output the value
 264:tmk_core/common/avr/xprintf.S **** 	push	ZL		;
 265:tmk_core/common/avr/xprintf.S **** 	rcall	xitoa		;
 266:tmk_core/common/avr/xprintf.S **** 42:	pop	ZL		;
 267:tmk_core/common/avr/xprintf.S **** 	pop	ZH		;
 268:tmk_core/common/avr/xprintf.S **** 	rjmp	0b		;/
 269               	
 270:tmk_core/common/avr/xprintf.S **** 50:	push	ZH		;Put a string on the RAM
 271:tmk_core/common/avr/xprintf.S **** 	push	ZL
 272:tmk_core/common/avr/xprintf.S **** 	_MOVW	ZH,ZL, r25,r24
 273:tmk_core/common/avr/xprintf.S **** 51:	ld	r24, Z+
 274:tmk_core/common/avr/xprintf.S **** 	cpi	r24, 0
 275:tmk_core/common/avr/xprintf.S **** 	breq	42b
 276:tmk_core/common/avr/xprintf.S **** 	rcall	xputc
 277:tmk_core/common/avr/xprintf.S **** 	rjmp	51b
 278               	
 279:tmk_core/common/avr/xprintf.S **** 60:	push	ZH		;Put a string on the ROM
 280:tmk_core/common/avr/xprintf.S **** 	push	ZL
 281:tmk_core/common/avr/xprintf.S **** 	rcall	xputs
 282:tmk_core/common/avr/xprintf.S **** 	rjmp	42b
 283               	.endfunc
 284               	
 285               	
 286               	.func __xprintf
 287               	.global __xprintf
 288               	__xprintf:
 289:tmk_core/common/avr/xprintf.S **** 	push	YH
 290:tmk_core/common/avr/xprintf.S **** 	push	YL
 291:tmk_core/common/avr/xprintf.S **** 	in	YL, _SFR_IO_ADDR(SPL)
 292               	#ifdef SPH
 293:tmk_core/common/avr/xprintf.S **** 	in	YH, _SFR_IO_ADDR(SPH)
 294               	#else
 295               		clr	YH
 296               	#endif
 297:tmk_core/common/avr/xprintf.S **** 	adiw	YL, 5		;Y = pointer to arguments
 298:tmk_core/common/avr/xprintf.S **** 	rcall	xvprintf
 299:tmk_core/common/avr/xprintf.S **** 	pop	YL
 300:tmk_core/common/avr/xprintf.S **** 	pop	YH
 301:tmk_core/common/avr/xprintf.S **** 	ret
 302               	.endfunc
 303               	
 304               	
 305               	#if USE_XSPRINTF
 306               	
 307               	.func __xsprintf
 308               	putram:
 309               		_MOVW	ZH,ZL, r15,r14
 310               		st	Z+, r24
 311               		_MOVW	r15,r14, ZH,ZL
 312               		ret
 313               	.global __xsprintf
 314               	__xsprintf:
 315               		push	YH
 316               		push	YL
 317               		in	YL, _SFR_IO_ADDR(SPL)
 318               	#ifdef SPH
 319               		in	YH, _SFR_IO_ADDR(SPH)
 320               	#else
 321               		clr	YH
 322               	#endif
 323               		adiw	YL, 5		;Y = pointer to arguments
 324               		lds	ZL, xfunc_out+0	;Save registered output function
 325               		lds	ZH, xfunc_out+1	;
 326               		push	ZL		;
 327               		push	ZH		;/
 328               		ldi	ZL, lo8(pm(putram));Set local output function
 329               		ldi	ZH, hi8(pm(putram));
 330               		sts	xfunc_out+0, ZL	;
 331               		sts	xfunc_out+1, ZH	;/
 332               		push	r15		;Initialize pointer to string buffer
 333               		push	r14		;
 334               		ld	r14, Y+		;
 335               		ld	r15, Y+		;/
 336               		rcall	xvprintf
 337               		_MOVW	ZH,ZL, r15,r14	;Terminate string
 338               		st	Z, r1		;
 339               		pop	r14		;
 340               		pop	r15		;/
 341               		pop	ZH		;Restore registered output function
 342               		pop	ZL		;
 343               		sts	xfunc_out+0, ZL	;
 344               		sts	xfunc_out+1, ZH	;/
 345               		pop	YL
 346               		pop	YH
 347               		ret
 348               	.endfunc
 349               	#endif
 350               	
 351               	
 352               	#if USE_XFPRINTF
 353               	.func __xfprintf
 354               	.global __xfprintf
 355               	__xfprintf:
 356               		push	YH
 357               		push	YL
 358               		in	YL, _SFR_IO_ADDR(SPL)
 359               	#ifdef SPH
 360               		in	YH, _SFR_IO_ADDR(SPH)
 361               	#else
 362               		clr	YH
 363               	#endif
 364               		adiw	YL, 5		;Y = pointer to arguments
 365               		lds	ZL, xfunc_out+0	;Save registered output function
 366               		lds	ZH, xfunc_out+1	;
 367               		push	ZL		;
 368               		push	ZH		;/
 369               		ld	ZL, Y+		;Set output function
 370               		ld	ZH, Y+		;
 371               		sts	xfunc_out+0, ZL	;
 372               		sts	xfunc_out+1, ZH	;/
 373               		rcall	xvprintf
 374               		pop	ZH		;Restore registered output function
 375               		pop	ZL		;
 376               		sts	xfunc_out+0, ZL	;
 377               		sts	xfunc_out+1, ZH	;/
 378               		pop	YL
 379               		pop	YH
 380               		ret
 381               	.endfunc
 382               	#endif
 383               	
 384               	#endif
 385               	
 386               	
 387               	
 388               	;---------------------------------------------------------------------------
 389               	; Extended numeral string input
 390               	;
 391               	;Prototype:
 392               	; char xatoi (           /* 1: Successful, 0: Failed */
 393               	;      const char **str, /* pointer to pointer to source string */
 394               	;      long *res         /* result */
 395               	; );
 396               	;
DEFINED SYMBOLS
tmk_core/common/avr/xprintf.S:51     .bss:0000000000000000 xfunc_out
tmk_core/common/avr/xprintf.S:57     .text:0000000000000000 xputc
tmk_core/common/avr/xprintf.S:88     .text:0000000000000018 xputs
tmk_core/common/avr/xprintf.S:109    .text:0000000000000026 xitoa
tmk_core/common/avr/xprintf.S:190    .text:000000000000009c xvprintf
tmk_core/common/avr/xprintf.S:288    .text:000000000000014a __xprintf

NO UNDEFINED SYMBOLS
