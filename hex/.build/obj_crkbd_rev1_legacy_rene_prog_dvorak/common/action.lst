   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_exec,"ax",@progbits
  11               	.global	action_exec
  13               	action_exec:
  14               	.LFB108:
  15               		.file 1 "tmk_core/common/action.c"
   1:tmk_core/common/action.c **** /*
   2:tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action.c **** 
   4:tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action.c **** (at your option) any later version.
   8:tmk_core/common/action.c **** 
   9:tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action.c **** GNU General Public License for more details.
  13:tmk_core/common/action.c **** 
  14:tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action.c **** */
  17:tmk_core/common/action.c **** #include "host.h"
  18:tmk_core/common/action.c **** #include "keycode.h"
  19:tmk_core/common/action.c **** #include "keyboard.h"
  20:tmk_core/common/action.c **** #include "mousekey.h"
  21:tmk_core/common/action.c **** #include "command.h"
  22:tmk_core/common/action.c **** #include "led.h"
  23:tmk_core/common/action.c **** #include "action_layer.h"
  24:tmk_core/common/action.c **** #include "action_tapping.h"
  25:tmk_core/common/action.c **** #include "action_macro.h"
  26:tmk_core/common/action.c **** #include "action_util.h"
  27:tmk_core/common/action.c **** #include "action.h"
  28:tmk_core/common/action.c **** #include "wait.h"
  29:tmk_core/common/action.c **** 
  30:tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
  31:tmk_core/common/action.c **** #    include "backlight.h"
  32:tmk_core/common/action.c **** #endif
  33:tmk_core/common/action.c **** 
  34:tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  35:tmk_core/common/action.c **** #    include "debug.h"
  36:tmk_core/common/action.c **** #else
  37:tmk_core/common/action.c **** #    include "nodebug.h"
  38:tmk_core/common/action.c **** #endif
  39:tmk_core/common/action.c **** 
  40:tmk_core/common/action.c **** int tp_buttons;
  41:tmk_core/common/action.c **** 
  42:tmk_core/common/action.c **** #ifdef RETRO_TAPPING
  43:tmk_core/common/action.c **** int retro_tapping_counter = 0;
  44:tmk_core/common/action.c **** #endif
  45:tmk_core/common/action.c **** 
  46:tmk_core/common/action.c **** #ifdef FAUXCLICKY_ENABLE
  47:tmk_core/common/action.c **** #    include <fauxclicky.h>
  48:tmk_core/common/action.c **** #endif
  49:tmk_core/common/action.c **** 
  50:tmk_core/common/action.c **** #ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
  51:tmk_core/common/action.c **** __attribute__((weak)) bool get_ignore_mod_tap_interrupt(uint16_t keycode, keyrecord_t *record) { re
  52:tmk_core/common/action.c **** #endif
  53:tmk_core/common/action.c **** 
  54:tmk_core/common/action.c **** #ifndef TAP_CODE_DELAY
  55:tmk_core/common/action.c **** #    define TAP_CODE_DELAY 0
  56:tmk_core/common/action.c **** #endif
  57:tmk_core/common/action.c **** #ifndef TAP_HOLD_CAPS_DELAY
  58:tmk_core/common/action.c **** #    define TAP_HOLD_CAPS_DELAY 80
  59:tmk_core/common/action.c **** #endif
  60:tmk_core/common/action.c **** /** \brief Called to execute an action.
  61:tmk_core/common/action.c ****  *
  62:tmk_core/common/action.c ****  * FIXME: Needs documentation.
  63:tmk_core/common/action.c ****  */
  64:tmk_core/common/action.c **** void action_exec(keyevent_t event) {
  16               		.loc 1 64 36 view -0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2B97      		sbiw r28,11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 15
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 11 */
  40               	/* stack size = 13 */
  41               	.L__stack_usage = 13
  42 0014 4F83      		std Y+7,r20
  43 0016 5887      		std Y+8,r21
  44 0018 6987      		std Y+9,r22
  45 001a 7A87      		std Y+10,r23
  46 001c 8B87      		std Y+11,r24
  47               	.LVL0:
  65:tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  48               		.loc 1 65 5 view .LVU1
  66:tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  67:tmk_core/common/action.c ****         dprint("EVENT: ");
  68:tmk_core/common/action.c ****         debug_event(event);
  69:tmk_core/common/action.c ****         dprintln();
  49               		.loc 1 69 19 view .LVU2
  70:tmk_core/common/action.c **** #ifdef RETRO_TAPPING
  71:tmk_core/common/action.c ****         retro_tapping_counter++;
  72:tmk_core/common/action.c **** #endif
  73:tmk_core/common/action.c ****     }
  74:tmk_core/common/action.c **** 
  75:tmk_core/common/action.c **** #ifdef FAUXCLICKY_ENABLE
  76:tmk_core/common/action.c ****     if (IS_PRESSED(event)) {
  77:tmk_core/common/action.c ****         FAUXCLICKY_ACTION_PRESS;
  78:tmk_core/common/action.c ****     }
  79:tmk_core/common/action.c ****     if (IS_RELEASED(event)) {
  80:tmk_core/common/action.c ****         FAUXCLICKY_ACTION_RELEASE;
  81:tmk_core/common/action.c ****     }
  82:tmk_core/common/action.c ****     fauxclicky_check();
  83:tmk_core/common/action.c **** #endif
  84:tmk_core/common/action.c **** 
  85:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
  86:tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  87:tmk_core/common/action.c ****         process_hand_swap(&event);
  88:tmk_core/common/action.c ****     }
  89:tmk_core/common/action.c **** #endif
  90:tmk_core/common/action.c **** 
  91:tmk_core/common/action.c ****     keyrecord_t record = {.event = event};
  50               		.loc 1 91 5 view .LVU3
  51               		.loc 1 91 17 is_stmt 0 view .LVU4
  52 001e 1E82      		std Y+6,__zero_reg__
  53 0020 1D82      		std Y+5,__zero_reg__
  54 0022 85E0      		ldi r24,lo8(5)
  55 0024 FE01      		movw r30,r28
  56 0026 3796      		adiw r30,7
  57 0028 DE01      		movw r26,r28
  58 002a 1196      		adiw r26,1
  59               		0:
  60 002c 0190      		ld r0,Z+
  61 002e 0D92      		st X+,r0
  62 0030 8A95      		dec r24
  63 0032 01F4      		brne 0b
  92:tmk_core/common/action.c **** 
  93:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
  94:tmk_core/common/action.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  95:tmk_core/common/action.c ****     if (has_oneshot_layer_timed_out()) {
  96:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
  97:tmk_core/common/action.c ****     }
  98:tmk_core/common/action.c ****     if (has_oneshot_mods_timed_out()) {
  99:tmk_core/common/action.c ****         clear_oneshot_mods();
 100:tmk_core/common/action.c ****     }
 101:tmk_core/common/action.c **** #        ifdef SWAP_HANDS_ENABLE
 102:tmk_core/common/action.c ****     if (has_oneshot_swaphands_timed_out()) {
 103:tmk_core/common/action.c ****         clear_oneshot_swaphands();
 104:tmk_core/common/action.c ****     }
 105:tmk_core/common/action.c **** #        endif
 106:tmk_core/common/action.c **** #    endif
 107:tmk_core/common/action.c **** #endif
 108:tmk_core/common/action.c **** 
 109:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 110:tmk_core/common/action.c ****     action_tapping_process(record);
  64               		.loc 1 110 5 is_stmt 1 view .LVU5
  65 0034 4981      		ldd r20,Y+1
  66               	.LVL1:
  67               		.loc 1 110 5 is_stmt 0 view .LVU6
  68 0036 5A81      		ldd r21,Y+2
  69               	.LVL2:
  70               		.loc 1 110 5 view .LVU7
  71 0038 6B81      		ldd r22,Y+3
  72 003a 7C81      		ldd r23,Y+4
  73 003c 8D81      		ldd r24,Y+5
  74 003e 9E81      		ldd r25,Y+6
  75               	/* epilogue start */
 111:tmk_core/common/action.c **** #else
 112:tmk_core/common/action.c ****     process_record(&record);
 113:tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
 114:tmk_core/common/action.c ****         dprint("processed: ");
 115:tmk_core/common/action.c ****         debug_record(record);
 116:tmk_core/common/action.c ****         dprintln();
 117:tmk_core/common/action.c ****     }
 118:tmk_core/common/action.c **** #endif
 119:tmk_core/common/action.c **** }
  76               		.loc 1 119 1 view .LVU8
  77 0040 2B96      		adiw r28,11
  78 0042 0FB6      		in __tmp_reg__,__SREG__
  79 0044 F894      		cli
  80 0046 DEBF      		out __SP_H__,r29
  81 0048 0FBE      		out __SREG__,__tmp_reg__
  82 004a CDBF      		out __SP_L__,r28
  83 004c DF91      		pop r29
  84 004e CF91      		pop r28
 110:tmk_core/common/action.c **** #else
  85               		.loc 1 110 5 view .LVU9
  86 0050 0C94 0000 		jmp action_tapping_process
  87               	.LVL3:
  88               		.cfi_endproc
  89               	.LFE108:
  91               		.section	.text.process_record_quantum,"ax",@progbits
  92               		.weak	process_record_quantum
  94               	process_record_quantum:
  95               	.LVL4:
  96               	.LFB110:
 120:tmk_core/common/action.c **** 
 121:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
 122:tmk_core/common/action.c **** bool swap_hands = false;
 123:tmk_core/common/action.c **** bool swap_held  = false;
 124:tmk_core/common/action.c **** 
 125:tmk_core/common/action.c **** /** \brief Process Hand Swap
 126:tmk_core/common/action.c ****  *
 127:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 128:tmk_core/common/action.c ****  */
 129:tmk_core/common/action.c **** void process_hand_swap(keyevent_t *event) {
 130:tmk_core/common/action.c ****     static swap_state_row_t swap_state[MATRIX_ROWS];
 131:tmk_core/common/action.c **** 
 132:tmk_core/common/action.c ****     keypos_t         pos     = event->key;
 133:tmk_core/common/action.c ****     swap_state_row_t col_bit = (swap_state_row_t)1 << pos.col;
 134:tmk_core/common/action.c ****     bool             do_swap = event->pressed ? swap_hands : swap_state[pos.row] & (col_bit);
 135:tmk_core/common/action.c **** 
 136:tmk_core/common/action.c ****     if (do_swap) {
 137:tmk_core/common/action.c ****         event->key = hand_swap_config[pos.row][pos.col];
 138:tmk_core/common/action.c ****         swap_state[pos.row] |= col_bit;
 139:tmk_core/common/action.c ****     } else {
 140:tmk_core/common/action.c ****         swap_state[pos.row] &= ~(col_bit);
 141:tmk_core/common/action.c ****     }
 142:tmk_core/common/action.c **** }
 143:tmk_core/common/action.c **** #endif
 144:tmk_core/common/action.c **** 
 145:tmk_core/common/action.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 146:tmk_core/common/action.c **** bool disable_action_cache = false;
 147:tmk_core/common/action.c **** 
 148:tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record) {
 149:tmk_core/common/action.c ****     disable_action_cache = true;
 150:tmk_core/common/action.c ****     process_record(record);
 151:tmk_core/common/action.c ****     disable_action_cache = false;
 152:tmk_core/common/action.c **** }
 153:tmk_core/common/action.c **** #else
 154:tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record) { process_record(record); }
 155:tmk_core/common/action.c **** #endif
 156:tmk_core/common/action.c **** 
 157:tmk_core/common/action.c **** __attribute__((weak)) bool process_record_quantum(keyrecord_t *record) { return true; }
  97               		.loc 1 157 72 is_stmt 1 view -0
  98               		.cfi_startproc
  99               	/* prologue: function */
 100               	/* frame size = 0 */
 101               	/* stack size = 0 */
 102               	.L__stack_usage = 0
 103               		.loc 1 157 74 view .LVU11
 104               		.loc 1 157 1 is_stmt 0 view .LVU12
 105 0000 81E0      		ldi r24,lo8(1)
 106               	.LVL5:
 107               	/* epilogue start */
 108               		.loc 1 157 1 view .LVU13
 109 0002 0895      		ret
 110               		.cfi_endproc
 111               	.LFE110:
 113               		.section	.text.post_process_record_quantum,"ax",@progbits
 114               		.weak	post_process_record_quantum
 116               	post_process_record_quantum:
 117               	.LVL6:
 118               	.LFB111:
 158:tmk_core/common/action.c **** 
 159:tmk_core/common/action.c **** __attribute__((weak)) void post_process_record_quantum(keyrecord_t *record) {}
 119               		.loc 1 159 77 is_stmt 1 view -0
 120               		.cfi_startproc
 121               	/* prologue: function */
 122               	/* frame size = 0 */
 123               	/* stack size = 0 */
 124               	.L__stack_usage = 0
 125               		.loc 1 159 78 view .LVU15
 126               	/* epilogue start */
 127               		.loc 1 159 1 is_stmt 0 view .LVU16
 128 0000 0895      		ret
 129               		.cfi_endproc
 130               	.LFE111:
 132               		.section	.text.process_record_tap_hint,"ax",@progbits
 133               	.global	process_record_tap_hint
 135               	process_record_tap_hint:
 136               	.LVL7:
 137               	.LFB112:
 160:tmk_core/common/action.c **** 
 161:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 162:tmk_core/common/action.c **** /** \brief Allows for handling tap-hold actions immediately instead of waiting for TAPPING_TERM or 
 163:tmk_core/common/action.c ****  *
 164:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 165:tmk_core/common/action.c ****  */
 166:tmk_core/common/action.c **** void process_record_tap_hint(keyrecord_t *record) {
 138               		.loc 1 166 51 is_stmt 1 view -0
 139               		.cfi_startproc
 140               	/* prologue: function */
 141               	/* frame size = 0 */
 142               	/* stack size = 0 */
 143               	.L__stack_usage = 0
 167:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(record->event.key);
 144               		.loc 1 167 5 view .LVU18
 145               		.loc 1 167 23 is_stmt 0 view .LVU19
 146 0000 FC01      		movw r30,r24
 147 0002 8081      		ld r24,Z
 148 0004 9181      		ldd r25,Z+1
 149               	.LVL8:
 150               		.loc 1 167 23 view .LVU20
 151 0006 0C94 0000 		jmp layer_switch_get_action
 152               	.LVL9:
 153               		.loc 1 167 23 view .LVU21
 154               		.cfi_endproc
 155               	.LFE112:
 157               		.section	.text.register_code,"ax",@progbits
 158               	.global	register_code
 160               	register_code:
 161               	.LVL10:
 162               	.LFB116:
 168:tmk_core/common/action.c **** 
 169:tmk_core/common/action.c ****     switch (action.kind.id) {
 170:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 171:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 172:tmk_core/common/action.c ****             switch (action.swap.code) {
 173:tmk_core/common/action.c ****                 case OP_SH_ONESHOT:
 174:tmk_core/common/action.c ****                     break;
 175:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 176:tmk_core/common/action.c ****                 default:
 177:tmk_core/common/action.c ****                     swap_hands = !swap_hands;
 178:tmk_core/common/action.c ****                     swap_held  = true;
 179:tmk_core/common/action.c ****             }
 180:tmk_core/common/action.c ****             break;
 181:tmk_core/common/action.c **** #    endif
 182:tmk_core/common/action.c ****     }
 183:tmk_core/common/action.c **** }
 184:tmk_core/common/action.c **** #endif
 185:tmk_core/common/action.c **** 
 186:tmk_core/common/action.c **** /** \brief Take a key event (key press or key release) and processes it.
 187:tmk_core/common/action.c ****  *
 188:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 189:tmk_core/common/action.c ****  */
 190:tmk_core/common/action.c **** void process_record(keyrecord_t *record) {
 191:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 192:tmk_core/common/action.c ****         return;
 193:tmk_core/common/action.c ****     }
 194:tmk_core/common/action.c **** 
 195:tmk_core/common/action.c ****     if (!process_record_quantum(record)) {
 196:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 197:tmk_core/common/action.c ****         if (is_oneshot_layer_active() && record->event.pressed) {
 198:tmk_core/common/action.c ****             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 199:tmk_core/common/action.c ****         }
 200:tmk_core/common/action.c **** #endif
 201:tmk_core/common/action.c ****         return;
 202:tmk_core/common/action.c ****     }
 203:tmk_core/common/action.c **** 
 204:tmk_core/common/action.c ****     process_record_handler(record);
 205:tmk_core/common/action.c ****     post_process_record_quantum(record);
 206:tmk_core/common/action.c **** }
 207:tmk_core/common/action.c **** 
 208:tmk_core/common/action.c **** void process_record_handler(keyrecord_t *record) {
 209:tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 210:tmk_core/common/action.c ****     dprint("ACTION: ");
 211:tmk_core/common/action.c ****     debug_action(action);
 212:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 213:tmk_core/common/action.c ****     dprint(" layer_state: ");
 214:tmk_core/common/action.c ****     layer_debug();
 215:tmk_core/common/action.c ****     dprint(" default_layer_state: ");
 216:tmk_core/common/action.c ****     default_layer_debug();
 217:tmk_core/common/action.c **** #endif
 218:tmk_core/common/action.c ****     dprintln();
 219:tmk_core/common/action.c **** 
 220:tmk_core/common/action.c ****     process_action(record, action);
 221:tmk_core/common/action.c **** }
 222:tmk_core/common/action.c **** 
 223:tmk_core/common/action.c **** /** \brief Take an action and processes it.
 224:tmk_core/common/action.c ****  *
 225:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 226:tmk_core/common/action.c ****  */
 227:tmk_core/common/action.c **** void process_action(keyrecord_t *record, action_t action) {
 228:tmk_core/common/action.c ****     keyevent_t event = record->event;
 229:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 230:tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 231:tmk_core/common/action.c **** #endif
 232:tmk_core/common/action.c **** 
 233:tmk_core/common/action.c ****     if (event.pressed) {
 234:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 235:tmk_core/common/action.c ****         clear_weak_mods();
 236:tmk_core/common/action.c ****     }
 237:tmk_core/common/action.c **** 
 238:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 239:tmk_core/common/action.c ****     bool do_release_oneshot = false;
 240:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 241:tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && (action.kind.id == ACT_USAGE || !IS_MOD(actio
 242:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 243:tmk_core/common/action.c ****         && !(action.kind.id == ACT_SWAP_HANDS && action.swap.code == OP_SH_ONESHOT)
 244:tmk_core/common/action.c **** #    endif
 245:tmk_core/common/action.c ****     ) {
 246:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 247:tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 248:tmk_core/common/action.c ****     }
 249:tmk_core/common/action.c **** #endif
 250:tmk_core/common/action.c **** 
 251:tmk_core/common/action.c ****     switch (action.kind.id) {
 252:tmk_core/common/action.c ****         /* Key and Mods */
 253:tmk_core/common/action.c ****         case ACT_LMODS:
 254:tmk_core/common/action.c ****         case ACT_RMODS: {
 255:tmk_core/common/action.c ****             uint8_t mods = (action.kind.id == ACT_LMODS) ? action.key.mods : action.key.mods << 4;
 256:tmk_core/common/action.c ****             if (event.pressed) {
 257:tmk_core/common/action.c ****                 if (mods) {
 258:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 259:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 260:tmk_core/common/action.c ****                         // This also makes LSFT(KC_LGUI) behave exactly the same as LGUI(KC_LSFT).
 261:tmk_core/common/action.c ****                         // Same applies for some keys like KC_MEH which are declared as MEH(KC_NO).
 262:tmk_core/common/action.c ****                         add_mods(mods);
 263:tmk_core/common/action.c ****                     } else {
 264:tmk_core/common/action.c ****                         add_weak_mods(mods);
 265:tmk_core/common/action.c ****                     }
 266:tmk_core/common/action.c ****                     send_keyboard_report();
 267:tmk_core/common/action.c ****                 }
 268:tmk_core/common/action.c ****                 register_code(action.key.code);
 269:tmk_core/common/action.c ****             } else {
 270:tmk_core/common/action.c ****                 unregister_code(action.key.code);
 271:tmk_core/common/action.c ****                 if (mods) {
 272:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 273:tmk_core/common/action.c ****                         del_mods(mods);
 274:tmk_core/common/action.c ****                     } else {
 275:tmk_core/common/action.c ****                         del_weak_mods(mods);
 276:tmk_core/common/action.c ****                     }
 277:tmk_core/common/action.c ****                     send_keyboard_report();
 278:tmk_core/common/action.c ****                 }
 279:tmk_core/common/action.c ****             }
 280:tmk_core/common/action.c ****         } break;
 281:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 282:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 283:tmk_core/common/action.c ****         case ACT_RMODS_TAP: {
 284:tmk_core/common/action.c ****             uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ? action.key.mods : action.key.mods <<
 285:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 286:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 287:tmk_core/common/action.c ****                 case MODS_ONESHOT:
 288:tmk_core/common/action.c ****                     // Oneshot modifier
 289:tmk_core/common/action.c ****                     if (event.pressed) {
 290:tmk_core/common/action.c ****                         if (tap_count == 0) {
 291:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: 0\n");
 292:tmk_core/common/action.c ****                             register_mods(mods | get_oneshot_mods());
 293:tmk_core/common/action.c ****                         } else if (tap_count == 1) {
 294:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: start\n");
 295:tmk_core/common/action.c ****                             set_oneshot_mods(mods | get_oneshot_mods());
 296:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 297:tmk_core/common/action.c ****                         } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 298:tmk_core/common/action.c ****                             dprint("MODS_TAP: Toggling oneshot");
 299:tmk_core/common/action.c ****                             clear_oneshot_mods();
 300:tmk_core/common/action.c ****                             set_oneshot_locked_mods(mods);
 301:tmk_core/common/action.c ****                             register_mods(mods);
 302:tmk_core/common/action.c **** #        endif
 303:tmk_core/common/action.c ****                         } else {
 304:tmk_core/common/action.c ****                             register_mods(mods | get_oneshot_mods());
 305:tmk_core/common/action.c ****                         }
 306:tmk_core/common/action.c ****                     } else {
 307:tmk_core/common/action.c ****                         if (tap_count == 0) {
 308:tmk_core/common/action.c ****                             clear_oneshot_mods();
 309:tmk_core/common/action.c ****                             unregister_mods(mods);
 310:tmk_core/common/action.c ****                         } else if (tap_count == 1) {
 311:tmk_core/common/action.c ****                             // Retain Oneshot mods
 312:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 313:tmk_core/common/action.c ****                             if (mods & get_mods()) {
 314:tmk_core/common/action.c ****                                 clear_oneshot_locked_mods();
 315:tmk_core/common/action.c ****                                 clear_oneshot_mods();
 316:tmk_core/common/action.c ****                                 unregister_mods(mods);
 317:tmk_core/common/action.c ****                             }
 318:tmk_core/common/action.c ****                         } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 319:tmk_core/common/action.c ****                             // Toggle Oneshot Layer
 320:tmk_core/common/action.c **** #        endif
 321:tmk_core/common/action.c ****                         } else {
 322:tmk_core/common/action.c ****                             clear_oneshot_mods();
 323:tmk_core/common/action.c ****                             unregister_mods(mods);
 324:tmk_core/common/action.c ****                         }
 325:tmk_core/common/action.c ****                     }
 326:tmk_core/common/action.c ****                     break;
 327:tmk_core/common/action.c **** #    endif
 328:tmk_core/common/action.c ****                 case MODS_TAP_TOGGLE:
 329:tmk_core/common/action.c ****                     if (event.pressed) {
 330:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 331:tmk_core/common/action.c ****                             register_mods(mods);
 332:tmk_core/common/action.c ****                         }
 333:tmk_core/common/action.c ****                     } else {
 334:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 335:tmk_core/common/action.c ****                             unregister_mods(mods);
 336:tmk_core/common/action.c ****                         }
 337:tmk_core/common/action.c ****                     }
 338:tmk_core/common/action.c ****                     break;
 339:tmk_core/common/action.c ****                 default:
 340:tmk_core/common/action.c ****                     if (event.pressed) {
 341:tmk_core/common/action.c ****                         if (tap_count > 0) {
 342:tmk_core/common/action.c **** #    if !defined(IGNORE_MOD_TAP_INTERRUPT) || defined(IGNORE_MOD_TAP_INTERRUPT_PER_KEY)
 343:tmk_core/common/action.c ****                             if (
 344:tmk_core/common/action.c **** #        ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
 345:tmk_core/common/action.c ****                                 !get_ignore_mod_tap_interrupt(get_event_keycode(record->event, fals
 346:tmk_core/common/action.c **** #        endif
 347:tmk_core/common/action.c ****                                 record->tap.interrupted) {
 348:tmk_core/common/action.c ****                                 dprint("mods_tap: tap: cancel: add_mods\n");
 349:tmk_core/common/action.c ****                                 // ad hoc: set 0 to cancel tap
 350:tmk_core/common/action.c ****                                 record->tap.count = 0;
 351:tmk_core/common/action.c ****                                 register_mods(mods);
 352:tmk_core/common/action.c ****                             } else
 353:tmk_core/common/action.c **** #    endif
 354:tmk_core/common/action.c ****                             {
 355:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: register_code\n");
 356:tmk_core/common/action.c ****                                 register_code(action.key.code);
 357:tmk_core/common/action.c ****                             }
 358:tmk_core/common/action.c ****                         } else {
 359:tmk_core/common/action.c ****                             dprint("MODS_TAP: No tap: add_mods\n");
 360:tmk_core/common/action.c ****                             register_mods(mods);
 361:tmk_core/common/action.c ****                         }
 362:tmk_core/common/action.c ****                     } else {
 363:tmk_core/common/action.c ****                         if (tap_count > 0) {
 364:tmk_core/common/action.c ****                             dprint("MODS_TAP: Tap: unregister_code\n");
 365:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 366:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 367:tmk_core/common/action.c ****                             } else {
 368:tmk_core/common/action.c ****                                 wait_ms(TAP_CODE_DELAY);
 369:tmk_core/common/action.c ****                             }
 370:tmk_core/common/action.c ****                             unregister_code(action.key.code);
 371:tmk_core/common/action.c ****                         } else {
 372:tmk_core/common/action.c ****                             dprint("MODS_TAP: No tap: add_mods\n");
 373:tmk_core/common/action.c ****                             unregister_mods(mods);
 374:tmk_core/common/action.c ****                         }
 375:tmk_core/common/action.c ****                     }
 376:tmk_core/common/action.c ****                     break;
 377:tmk_core/common/action.c ****             }
 378:tmk_core/common/action.c ****         } break;
 379:tmk_core/common/action.c **** #endif
 380:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 381:tmk_core/common/action.c ****         /* other HID usage */
 382:tmk_core/common/action.c ****         case ACT_USAGE:
 383:tmk_core/common/action.c ****             switch (action.usage.page) {
 384:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 385:tmk_core/common/action.c ****                     if (event.pressed) {
 386:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 387:tmk_core/common/action.c ****                     } else {
 388:tmk_core/common/action.c ****                         host_system_send(0);
 389:tmk_core/common/action.c ****                     }
 390:tmk_core/common/action.c ****                     break;
 391:tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 392:tmk_core/common/action.c ****                     if (event.pressed) {
 393:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 394:tmk_core/common/action.c ****                     } else {
 395:tmk_core/common/action.c ****                         host_consumer_send(0);
 396:tmk_core/common/action.c ****                     }
 397:tmk_core/common/action.c ****                     break;
 398:tmk_core/common/action.c ****             }
 399:tmk_core/common/action.c ****             break;
 400:tmk_core/common/action.c **** #endif
 401:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 402:tmk_core/common/action.c ****         /* Mouse key */
 403:tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 404:tmk_core/common/action.c ****             if (event.pressed) {
 405:tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 406:tmk_core/common/action.c ****                 switch (action.key.code) {
 407:tmk_core/common/action.c **** #    ifdef PS2_MOUSE_ENABLE
 408:tmk_core/common/action.c ****                     case KC_MS_BTN1:
 409:tmk_core/common/action.c ****                         tp_buttons |= (1 << 0);
 410:tmk_core/common/action.c ****                         break;
 411:tmk_core/common/action.c ****                     case KC_MS_BTN2:
 412:tmk_core/common/action.c ****                         tp_buttons |= (1 << 1);
 413:tmk_core/common/action.c ****                         break;
 414:tmk_core/common/action.c ****                     case KC_MS_BTN3:
 415:tmk_core/common/action.c ****                         tp_buttons |= (1 << 2);
 416:tmk_core/common/action.c ****                         break;
 417:tmk_core/common/action.c **** #    endif
 418:tmk_core/common/action.c ****                     default:
 419:tmk_core/common/action.c ****                         mousekey_send();
 420:tmk_core/common/action.c ****                         break;
 421:tmk_core/common/action.c ****                 }
 422:tmk_core/common/action.c ****             } else {
 423:tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 424:tmk_core/common/action.c ****                 switch (action.key.code) {
 425:tmk_core/common/action.c **** #    ifdef PS2_MOUSE_ENABLE
 426:tmk_core/common/action.c ****                     case KC_MS_BTN1:
 427:tmk_core/common/action.c ****                         tp_buttons &= ~(1 << 0);
 428:tmk_core/common/action.c ****                         break;
 429:tmk_core/common/action.c ****                     case KC_MS_BTN2:
 430:tmk_core/common/action.c ****                         tp_buttons &= ~(1 << 1);
 431:tmk_core/common/action.c ****                         break;
 432:tmk_core/common/action.c ****                     case KC_MS_BTN3:
 433:tmk_core/common/action.c ****                         tp_buttons &= ~(1 << 2);
 434:tmk_core/common/action.c ****                         break;
 435:tmk_core/common/action.c **** #    endif
 436:tmk_core/common/action.c ****                     default:
 437:tmk_core/common/action.c ****                         mousekey_send();
 438:tmk_core/common/action.c ****                         break;
 439:tmk_core/common/action.c ****                 }
 440:tmk_core/common/action.c ****             }
 441:tmk_core/common/action.c ****             break;
 442:tmk_core/common/action.c **** #endif
 443:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 444:tmk_core/common/action.c ****         case ACT_LAYER:
 445:tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 446:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 447:tmk_core/common/action.c ****                 if (!event.pressed) {
 448:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 449:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 450:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 451:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 452:tmk_core/common/action.c ****                         case OP_BIT_AND:
 453:tmk_core/common/action.c ****                             default_layer_and(bits | mask);
 454:tmk_core/common/action.c ****                             break;
 455:tmk_core/common/action.c ****                         case OP_BIT_OR:
 456:tmk_core/common/action.c ****                             default_layer_or(bits | mask);
 457:tmk_core/common/action.c ****                             break;
 458:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 459:tmk_core/common/action.c ****                             default_layer_xor(bits | mask);
 460:tmk_core/common/action.c ****                             break;
 461:tmk_core/common/action.c ****                         case OP_BIT_SET:
 462:tmk_core/common/action.c ****                             default_layer_set(bits | mask);
 463:tmk_core/common/action.c ****                             break;
 464:tmk_core/common/action.c ****                     }
 465:tmk_core/common/action.c ****                 }
 466:tmk_core/common/action.c ****             } else {
 467:tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 468:tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) : (action.layer_bitop.on & O
 469:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 470:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 471:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 472:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 473:tmk_core/common/action.c ****                         case OP_BIT_AND:
 474:tmk_core/common/action.c ****                             layer_and(bits | mask);
 475:tmk_core/common/action.c ****                             break;
 476:tmk_core/common/action.c ****                         case OP_BIT_OR:
 477:tmk_core/common/action.c ****                             layer_or(bits | mask);
 478:tmk_core/common/action.c ****                             break;
 479:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 480:tmk_core/common/action.c ****                             layer_xor(bits | mask);
 481:tmk_core/common/action.c ****                             break;
 482:tmk_core/common/action.c ****                         case OP_BIT_SET:
 483:tmk_core/common/action.c ****                             layer_state_set(bits | mask);
 484:tmk_core/common/action.c ****                             break;
 485:tmk_core/common/action.c ****                     }
 486:tmk_core/common/action.c ****                 }
 487:tmk_core/common/action.c ****             }
 488:tmk_core/common/action.c ****             break;
 489:tmk_core/common/action.c ****         case ACT_LAYER_MODS:
 490:tmk_core/common/action.c ****             if (event.pressed) {
 491:tmk_core/common/action.c ****                 layer_on(action.layer_mods.layer);
 492:tmk_core/common/action.c ****                 register_mods(action.layer_mods.mods);
 493:tmk_core/common/action.c ****             } else {
 494:tmk_core/common/action.c ****                 unregister_mods(action.layer_mods.mods);
 495:tmk_core/common/action.c ****                 layer_off(action.layer_mods.layer);
 496:tmk_core/common/action.c ****             }
 497:tmk_core/common/action.c ****             break;
 498:tmk_core/common/action.c **** #    ifndef NO_ACTION_TAPPING
 499:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 500:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 501:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 502:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 503:tmk_core/common/action.c ****                     /* tap toggle */
 504:tmk_core/common/action.c ****                     if (event.pressed) {
 505:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 506:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 507:tmk_core/common/action.c ****                         }
 508:tmk_core/common/action.c ****                     } else {
 509:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 510:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 511:tmk_core/common/action.c ****                         }
 512:tmk_core/common/action.c ****                     }
 513:tmk_core/common/action.c ****                     break;
 514:tmk_core/common/action.c ****                 case OP_ON_OFF:
 515:tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) : layer_off(action.layer_tap.val
 516:tmk_core/common/action.c ****                     break;
 517:tmk_core/common/action.c ****                 case OP_OFF_ON:
 518:tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) : layer_on(action.layer_tap.val
 519:tmk_core/common/action.c ****                     break;
 520:tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 521:tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) : layer_clear();
 522:tmk_core/common/action.c ****                     break;
 523:tmk_core/common/action.c **** #        ifndef NO_ACTION_ONESHOT
 524:tmk_core/common/action.c ****                 case OP_ONESHOT:
 525:tmk_core/common/action.c ****                     // Oneshot modifier
 526:tmk_core/common/action.c **** #            if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 527:tmk_core/common/action.c ****                     do_release_oneshot = false;
 528:tmk_core/common/action.c ****                     if (event.pressed) {
 529:tmk_core/common/action.c ****                         del_mods(get_oneshot_locked_mods());
 530:tmk_core/common/action.c ****                         if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
 531:tmk_core/common/action.c ****                             reset_oneshot_layer();
 532:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 533:tmk_core/common/action.c ****                             break;
 534:tmk_core/common/action.c ****                         } else if (tap_count < ONESHOT_TAP_TOGGLE) {
 535:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 536:tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 537:tmk_core/common/action.c ****                         }
 538:tmk_core/common/action.c ****                     } else {
 539:tmk_core/common/action.c ****                         add_mods(get_oneshot_locked_mods());
 540:tmk_core/common/action.c ****                         if (tap_count >= ONESHOT_TAP_TOGGLE) {
 541:tmk_core/common/action.c ****                             reset_oneshot_layer();
 542:tmk_core/common/action.c ****                             clear_oneshot_locked_mods();
 543:tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
 544:tmk_core/common/action.c ****                         } else {
 545:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_PRESSED);
 546:tmk_core/common/action.c ****                         }
 547:tmk_core/common/action.c ****                     }
 548:tmk_core/common/action.c **** #            else
 549:tmk_core/common/action.c ****                     if (event.pressed) {
 550:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 551:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 552:tmk_core/common/action.c ****                     } else {
 553:tmk_core/common/action.c ****                         clear_oneshot_layer_state(ONESHOT_PRESSED);
 554:tmk_core/common/action.c ****                         if (tap_count > 1) {
 555:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 556:tmk_core/common/action.c ****                         }
 557:tmk_core/common/action.c ****                     }
 558:tmk_core/common/action.c **** #            endif
 559:tmk_core/common/action.c ****                     break;
 560:tmk_core/common/action.c **** #        endif
 561:tmk_core/common/action.c ****                 default:
 562:tmk_core/common/action.c ****                     /* tap key */
 563:tmk_core/common/action.c ****                     if (event.pressed) {
 564:tmk_core/common/action.c ****                         if (tap_count > 0) {
 565:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 566:tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 567:tmk_core/common/action.c ****                         } else {
 568:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 569:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 570:tmk_core/common/action.c ****                         }
 571:tmk_core/common/action.c ****                     } else {
 572:tmk_core/common/action.c ****                         if (tap_count > 0) {
 573:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 574:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 575:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 576:tmk_core/common/action.c ****                             } else {
 577:tmk_core/common/action.c ****                                 wait_ms(TAP_CODE_DELAY);
 578:tmk_core/common/action.c ****                             }
 579:tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 580:tmk_core/common/action.c ****                         } else {
 581:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 582:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 583:tmk_core/common/action.c ****                         }
 584:tmk_core/common/action.c ****                     }
 585:tmk_core/common/action.c ****                     break;
 586:tmk_core/common/action.c ****             }
 587:tmk_core/common/action.c ****             break;
 588:tmk_core/common/action.c **** #    endif
 589:tmk_core/common/action.c **** #endif
 590:tmk_core/common/action.c ****             /* Extentions */
 591:tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 592:tmk_core/common/action.c ****         case ACT_MACRO:
 593:tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 594:tmk_core/common/action.c ****             break;
 595:tmk_core/common/action.c **** #endif
 596:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
 597:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 598:tmk_core/common/action.c ****             switch (action.swap.code) {
 599:tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 600:tmk_core/common/action.c ****                     if (event.pressed) {
 601:tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 602:tmk_core/common/action.c ****                     }
 603:tmk_core/common/action.c ****                     break;
 604:tmk_core/common/action.c ****                 case OP_SH_ON_OFF:
 605:tmk_core/common/action.c ****                     swap_hands = event.pressed;
 606:tmk_core/common/action.c ****                     break;
 607:tmk_core/common/action.c ****                 case OP_SH_OFF_ON:
 608:tmk_core/common/action.c ****                     swap_hands = !event.pressed;
 609:tmk_core/common/action.c ****                     break;
 610:tmk_core/common/action.c ****                 case OP_SH_ON:
 611:tmk_core/common/action.c ****                     if (!event.pressed) {
 612:tmk_core/common/action.c ****                         swap_hands = true;
 613:tmk_core/common/action.c ****                     }
 614:tmk_core/common/action.c ****                     break;
 615:tmk_core/common/action.c ****                 case OP_SH_OFF:
 616:tmk_core/common/action.c ****                     if (!event.pressed) {
 617:tmk_core/common/action.c ****                         swap_hands = false;
 618:tmk_core/common/action.c ****                     }
 619:tmk_core/common/action.c ****                     break;
 620:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 621:tmk_core/common/action.c ****                 case OP_SH_ONESHOT:
 622:tmk_core/common/action.c ****                     if (event.pressed) {
 623:tmk_core/common/action.c ****                         set_oneshot_swaphands();
 624:tmk_core/common/action.c ****                     } else {
 625:tmk_core/common/action.c ****                         release_oneshot_swaphands();
 626:tmk_core/common/action.c ****                     }
 627:tmk_core/common/action.c ****                     break;
 628:tmk_core/common/action.c **** #    endif
 629:tmk_core/common/action.c **** 
 630:tmk_core/common/action.c **** #    ifndef NO_ACTION_TAPPING
 631:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 632:tmk_core/common/action.c ****                     /* tap toggle */
 633:tmk_core/common/action.c **** 
 634:tmk_core/common/action.c ****                     if (event.pressed) {
 635:tmk_core/common/action.c ****                         if (swap_held) {
 636:tmk_core/common/action.c ****                             swap_held = false;
 637:tmk_core/common/action.c ****                         } else {
 638:tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 639:tmk_core/common/action.c ****                         }
 640:tmk_core/common/action.c ****                     } else {
 641:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 642:tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 643:tmk_core/common/action.c ****                         }
 644:tmk_core/common/action.c ****                     }
 645:tmk_core/common/action.c ****                     break;
 646:tmk_core/common/action.c ****                 default:
 647:tmk_core/common/action.c ****                     /* tap key */
 648:tmk_core/common/action.c ****                     if (tap_count > 0) {
 649:tmk_core/common/action.c ****                         if (swap_held) {
 650:tmk_core/common/action.c ****                             swap_hands = !swap_hands;  // undo hold set up in _tap_hint
 651:tmk_core/common/action.c ****                             swap_held  = false;
 652:tmk_core/common/action.c ****                         }
 653:tmk_core/common/action.c ****                         if (event.pressed) {
 654:tmk_core/common/action.c ****                             register_code(action.swap.code);
 655:tmk_core/common/action.c ****                         } else {
 656:tmk_core/common/action.c ****                             wait_ms(TAP_CODE_DELAY);
 657:tmk_core/common/action.c ****                             unregister_code(action.swap.code);
 658:tmk_core/common/action.c ****                             *record = (keyrecord_t){};  // hack: reset tap mode
 659:tmk_core/common/action.c ****                         }
 660:tmk_core/common/action.c ****                     } else {
 661:tmk_core/common/action.c ****                         if (swap_held && !event.pressed) {
 662:tmk_core/common/action.c ****                             swap_hands = !swap_hands;  // undo hold set up in _tap_hint
 663:tmk_core/common/action.c ****                             swap_held  = false;
 664:tmk_core/common/action.c ****                         }
 665:tmk_core/common/action.c ****                     }
 666:tmk_core/common/action.c **** #    endif
 667:tmk_core/common/action.c ****             }
 668:tmk_core/common/action.c **** #endif
 669:tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 670:tmk_core/common/action.c ****         case ACT_FUNCTION:
 671:tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 672:tmk_core/common/action.c ****             break;
 673:tmk_core/common/action.c **** #endif
 674:tmk_core/common/action.c ****         default:
 675:tmk_core/common/action.c ****             break;
 676:tmk_core/common/action.c ****     }
 677:tmk_core/common/action.c **** 
 678:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 679:tmk_core/common/action.c ****     // if this event is a layer action, update the leds
 680:tmk_core/common/action.c ****     switch (action.kind.id) {
 681:tmk_core/common/action.c ****         case ACT_LAYER:
 682:tmk_core/common/action.c ****         case ACT_LAYER_MODS:
 683:tmk_core/common/action.c **** #    ifndef NO_ACTION_TAPPING
 684:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 685:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 686:tmk_core/common/action.c **** #    endif
 687:tmk_core/common/action.c ****             led_set(host_keyboard_leds());
 688:tmk_core/common/action.c ****             break;
 689:tmk_core/common/action.c ****         default:
 690:tmk_core/common/action.c ****             break;
 691:tmk_core/common/action.c ****     }
 692:tmk_core/common/action.c **** #endif
 693:tmk_core/common/action.c **** 
 694:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 695:tmk_core/common/action.c **** #    ifdef RETRO_TAPPING
 696:tmk_core/common/action.c ****     if (!is_tap_action(action)) {
 697:tmk_core/common/action.c ****         retro_tapping_counter = 0;
 698:tmk_core/common/action.c ****     } else {
 699:tmk_core/common/action.c ****         if (event.pressed) {
 700:tmk_core/common/action.c ****             if (tap_count > 0) {
 701:tmk_core/common/action.c ****                 retro_tapping_counter = 0;
 702:tmk_core/common/action.c ****             } else {
 703:tmk_core/common/action.c ****             }
 704:tmk_core/common/action.c ****         } else {
 705:tmk_core/common/action.c ****             if (tap_count > 0) {
 706:tmk_core/common/action.c ****                 retro_tapping_counter = 0;
 707:tmk_core/common/action.c ****             } else {
 708:tmk_core/common/action.c ****                 if (retro_tapping_counter == 2) {
 709:tmk_core/common/action.c ****                     tap_code(action.layer_tap.code);
 710:tmk_core/common/action.c ****                 }
 711:tmk_core/common/action.c ****                 retro_tapping_counter = 0;
 712:tmk_core/common/action.c ****             }
 713:tmk_core/common/action.c ****         }
 714:tmk_core/common/action.c ****     }
 715:tmk_core/common/action.c **** #    endif
 716:tmk_core/common/action.c **** #endif
 717:tmk_core/common/action.c **** 
 718:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
 719:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 720:tmk_core/common/action.c ****     if (event.pressed && !(action.kind.id == ACT_SWAP_HANDS && action.swap.code == OP_SH_ONESHOT)) 
 721:tmk_core/common/action.c ****         use_oneshot_swaphands();
 722:tmk_core/common/action.c ****     }
 723:tmk_core/common/action.c **** #    endif
 724:tmk_core/common/action.c **** #endif
 725:tmk_core/common/action.c **** 
 726:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 727:tmk_core/common/action.c ****     /* Because we switch layers after a oneshot event, we need to release the
 728:tmk_core/common/action.c ****      * key before we leave the layer or no key up event will be generated.
 729:tmk_core/common/action.c ****      */
 730:tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED)) {
 731:tmk_core/common/action.c ****         record->event.pressed = false;
 732:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 733:tmk_core/common/action.c ****         process_record(record);
 734:tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 735:tmk_core/common/action.c ****     }
 736:tmk_core/common/action.c **** #endif
 737:tmk_core/common/action.c **** }
 738:tmk_core/common/action.c **** 
 739:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 740:tmk_core/common/action.c ****  *
 741:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 742:tmk_core/common/action.c ****  */
 743:tmk_core/common/action.c **** void register_code(uint8_t code) {
 163               		.loc 1 743 34 is_stmt 1 view -0
 164               		.cfi_startproc
 165               		.loc 1 743 34 is_stmt 0 view .LVU23
 166 0000 CF93      		push r28
 167               	.LCFI4:
 168               		.cfi_def_cfa_offset 3
 169               		.cfi_offset 28, -2
 170               	/* prologue: function */
 171               	/* frame size = 0 */
 172               	/* stack size = 1 */
 173               	.L__stack_usage = 1
 174 0002 C82F      		mov r28,r24
 744:tmk_core/common/action.c ****     if (code == KC_NO) {
 175               		.loc 1 744 5 is_stmt 1 view .LVU24
 176               		.loc 1 744 8 is_stmt 0 view .LVU25
 177 0004 8823      		tst r24
 178 0006 01F4      		brne .+2
 179 0008 00C0      		rjmp .L5
 745:tmk_core/common/action.c ****         return;
 746:tmk_core/common/action.c ****     }
 747:tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 748:tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 749:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 750:tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 751:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1 << USB_LED_CAPS_LOCK)) return;
 752:tmk_core/common/action.c **** #    endif
 753:tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 754:tmk_core/common/action.c ****         send_keyboard_report();
 755:tmk_core/common/action.c ****         wait_ms(100);
 756:tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 757:tmk_core/common/action.c ****         send_keyboard_report();
 758:tmk_core/common/action.c ****     }
 759:tmk_core/common/action.c **** 
 760:tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 761:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 762:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1 << USB_LED_NUM_LOCK)) return;
 763:tmk_core/common/action.c **** #    endif
 764:tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 765:tmk_core/common/action.c ****         send_keyboard_report();
 766:tmk_core/common/action.c ****         wait_ms(100);
 767:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 768:tmk_core/common/action.c ****         send_keyboard_report();
 769:tmk_core/common/action.c ****     }
 770:tmk_core/common/action.c **** 
 771:tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 772:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 773:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1 << USB_LED_SCROLL_LOCK)) return;
 774:tmk_core/common/action.c **** #    endif
 775:tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 776:tmk_core/common/action.c ****         send_keyboard_report();
 777:tmk_core/common/action.c ****         wait_ms(100);
 778:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 779:tmk_core/common/action.c ****         send_keyboard_report();
 780:tmk_core/common/action.c ****     }
 781:tmk_core/common/action.c **** #endif
 782:tmk_core/common/action.c **** 
 783:tmk_core/common/action.c ****     else if
 180               		.loc 1 783 10 is_stmt 1 view .LVU26
 784:tmk_core/common/action.c ****         IS_KEY(code) {
 181               		.loc 1 784 9 is_stmt 0 view .LVU27
 182 000a 8CEF      		ldi r24,lo8(-4)
 183               	.LVL11:
 184               		.loc 1 784 9 view .LVU28
 185 000c 8C0F      		add r24,r28
 186 000e 813A      		cpi r24,lo8(-95)
 187 0010 00F4      		brsh .L7
 785:tmk_core/common/action.c ****             // TODO: should push command_proc out of this block?
 786:tmk_core/common/action.c ****             if (command_proc(code)) return;
 188               		.loc 1 786 13 is_stmt 1 view .LVU29
 787:tmk_core/common/action.c **** 
 788:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 789:tmk_core/common/action.c **** /* TODO: remove
 790:tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 791:tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 792:tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 793:tmk_core/common/action.c **** 
 794:tmk_core/common/action.c ****             add_key(code);
 795:tmk_core/common/action.c ****             send_keyboard_report();
 796:tmk_core/common/action.c **** 
 797:tmk_core/common/action.c ****             set_mods(tmp_mods);
 798:tmk_core/common/action.c ****             send_keyboard_report();
 799:tmk_core/common/action.c ****             oneshot_cancel();
 800:tmk_core/common/action.c ****         } else
 801:tmk_core/common/action.c **** */
 802:tmk_core/common/action.c **** #endif
 803:tmk_core/common/action.c ****             {
 804:tmk_core/common/action.c ****                 // Force a new key press if the key is already pressed
 805:tmk_core/common/action.c ****                 // without this, keys with the same keycode, but different
 806:tmk_core/common/action.c ****                 // modifiers will be reported incorrectly, see issue #1708
 807:tmk_core/common/action.c ****                 if (is_key_pressed(keyboard_report, code)) {
 189               		.loc 1 807 17 view .LVU30
 190               		.loc 1 807 21 is_stmt 0 view .LVU31
 191 0012 6C2F      		mov r22,r28
 192 0014 8091 0000 		lds r24,keyboard_report
 193 0018 9091 0000 		lds r25,keyboard_report+1
 194 001c 0E94 0000 		call is_key_pressed
 195               	.LVL12:
 196               		.loc 1 807 20 view .LVU32
 197 0020 8823      		tst r24
 198 0022 01F0      		breq .L8
 808:tmk_core/common/action.c ****                     del_key(code);
 199               		.loc 1 808 21 is_stmt 1 view .LVU33
 200 0024 8C2F      		mov r24,r28
 201 0026 0E94 0000 		call del_key
 202               	.LVL13:
 809:tmk_core/common/action.c ****                     send_keyboard_report();
 203               		.loc 1 809 21 view .LVU34
 204 002a 0E94 0000 		call send_keyboard_report
 205               	.LVL14:
 206               	.L8:
 810:tmk_core/common/action.c ****                 }
 811:tmk_core/common/action.c ****                 add_key(code);
 207               		.loc 1 811 17 view .LVU35
 208 002e 8C2F      		mov r24,r28
 209 0030 0E94 0000 		call add_key
 210               	.LVL15:
 812:tmk_core/common/action.c ****                 send_keyboard_report();
 211               		.loc 1 812 17 view .LVU36
 212               	.L17:
 813:tmk_core/common/action.c ****             }
 814:tmk_core/common/action.c ****         }
 815:tmk_core/common/action.c ****     else if
 816:tmk_core/common/action.c ****         IS_MOD(code) {
 817:tmk_core/common/action.c ****             add_mods(MOD_BIT(code));
 818:tmk_core/common/action.c ****             send_keyboard_report();
 213               		.loc 1 818 13 view .LVU37
 214               	/* epilogue start */
 819:tmk_core/common/action.c ****         }
 820:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 821:tmk_core/common/action.c ****     else if
 822:tmk_core/common/action.c ****         IS_SYSTEM(code) { host_system_send(KEYCODE2SYSTEM(code)); }
 823:tmk_core/common/action.c ****     else if
 824:tmk_core/common/action.c ****         IS_CONSUMER(code) { host_consumer_send(KEYCODE2CONSUMER(code)); }
 825:tmk_core/common/action.c **** #endif
 826:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 827:tmk_core/common/action.c ****     else if
 828:tmk_core/common/action.c ****         IS_MOUSEKEY(code) {
 829:tmk_core/common/action.c ****             mousekey_on(code);
 830:tmk_core/common/action.c ****             mousekey_send();
 831:tmk_core/common/action.c ****         }
 832:tmk_core/common/action.c **** #endif
 833:tmk_core/common/action.c **** }
 215               		.loc 1 833 1 is_stmt 0 view .LVU38
 216 0034 CF91      		pop r28
 818:tmk_core/common/action.c ****         }
 217               		.loc 1 818 13 view .LVU39
 218 0036 0C94 0000 		jmp send_keyboard_report
 219               	.LVL16:
 220               	.L7:
 815:tmk_core/common/action.c ****         IS_MOD(code) {
 221               		.loc 1 815 10 is_stmt 1 view .LVU40
 816:tmk_core/common/action.c ****             add_mods(MOD_BIT(code));
 222               		.loc 1 816 9 is_stmt 0 view .LVU41
 223 003a 80E2      		ldi r24,lo8(32)
 224 003c 8C0F      		add r24,r28
 225 003e 8830      		cpi r24,lo8(8)
 226 0040 00F4      		brsh .L9
 817:tmk_core/common/action.c ****             send_keyboard_report();
 227               		.loc 1 817 13 is_stmt 1 view .LVU42
 817:tmk_core/common/action.c ****             send_keyboard_report();
 228               		.loc 1 817 22 is_stmt 0 view .LVU43
 229 0042 C770      		andi r28,lo8(7)
 230               	.LVL17:
 817:tmk_core/common/action.c ****             send_keyboard_report();
 231               		.loc 1 817 13 view .LVU44
 232 0044 81E0      		ldi r24,lo8(1)
 233 0046 00C0      		rjmp 2f
 234               		1:
 235 0048 880F      		lsl r24
 236               		2:
 237 004a CA95      		dec r28
 238 004c 02F4      		brpl 1b
 239 004e 0E94 0000 		call add_mods
 240               	.LVL18:
 241 0052 00C0      		rjmp .L17
 242               	.LVL19:
 243               	.L9:
 821:tmk_core/common/action.c ****         IS_SYSTEM(code) { host_system_send(KEYCODE2SYSTEM(code)); }
 244               		.loc 1 821 10 is_stmt 1 view .LVU45
 822:tmk_core/common/action.c ****     else if
 245               		.loc 1 822 9 is_stmt 0 view .LVU46
 246 0054 EBE5      		ldi r30,lo8(91)
 247 0056 EC0F      		add r30,r28
 248 0058 E330      		cpi r30,lo8(3)
 249 005a 00F4      		brsh .L10
 822:tmk_core/common/action.c ****     else if
 250               		.loc 1 822 27 is_stmt 1 view .LVU47
 251               	.LVL20:
 252               	.LBB22:
 253               	.LBI22:
 254               		.file 2 "tmk_core/common/report.h"
   1:tmk_core/common/report.h **** /*
   2:tmk_core/common/report.h **** Copyright 2011,2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/report.h **** 
   4:tmk_core/common/report.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/report.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/report.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/report.h **** (at your option) any later version.
   8:tmk_core/common/report.h **** 
   9:tmk_core/common/report.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/report.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/report.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/report.h **** GNU General Public License for more details.
  13:tmk_core/common/report.h **** 
  14:tmk_core/common/report.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/report.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/report.h **** */
  17:tmk_core/common/report.h **** 
  18:tmk_core/common/report.h **** #pragma once
  19:tmk_core/common/report.h **** 
  20:tmk_core/common/report.h **** #include <stdint.h>
  21:tmk_core/common/report.h **** #include <stdbool.h>
  22:tmk_core/common/report.h **** #include "keycode.h"
  23:tmk_core/common/report.h **** 
  24:tmk_core/common/report.h **** // clang-format off
  25:tmk_core/common/report.h **** 
  26:tmk_core/common/report.h **** /* HID report IDs */
  27:tmk_core/common/report.h **** enum hid_report_ids {
  28:tmk_core/common/report.h ****     REPORT_ID_KEYBOARD = 1,
  29:tmk_core/common/report.h ****     REPORT_ID_MOUSE,
  30:tmk_core/common/report.h ****     REPORT_ID_SYSTEM,
  31:tmk_core/common/report.h ****     REPORT_ID_CONSUMER,
  32:tmk_core/common/report.h ****     REPORT_ID_NKRO,
  33:tmk_core/common/report.h ****     REPORT_ID_JOYSTICK
  34:tmk_core/common/report.h **** };
  35:tmk_core/common/report.h **** 
  36:tmk_core/common/report.h **** /* Mouse buttons */
  37:tmk_core/common/report.h **** enum mouse_buttons {
  38:tmk_core/common/report.h ****     MOUSE_BTN1 = (1 << 0),
  39:tmk_core/common/report.h ****     MOUSE_BTN2 = (1 << 1),
  40:tmk_core/common/report.h ****     MOUSE_BTN3 = (1 << 2),
  41:tmk_core/common/report.h ****     MOUSE_BTN4 = (1 << 3),
  42:tmk_core/common/report.h ****     MOUSE_BTN5 = (1 << 4)
  43:tmk_core/common/report.h **** };
  44:tmk_core/common/report.h **** 
  45:tmk_core/common/report.h **** /* Consumer Page (0x0C)
  46:tmk_core/common/report.h ****  *
  47:tmk_core/common/report.h ****  * See https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf#page=75
  48:tmk_core/common/report.h ****  */
  49:tmk_core/common/report.h **** enum consumer_usages {
  50:tmk_core/common/report.h ****     // 15.5 Display Controls
  51:tmk_core/common/report.h ****     SNAPSHOT               = 0x065,
  52:tmk_core/common/report.h ****     BRIGHTNESS_UP          = 0x06F, // https://www.usb.org/sites/default/files/hutrr41_0.pdf
  53:tmk_core/common/report.h ****     BRIGHTNESS_DOWN        = 0x070,
  54:tmk_core/common/report.h ****     // 15.7 Transport Controls
  55:tmk_core/common/report.h ****     TRANSPORT_RECORD       = 0x0B2,
  56:tmk_core/common/report.h ****     TRANSPORT_FAST_FORWARD = 0x0B3,
  57:tmk_core/common/report.h ****     TRANSPORT_REWIND       = 0x0B4,
  58:tmk_core/common/report.h ****     TRANSPORT_NEXT_TRACK   = 0x0B5,
  59:tmk_core/common/report.h ****     TRANSPORT_PREV_TRACK   = 0x0B6,
  60:tmk_core/common/report.h ****     TRANSPORT_STOP         = 0x0B7,
  61:tmk_core/common/report.h ****     TRANSPORT_EJECT        = 0x0B8,
  62:tmk_core/common/report.h ****     TRANSPORT_RANDOM_PLAY  = 0x0B9,
  63:tmk_core/common/report.h ****     TRANSPORT_STOP_EJECT   = 0x0CC,
  64:tmk_core/common/report.h ****     TRANSPORT_PLAY_PAUSE   = 0x0CD,
  65:tmk_core/common/report.h ****     // 15.9.1 Audio Controls - Volume
  66:tmk_core/common/report.h ****     AUDIO_MUTE             = 0x0E2,
  67:tmk_core/common/report.h ****     AUDIO_VOL_UP           = 0x0E9,
  68:tmk_core/common/report.h ****     AUDIO_VOL_DOWN         = 0x0EA,
  69:tmk_core/common/report.h ****     // 15.15 Application Launch Buttons
  70:tmk_core/common/report.h ****     AL_CC_CONFIG           = 0x183,
  71:tmk_core/common/report.h ****     AL_EMAIL               = 0x18A,
  72:tmk_core/common/report.h ****     AL_CALCULATOR          = 0x192,
  73:tmk_core/common/report.h ****     AL_LOCAL_BROWSER       = 0x194,
  74:tmk_core/common/report.h ****     AL_LOCK                = 0x19E,
  75:tmk_core/common/report.h ****     AL_CONTROL_PANEL       = 0x19F,
  76:tmk_core/common/report.h ****     AL_ASSISTANT           = 0x1CB,
  77:tmk_core/common/report.h ****     AL_KEYBOARD_LAYOUT     = 0x1AE,
  78:tmk_core/common/report.h ****     // 15.16 Generic GUI Application Controls
  79:tmk_core/common/report.h ****     AC_MINIMIZE            = 0x206,
  80:tmk_core/common/report.h ****     AC_SEARCH              = 0x221,
  81:tmk_core/common/report.h ****     AC_HOME                = 0x223,
  82:tmk_core/common/report.h ****     AC_BACK                = 0x224,
  83:tmk_core/common/report.h ****     AC_FORWARD             = 0x225,
  84:tmk_core/common/report.h ****     AC_STOP                = 0x226,
  85:tmk_core/common/report.h ****     AC_REFRESH             = 0x227,
  86:tmk_core/common/report.h ****     AC_BOOKMARKS           = 0x22A
  87:tmk_core/common/report.h **** };
  88:tmk_core/common/report.h **** 
  89:tmk_core/common/report.h **** /* Generic Desktop Page (0x01)
  90:tmk_core/common/report.h ****  *
  91:tmk_core/common/report.h ****  * See https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf#page=26
  92:tmk_core/common/report.h ****  */
  93:tmk_core/common/report.h **** enum desktop_usages {
  94:tmk_core/common/report.h ****     // 4.5.1 System Controls - Power Controls
  95:tmk_core/common/report.h ****     SYSTEM_POWER_DOWN = 0x81,
  96:tmk_core/common/report.h ****     SYSTEM_SLEEP      = 0x82,
  97:tmk_core/common/report.h ****     SYSTEM_WAKE_UP    = 0x83
  98:tmk_core/common/report.h **** };
  99:tmk_core/common/report.h **** 
 100:tmk_core/common/report.h **** // clang-format on
 101:tmk_core/common/report.h **** 
 102:tmk_core/common/report.h **** #define NKRO_SHARED_EP
 103:tmk_core/common/report.h **** /* key report size(NKRO or boot mode) */
 104:tmk_core/common/report.h **** #if defined(NKRO_ENABLE)
 105:tmk_core/common/report.h **** #    if defined(PROTOCOL_LUFA) || defined(PROTOCOL_CHIBIOS)
 106:tmk_core/common/report.h **** #        include "protocol/usb_descriptor.h"
 107:tmk_core/common/report.h **** #        define KEYBOARD_REPORT_BITS (SHARED_EPSIZE - 2)
 108:tmk_core/common/report.h **** #    elif defined(PROTOCOL_ARM_ATSAM)
 109:tmk_core/common/report.h **** #        include "protocol/arm_atsam/usb/udi_device_epsize.h"
 110:tmk_core/common/report.h **** #        define KEYBOARD_REPORT_BITS (NKRO_EPSIZE - 1)
 111:tmk_core/common/report.h **** #        undef NKRO_SHARED_EP
 112:tmk_core/common/report.h **** #        undef MOUSE_SHARED_EP
 113:tmk_core/common/report.h **** #    else
 114:tmk_core/common/report.h **** #        error "NKRO not supported with this protocol"
 115:tmk_core/common/report.h **** #    endif
 116:tmk_core/common/report.h **** #endif
 117:tmk_core/common/report.h **** 
 118:tmk_core/common/report.h **** #ifdef KEYBOARD_SHARED_EP
 119:tmk_core/common/report.h **** #    define KEYBOARD_REPORT_SIZE 9
 120:tmk_core/common/report.h **** #else
 121:tmk_core/common/report.h **** #    define KEYBOARD_REPORT_SIZE 8
 122:tmk_core/common/report.h **** #endif
 123:tmk_core/common/report.h **** 
 124:tmk_core/common/report.h **** #define KEYBOARD_REPORT_KEYS 6
 125:tmk_core/common/report.h **** 
 126:tmk_core/common/report.h **** /* VUSB hardcodes keyboard and mouse+extrakey only */
 127:tmk_core/common/report.h **** #if defined(PROTOCOL_VUSB)
 128:tmk_core/common/report.h **** #    undef KEYBOARD_SHARED_EP
 129:tmk_core/common/report.h **** #    undef MOUSE_SHARED_EP
 130:tmk_core/common/report.h **** #endif
 131:tmk_core/common/report.h **** 
 132:tmk_core/common/report.h **** #ifdef __cplusplus
 133:tmk_core/common/report.h **** extern "C" {
 134:tmk_core/common/report.h **** #endif
 135:tmk_core/common/report.h **** 
 136:tmk_core/common/report.h **** /*
 137:tmk_core/common/report.h ****  * keyboard report is 8-byte array retains state of 8 modifiers and 6 keys.
 138:tmk_core/common/report.h ****  *
 139:tmk_core/common/report.h ****  * byte |0       |1       |2       |3       |4       |5       |6       |7
 140:tmk_core/common/report.h ****  * -----+--------+--------+--------+--------+--------+--------+--------+--------
 141:tmk_core/common/report.h ****  * desc |mods    |reserved|keys[0] |keys[1] |keys[2] |keys[3] |keys[4] |keys[5]
 142:tmk_core/common/report.h ****  *
 143:tmk_core/common/report.h ****  * It is exended to 16 bytes to retain 120keys+8mods when NKRO mode.
 144:tmk_core/common/report.h ****  *
 145:tmk_core/common/report.h ****  * byte |0       |1       |2       |3       |4       |5       |6       |7        ... |15
 146:tmk_core/common/report.h ****  * -----+--------+--------+--------+--------+--------+--------+--------+--------     +--------
 147:tmk_core/common/report.h ****  * desc |mods    |bits[0] |bits[1] |bits[2] |bits[3] |bits[4] |bits[5] |bits[6]  ... |bit[14]
 148:tmk_core/common/report.h ****  *
 149:tmk_core/common/report.h ****  * mods retains state of 8 modifiers.
 150:tmk_core/common/report.h ****  *
 151:tmk_core/common/report.h ****  *  bit |0       |1       |2       |3       |4       |5       |6       |7
 152:tmk_core/common/report.h ****  * -----+--------+--------+--------+--------+--------+--------+--------+--------
 153:tmk_core/common/report.h ****  * desc |Lcontrol|Lshift  |Lalt    |Lgui    |Rcontrol|Rshift  |Ralt    |Rgui
 154:tmk_core/common/report.h ****  *
 155:tmk_core/common/report.h ****  */
 156:tmk_core/common/report.h **** typedef union {
 157:tmk_core/common/report.h ****     uint8_t raw[KEYBOARD_REPORT_SIZE];
 158:tmk_core/common/report.h ****     struct {
 159:tmk_core/common/report.h **** #ifdef KEYBOARD_SHARED_EP
 160:tmk_core/common/report.h ****         uint8_t report_id;
 161:tmk_core/common/report.h **** #endif
 162:tmk_core/common/report.h ****         uint8_t mods;
 163:tmk_core/common/report.h ****         uint8_t reserved;
 164:tmk_core/common/report.h ****         uint8_t keys[KEYBOARD_REPORT_KEYS];
 165:tmk_core/common/report.h ****     };
 166:tmk_core/common/report.h **** #ifdef NKRO_ENABLE
 167:tmk_core/common/report.h ****     struct nkro_report {
 168:tmk_core/common/report.h **** #    ifdef NKRO_SHARED_EP
 169:tmk_core/common/report.h ****         uint8_t report_id;
 170:tmk_core/common/report.h **** #    endif
 171:tmk_core/common/report.h ****         uint8_t mods;
 172:tmk_core/common/report.h ****         uint8_t bits[KEYBOARD_REPORT_BITS];
 173:tmk_core/common/report.h ****     } nkro;
 174:tmk_core/common/report.h **** #endif
 175:tmk_core/common/report.h **** } __attribute__((packed)) report_keyboard_t;
 176:tmk_core/common/report.h **** 
 177:tmk_core/common/report.h **** typedef struct {
 178:tmk_core/common/report.h ****     uint8_t  report_id;
 179:tmk_core/common/report.h ****     uint16_t usage;
 180:tmk_core/common/report.h **** } __attribute__((packed)) report_extra_t;
 181:tmk_core/common/report.h **** 
 182:tmk_core/common/report.h **** typedef struct {
 183:tmk_core/common/report.h **** #ifdef MOUSE_SHARED_EP
 184:tmk_core/common/report.h ****     uint8_t report_id;
 185:tmk_core/common/report.h **** #endif
 186:tmk_core/common/report.h ****     uint8_t buttons;
 187:tmk_core/common/report.h ****     int8_t  x;
 188:tmk_core/common/report.h ****     int8_t  y;
 189:tmk_core/common/report.h ****     int8_t  v;
 190:tmk_core/common/report.h ****     int8_t  h;
 191:tmk_core/common/report.h **** } __attribute__((packed)) report_mouse_t;
 192:tmk_core/common/report.h **** 
 193:tmk_core/common/report.h **** typedef struct {
 194:tmk_core/common/report.h **** #if JOYSTICK_AXES_COUNT > 0
 195:tmk_core/common/report.h ****     int8_t axes[JOYSTICK_AXES_COUNT];
 196:tmk_core/common/report.h **** #endif
 197:tmk_core/common/report.h **** 
 198:tmk_core/common/report.h **** #if JOYSTICK_BUTTON_COUNT > 0
 199:tmk_core/common/report.h ****     uint8_t buttons[(JOYSTICK_BUTTON_COUNT - 1) / 8 + 1];
 200:tmk_core/common/report.h **** #endif
 201:tmk_core/common/report.h **** } __attribute__((packed)) joystick_report_t;
 202:tmk_core/common/report.h **** 
 203:tmk_core/common/report.h **** /* keycode to system usage */
 204:tmk_core/common/report.h **** static inline uint16_t KEYCODE2SYSTEM(uint8_t key) {
 255               		.loc 2 204 24 view .LVU48
 256               	.LBE22:
 205:tmk_core/common/report.h ****     switch (key) {
 257               		.loc 2 205 5 view .LVU49
 822:tmk_core/common/action.c ****     else if
 258               		.loc 1 822 27 is_stmt 0 view .LVU50
 259 005c F0E0      		ldi r31,0
 260 005e E050      		subi r30,lo8(-(CSWTCH.10))
 261 0060 F040      		sbci r31,hi8(-(CSWTCH.10))
 262 0062 8081      		ld r24,Z
 263 0064 90E0      		ldi r25,0
 264               	/* epilogue start */
 265               		.loc 1 833 1 view .LVU51
 266 0066 CF91      		pop r28
 267               	.LVL21:
 822:tmk_core/common/action.c ****     else if
 268               		.loc 1 822 27 view .LVU52
 269 0068 0C94 0000 		jmp host_system_send
 270               	.LVL22:
 271               	.L10:
 823:tmk_core/common/action.c ****         IS_CONSUMER(code) { host_consumer_send(KEYCODE2CONSUMER(code)); }
 272               		.loc 1 823 10 is_stmt 1 view .LVU53
 824:tmk_core/common/action.c **** #endif
 273               		.loc 1 824 9 is_stmt 0 view .LVU54
 274 006c C85A      		subi r28,lo8(-(88))
 275               	.LVL23:
 824:tmk_core/common/action.c **** #endif
 276               		.loc 1 824 9 view .LVU55
 277 006e C731      		cpi r28,lo8(23)
 278 0070 00F4      		brsh .L5
 824:tmk_core/common/action.c **** #endif
 279               		.loc 1 824 29 is_stmt 1 view .LVU56
 280               	.LVL24:
 281               	.LBB23:
 282               	.LBI23:
 206:tmk_core/common/report.h ****         case KC_SYSTEM_POWER:
 207:tmk_core/common/report.h ****             return SYSTEM_POWER_DOWN;
 208:tmk_core/common/report.h ****         case KC_SYSTEM_SLEEP:
 209:tmk_core/common/report.h ****             return SYSTEM_SLEEP;
 210:tmk_core/common/report.h ****         case KC_SYSTEM_WAKE:
 211:tmk_core/common/report.h ****             return SYSTEM_WAKE_UP;
 212:tmk_core/common/report.h ****         default:
 213:tmk_core/common/report.h ****             return 0;
 214:tmk_core/common/report.h ****     }
 215:tmk_core/common/report.h **** }
 216:tmk_core/common/report.h **** 
 217:tmk_core/common/report.h **** /* keycode to consumer usage */
 218:tmk_core/common/report.h **** static inline uint16_t KEYCODE2CONSUMER(uint8_t key) {
 283               		.loc 2 218 24 view .LVU57
 284               	.LBE23:
 219:tmk_core/common/report.h ****     switch (key) {
 285               		.loc 2 219 5 view .LVU58
 824:tmk_core/common/action.c **** #endif
 286               		.loc 1 824 29 is_stmt 0 view .LVU59
 287 0072 EC2F      		mov r30,r28
 288 0074 F0E0      		ldi r31,0
 289 0076 EE0F      		lsl r30
 290 0078 FF1F      		rol r31
 291 007a E050      		subi r30,lo8(-(CSWTCH.11))
 292 007c F040      		sbci r31,hi8(-(CSWTCH.11))
 293 007e 8081      		ld r24,Z
 294 0080 9181      		ldd r25,Z+1
 295               	/* epilogue start */
 296               		.loc 1 833 1 view .LVU60
 297 0082 CF91      		pop r28
 298               	.LVL25:
 824:tmk_core/common/action.c **** #endif
 299               		.loc 1 824 29 view .LVU61
 300 0084 0C94 0000 		jmp host_consumer_send
 301               	.LVL26:
 302               	.L5:
 303               	/* epilogue start */
 304               		.loc 1 833 1 view .LVU62
 305 0088 CF91      		pop r28
 306 008a 0895      		ret
 307               		.cfi_endproc
 308               	.LFE116:
 310               		.section	.text.unregister_code,"ax",@progbits
 311               	.global	unregister_code
 313               	unregister_code:
 314               	.LVL27:
 315               	.LFB117:
 834:tmk_core/common/action.c **** 
 835:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 836:tmk_core/common/action.c ****  *
 837:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 838:tmk_core/common/action.c ****  */
 839:tmk_core/common/action.c **** void unregister_code(uint8_t code) {
 316               		.loc 1 839 36 is_stmt 1 view -0
 317               		.cfi_startproc
 318               	/* prologue: function */
 319               	/* frame size = 0 */
 320               	/* stack size = 0 */
 321               	.L__stack_usage = 0
 840:tmk_core/common/action.c ****     if (code == KC_NO) {
 322               		.loc 1 840 5 view .LVU64
 323               		.loc 1 840 8 is_stmt 0 view .LVU65
 324 0000 8823      		tst r24
 325 0002 01F0      		breq .L18
 841:tmk_core/common/action.c ****         return;
 842:tmk_core/common/action.c ****     }
 843:tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 844:tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 845:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 846:tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 847:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1 << USB_LED_CAPS_LOCK))) return;
 848:tmk_core/common/action.c **** #    endif
 849:tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 850:tmk_core/common/action.c ****         send_keyboard_report();
 851:tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 852:tmk_core/common/action.c ****         send_keyboard_report();
 853:tmk_core/common/action.c ****     }
 854:tmk_core/common/action.c **** 
 855:tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 856:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 857:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1 << USB_LED_NUM_LOCK))) return;
 858:tmk_core/common/action.c **** #    endif
 859:tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 860:tmk_core/common/action.c ****         send_keyboard_report();
 861:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 862:tmk_core/common/action.c ****         send_keyboard_report();
 863:tmk_core/common/action.c ****     }
 864:tmk_core/common/action.c **** 
 865:tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 866:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 867:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1 << USB_LED_SCROLL_LOCK))) return;
 868:tmk_core/common/action.c **** #    endif
 869:tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 870:tmk_core/common/action.c ****         send_keyboard_report();
 871:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 872:tmk_core/common/action.c ****         send_keyboard_report();
 873:tmk_core/common/action.c ****     }
 874:tmk_core/common/action.c **** #endif
 875:tmk_core/common/action.c **** 
 876:tmk_core/common/action.c ****     else if
 326               		.loc 1 876 10 is_stmt 1 view .LVU66
 877:tmk_core/common/action.c ****         IS_KEY(code) {
 327               		.loc 1 877 9 is_stmt 0 view .LVU67
 328 0004 9CEF      		ldi r25,lo8(-4)
 329 0006 980F      		add r25,r24
 330 0008 913A      		cpi r25,lo8(-95)
 331 000a 00F4      		brsh .L20
 878:tmk_core/common/action.c ****             del_key(code);
 332               		.loc 1 878 13 is_stmt 1 view .LVU68
 333 000c 0E94 0000 		call del_key
 334               	.LVL28:
 879:tmk_core/common/action.c ****             send_keyboard_report();
 335               		.loc 1 879 13 view .LVU69
 336               	.L26:
 880:tmk_core/common/action.c ****         }
 881:tmk_core/common/action.c ****     else if
 882:tmk_core/common/action.c ****         IS_MOD(code) {
 883:tmk_core/common/action.c ****             del_mods(MOD_BIT(code));
 884:tmk_core/common/action.c ****             send_keyboard_report();
 337               		.loc 1 884 13 view .LVU70
 338 0010 0C94 0000 		jmp send_keyboard_report
 339               	.LVL29:
 340               	.L20:
 881:tmk_core/common/action.c ****         IS_MOD(code) {
 341               		.loc 1 881 10 view .LVU71
 882:tmk_core/common/action.c ****             del_mods(MOD_BIT(code));
 342               		.loc 1 882 9 is_stmt 0 view .LVU72
 343 0014 90E2      		ldi r25,lo8(32)
 344 0016 980F      		add r25,r24
 345 0018 9830      		cpi r25,lo8(8)
 346 001a 00F4      		brsh .L21
 883:tmk_core/common/action.c ****             send_keyboard_report();
 347               		.loc 1 883 13 is_stmt 1 view .LVU73
 883:tmk_core/common/action.c ****             send_keyboard_report();
 348               		.loc 1 883 22 is_stmt 0 view .LVU74
 349 001c 8770      		andi r24,lo8(7)
 350               	.LVL30:
 883:tmk_core/common/action.c ****             send_keyboard_report();
 351               		.loc 1 883 13 view .LVU75
 352 001e 91E0      		ldi r25,lo8(1)
 353 0020 00C0      		rjmp 2f
 354               		1:
 355 0022 990F      		lsl r25
 356               		2:
 357 0024 8A95      		dec r24
 358 0026 02F4      		brpl 1b
 359 0028 892F      		mov r24,r25
 360 002a 0E94 0000 		call del_mods
 361               	.LVL31:
 362 002e 00C0      		rjmp .L26
 363               	.LVL32:
 364               	.L21:
 885:tmk_core/common/action.c ****         }
 886:tmk_core/common/action.c ****     else if
 365               		.loc 1 886 10 is_stmt 1 view .LVU76
 887:tmk_core/common/action.c ****         IS_SYSTEM(code) { host_system_send(0); }
 366               		.loc 1 887 9 is_stmt 0 view .LVU77
 367 0030 9BE5      		ldi r25,lo8(91)
 368 0032 980F      		add r25,r24
 369 0034 9330      		cpi r25,lo8(3)
 370 0036 00F4      		brsh .L22
 371               		.loc 1 887 27 is_stmt 1 discriminator 1 view .LVU78
 372 0038 90E0      		ldi r25,0
 373 003a 80E0      		ldi r24,0
 374               	.LVL33:
 375               		.loc 1 887 27 is_stmt 0 discriminator 1 view .LVU79
 376 003c 0C94 0000 		jmp host_system_send
 377               	.LVL34:
 378               	.L22:
 888:tmk_core/common/action.c ****     else if
 379               		.loc 1 888 10 is_stmt 1 view .LVU80
 889:tmk_core/common/action.c ****         IS_CONSUMER(code) { host_consumer_send(0); }
 380               		.loc 1 889 9 is_stmt 0 view .LVU81
 381 0040 885A      		subi r24,lo8(-(88))
 382               	.LVL35:
 383               		.loc 1 889 9 view .LVU82
 384 0042 8731      		cpi r24,lo8(23)
 385 0044 00F4      		brsh .L18
 386               		.loc 1 889 29 is_stmt 1 discriminator 1 view .LVU83
 387 0046 90E0      		ldi r25,0
 388 0048 80E0      		ldi r24,0
 389               	.LVL36:
 390               		.loc 1 889 29 is_stmt 0 discriminator 1 view .LVU84
 391 004a 0C94 0000 		jmp host_consumer_send
 392               	.LVL37:
 393               	.L18:
 394               	/* epilogue start */
 890:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 891:tmk_core/common/action.c ****     else if
 892:tmk_core/common/action.c ****         IS_MOUSEKEY(code) {
 893:tmk_core/common/action.c ****             mousekey_off(code);
 894:tmk_core/common/action.c ****             mousekey_send();
 895:tmk_core/common/action.c ****         }
 896:tmk_core/common/action.c **** #endif
 897:tmk_core/common/action.c **** }
 395               		.loc 1 897 1 view .LVU85
 396 004e 0895      		ret
 397               		.cfi_endproc
 398               	.LFE117:
 400               		.section	.text.tap_code,"ax",@progbits
 401               	.global	tap_code
 403               	tap_code:
 404               	.LVL38:
 405               	.LFB118:
 898:tmk_core/common/action.c **** 
 899:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 900:tmk_core/common/action.c ****  *
 901:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 902:tmk_core/common/action.c ****  */
 903:tmk_core/common/action.c **** void tap_code(uint8_t code) {
 406               		.loc 1 903 29 is_stmt 1 view -0
 407               		.cfi_startproc
 408               		.loc 1 903 29 is_stmt 0 view .LVU87
 409 0000 CF93      		push r28
 410               	.LCFI5:
 411               		.cfi_def_cfa_offset 3
 412               		.cfi_offset 28, -2
 413               	/* prologue: function */
 414               	/* frame size = 0 */
 415               	/* stack size = 1 */
 416               	.L__stack_usage = 1
 417 0002 C82F      		mov r28,r24
 904:tmk_core/common/action.c ****     register_code(code);
 418               		.loc 1 904 5 is_stmt 1 view .LVU88
 419 0004 0E94 0000 		call register_code
 420               	.LVL39:
 905:tmk_core/common/action.c ****     if (code == KC_CAPS) {
 421               		.loc 1 905 5 view .LVU89
 422               		.loc 1 905 8 is_stmt 0 view .LVU90
 423 0008 C933      		cpi r28,lo8(57)
 424 000a 01F4      		brne .L29
 906:tmk_core/common/action.c ****         wait_ms(TAP_HOLD_CAPS_DELAY);
 425               		.loc 1 906 9 is_stmt 1 view .LVU91
 426               	.LVL40:
 427               	.LBB24:
 428               	.LBI24:
 429               		.file 3 "c:\\msys64\\mingw64\\avr\\include\\util\\delay.h"
   1:c:\msys64\mingw64\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\msys64\mingw64\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\msys64\mingw64\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\msys64\mingw64\avr\include\util\delay.h ****    All rights reserved.
   5:c:\msys64\mingw64\avr\include\util\delay.h **** 
   6:c:\msys64\mingw64\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\msys64\mingw64\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\msys64\mingw64\avr\include\util\delay.h **** 
   9:c:\msys64\mingw64\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\msys64\mingw64\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\msys64\mingw64\avr\include\util\delay.h **** 
  12:c:\msys64\mingw64\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\msys64\mingw64\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\msys64\mingw64\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\msys64\mingw64\avr\include\util\delay.h ****      distribution.
  16:c:\msys64\mingw64\avr\include\util\delay.h **** 
  17:c:\msys64\mingw64\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\msys64\mingw64\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\msys64\mingw64\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\msys64\mingw64\avr\include\util\delay.h **** 
  21:c:\msys64\mingw64\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\msys64\mingw64\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\msys64\mingw64\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\msys64\mingw64\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\msys64\mingw64\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\msys64\mingw64\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\msys64\mingw64\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\msys64\mingw64\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\msys64\mingw64\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\msys64\mingw64\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\msys64\mingw64\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\msys64\mingw64\avr\include\util\delay.h **** 
  33:c:\msys64\mingw64\avr\include\util\delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:c:\msys64\mingw64\avr\include\util\delay.h **** 
  35:c:\msys64\mingw64\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\msys64\mingw64\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\msys64\mingw64\avr\include\util\delay.h **** 
  38:c:\msys64\mingw64\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\msys64\mingw64\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\msys64\mingw64\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\msys64\mingw64\avr\include\util\delay.h **** #  endif
  42:c:\msys64\mingw64\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\msys64\mingw64\avr\include\util\delay.h **** 
  44:c:\msys64\mingw64\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\msys64\mingw64\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\msys64\mingw64\avr\include\util\delay.h **** #include <math.h>
  47:c:\msys64\mingw64\avr\include\util\delay.h **** 
  48:c:\msys64\mingw64\avr\include\util\delay.h **** /** \file */
  49:c:\msys64\mingw64\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\msys64\mingw64\avr\include\util\delay.h ****     \code
  51:c:\msys64\mingw64\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\msys64\mingw64\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\msys64\mingw64\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\msys64\mingw64\avr\include\util\delay.h ****     \endcode
  55:c:\msys64\mingw64\avr\include\util\delay.h **** 
  56:c:\msys64\mingw64\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\msys64\mingw64\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\msys64\mingw64\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\msys64\mingw64\avr\include\util\delay.h ****     used.
  60:c:\msys64\mingw64\avr\include\util\delay.h **** 
  61:c:\msys64\mingw64\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\msys64\mingw64\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\msys64\mingw64\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\msys64\mingw64\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\msys64\mingw64\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\msys64\mingw64\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\msys64\mingw64\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\msys64\mingw64\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\msys64\mingw64\avr\include\util\delay.h **** 
  70:c:\msys64\mingw64\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\msys64\mingw64\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\msys64\mingw64\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\msys64\mingw64\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\msys64\mingw64\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\msys64\mingw64\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\msys64\mingw64\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\msys64\mingw64\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\msys64\mingw64\avr\include\util\delay.h **** 
  79:c:\msys64\mingw64\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\msys64\mingw64\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\msys64\mingw64\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\msys64\mingw64\avr\include\util\delay.h **** 
  83:c:\msys64\mingw64\avr\include\util\delay.h **** */
  84:c:\msys64\mingw64\avr\include\util\delay.h **** 
  85:c:\msys64\mingw64\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\msys64\mingw64\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\msys64\mingw64\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\msys64\mingw64\avr\include\util\delay.h **** #endif
  89:c:\msys64\mingw64\avr\include\util\delay.h **** 
  90:c:\msys64\mingw64\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\msys64\mingw64\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\msys64\mingw64\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\msys64\mingw64\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\msys64\mingw64\avr\include\util\delay.h ****     \def F_CPU
  95:c:\msys64\mingw64\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\msys64\mingw64\avr\include\util\delay.h **** 
  97:c:\msys64\mingw64\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\msys64\mingw64\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\msys64\mingw64\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\msys64\mingw64\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\msys64\mingw64\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\msys64\mingw64\avr\include\util\delay.h **** 
 103:c:\msys64\mingw64\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\msys64\mingw64\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\msys64\mingw64\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\msys64\mingw64\avr\include\util\delay.h ****     integer value.
 107:c:\msys64\mingw64\avr\include\util\delay.h ****  */
 108:c:\msys64\mingw64\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\msys64\mingw64\avr\include\util\delay.h **** #endif
 110:c:\msys64\mingw64\avr\include\util\delay.h **** 
 111:c:\msys64\mingw64\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\msys64\mingw64\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\msys64\mingw64\avr\include\util\delay.h **** #endif
 114:c:\msys64\mingw64\avr\include\util\delay.h **** 
 115:c:\msys64\mingw64\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\msys64\mingw64\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\msys64\mingw64\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\msys64\mingw64\avr\include\util\delay.h **** #  include <math.h>
 119:c:\msys64\mingw64\avr\include\util\delay.h **** #endif
 120:c:\msys64\mingw64\avr\include\util\delay.h **** 
 121:c:\msys64\mingw64\avr\include\util\delay.h **** /**
 122:c:\msys64\mingw64\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\msys64\mingw64\avr\include\util\delay.h **** 
 124:c:\msys64\mingw64\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\msys64\mingw64\avr\include\util\delay.h **** 
 126:c:\msys64\mingw64\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\msys64\mingw64\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\msys64\mingw64\avr\include\util\delay.h **** 
 129:c:\msys64\mingw64\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\msys64\mingw64\avr\include\util\delay.h **** 
 131:c:\msys64\mingw64\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\msys64\mingw64\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\msys64\mingw64\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\msys64\mingw64\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\msys64\mingw64\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\msys64\mingw64\avr\include\util\delay.h **** 
 137:c:\msys64\mingw64\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\msys64\mingw64\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\msys64\mingw64\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\msys64\mingw64\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\msys64\mingw64\avr\include\util\delay.h **** 
 142:c:\msys64\mingw64\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\msys64\mingw64\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\msys64\mingw64\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\msys64\mingw64\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\msys64\mingw64\avr\include\util\delay.h **** 
 147:c:\msys64\mingw64\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\msys64\mingw64\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\msys64\mingw64\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\msys64\mingw64\avr\include\util\delay.h ****    respectively.
 151:c:\msys64\mingw64\avr\include\util\delay.h **** 
 152:c:\msys64\mingw64\avr\include\util\delay.h ****    \note
 153:c:\msys64\mingw64\avr\include\util\delay.h **** 
 154:c:\msys64\mingw64\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\msys64\mingw64\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\msys64\mingw64\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\msys64\mingw64\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\msys64\mingw64\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\msys64\mingw64\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\msys64\mingw64\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\msys64\mingw64\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\msys64\mingw64\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\msys64\mingw64\avr\include\util\delay.h **** 
 164:c:\msys64\mingw64\avr\include\util\delay.h ****  */
 165:c:\msys64\mingw64\avr\include\util\delay.h **** void
 166:c:\msys64\mingw64\avr\include\util\delay.h **** _delay_ms(double __ms)
 430               		.loc 3 166 1 view .LVU92
 431               	.LBB25:
 167:c:\msys64\mingw64\avr\include\util\delay.h **** {
 168:c:\msys64\mingw64\avr\include\util\delay.h **** 	double __tmp ;
 432               		.loc 3 168 2 view .LVU93
 169:c:\msys64\mingw64\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\msys64\mingw64\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\msys64\mingw64\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\msys64\mingw64\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 433               		.loc 3 172 2 view .LVU94
 173:c:\msys64\mingw64\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 434               		.loc 3 173 2 view .LVU95
 174:c:\msys64\mingw64\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 435               		.loc 3 174 2 view .LVU96
 175:c:\msys64\mingw64\avr\include\util\delay.h **** 
 176:c:\msys64\mingw64\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\msys64\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\msys64\mingw64\avr\include\util\delay.h **** 
 179:c:\msys64\mingw64\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\msys64\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\msys64\mingw64\avr\include\util\delay.h **** 
 182:c:\msys64\mingw64\avr\include\util\delay.h **** 	#else
 183:c:\msys64\mingw64\avr\include\util\delay.h **** 		//round up by default
 184:c:\msys64\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 436               		.loc 3 184 3 view .LVU97
 185:c:\msys64\mingw64\avr\include\util\delay.h **** 	#endif
 186:c:\msys64\mingw64\avr\include\util\delay.h **** 
 187:c:\msys64\mingw64\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 437               		.loc 3 187 2 view .LVU98
 438 000c 2FEF      		ldi r18,lo8(255999)
 439 000e 87EE      		ldi r24,hi8(255999)
 440 0010 93E0      		ldi r25,hlo8(255999)
 441 0012 2150      	1:	subi r18,1
 442 0014 8040      		sbci r24,0
 443 0016 9040      		sbci r25,0
 444 0018 01F4      		brne 1b
 445 001a 00C0      		rjmp .
 446 001c 0000      		nop
 447               	.LVL41:
 448               	.L29:
 449               		.loc 3 187 2 is_stmt 0 view .LVU99
 450               	.LBE25:
 451               	.LBE24:
 907:tmk_core/common/action.c ****     } else {
 908:tmk_core/common/action.c ****         wait_ms(TAP_CODE_DELAY);
 909:tmk_core/common/action.c ****     }
 910:tmk_core/common/action.c ****     unregister_code(code);
 452               		.loc 1 910 5 is_stmt 1 view .LVU100
 453 001e 8C2F      		mov r24,r28
 454               	/* epilogue start */
 911:tmk_core/common/action.c **** }
 455               		.loc 1 911 1 is_stmt 0 view .LVU101
 456 0020 CF91      		pop r28
 457               	.LVL42:
 910:tmk_core/common/action.c **** }
 458               		.loc 1 910 5 view .LVU102
 459 0022 0C94 0000 		jmp unregister_code
 460               	.LVL43:
 910:tmk_core/common/action.c **** }
 461               		.loc 1 910 5 view .LVU103
 462               		.cfi_endproc
 463               	.LFE118:
 465               		.section	.text.register_mods,"ax",@progbits
 466               	.global	register_mods
 468               	register_mods:
 469               	.LVL44:
 470               	.LFB119:
 912:tmk_core/common/action.c **** 
 913:tmk_core/common/action.c **** /** \brief Adds the given physically pressed modifiers and sends a keyboard report immediately.
 914:tmk_core/common/action.c ****  *
 915:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to register.
 916:tmk_core/common/action.c ****  */
 917:tmk_core/common/action.c **** void register_mods(uint8_t mods) {
 471               		.loc 1 917 34 is_stmt 1 view -0
 472               		.cfi_startproc
 473               	/* prologue: function */
 474               	/* frame size = 0 */
 475               	/* stack size = 0 */
 476               	.L__stack_usage = 0
 918:tmk_core/common/action.c ****     if (mods) {
 477               		.loc 1 918 5 view .LVU105
 478               		.loc 1 918 8 is_stmt 0 view .LVU106
 479 0000 8823      		tst r24
 480 0002 01F0      		breq .L30
 919:tmk_core/common/action.c ****         add_mods(mods);
 481               		.loc 1 919 9 is_stmt 1 view .LVU107
 482 0004 0E94 0000 		call add_mods
 483               	.LVL45:
 920:tmk_core/common/action.c ****         send_keyboard_report();
 484               		.loc 1 920 9 view .LVU108
 485 0008 0C94 0000 		jmp send_keyboard_report
 486               	.LVL46:
 487               	.L30:
 488               	/* epilogue start */
 921:tmk_core/common/action.c ****     }
 922:tmk_core/common/action.c **** }
 489               		.loc 1 922 1 is_stmt 0 view .LVU109
 490 000c 0895      		ret
 491               		.cfi_endproc
 492               	.LFE119:
 494               		.section	.text.unregister_mods,"ax",@progbits
 495               	.global	unregister_mods
 497               	unregister_mods:
 498               	.LVL47:
 499               	.LFB120:
 923:tmk_core/common/action.c **** 
 924:tmk_core/common/action.c **** /** \brief Removes the given physically pressed modifiers and sends a keyboard report immediately.
 925:tmk_core/common/action.c ****  *
 926:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to unregister.
 927:tmk_core/common/action.c ****  */
 928:tmk_core/common/action.c **** void unregister_mods(uint8_t mods) {
 500               		.loc 1 928 36 is_stmt 1 view -0
 501               		.cfi_startproc
 502               	/* prologue: function */
 503               	/* frame size = 0 */
 504               	/* stack size = 0 */
 505               	.L__stack_usage = 0
 929:tmk_core/common/action.c ****     if (mods) {
 506               		.loc 1 929 5 view .LVU111
 507               		.loc 1 929 8 is_stmt 0 view .LVU112
 508 0000 8823      		tst r24
 509 0002 01F0      		breq .L32
 930:tmk_core/common/action.c ****         del_mods(mods);
 510               		.loc 1 930 9 is_stmt 1 view .LVU113
 511 0004 0E94 0000 		call del_mods
 512               	.LVL48:
 931:tmk_core/common/action.c ****         send_keyboard_report();
 513               		.loc 1 931 9 view .LVU114
 514 0008 0C94 0000 		jmp send_keyboard_report
 515               	.LVL49:
 516               	.L32:
 517               	/* epilogue start */
 932:tmk_core/common/action.c ****     }
 933:tmk_core/common/action.c **** }
 518               		.loc 1 933 1 is_stmt 0 view .LVU115
 519 000c 0895      		ret
 520               		.cfi_endproc
 521               	.LFE120:
 523               		.section	.text.process_action,"ax",@progbits
 524               	.global	process_action
 526               	process_action:
 527               	.LVL50:
 528               	.LFB115:
 227:tmk_core/common/action.c ****     keyevent_t event = record->event;
 529               		.loc 1 227 59 is_stmt 1 view -0
 530               		.cfi_startproc
 227:tmk_core/common/action.c ****     keyevent_t event = record->event;
 531               		.loc 1 227 59 is_stmt 0 view .LVU117
 532 0000 BF92      		push r11
 533               	.LCFI6:
 534               		.cfi_def_cfa_offset 3
 535               		.cfi_offset 11, -2
 536 0002 CF92      		push r12
 537               	.LCFI7:
 538               		.cfi_def_cfa_offset 4
 539               		.cfi_offset 12, -3
 540 0004 DF92      		push r13
 541               	.LCFI8:
 542               		.cfi_def_cfa_offset 5
 543               		.cfi_offset 13, -4
 544 0006 EF92      		push r14
 545               	.LCFI9:
 546               		.cfi_def_cfa_offset 6
 547               		.cfi_offset 14, -5
 548 0008 FF92      		push r15
 549               	.LCFI10:
 550               		.cfi_def_cfa_offset 7
 551               		.cfi_offset 15, -6
 552 000a 0F93      		push r16
 553               	.LCFI11:
 554               		.cfi_def_cfa_offset 8
 555               		.cfi_offset 16, -7
 556 000c 1F93      		push r17
 557               	.LCFI12:
 558               		.cfi_def_cfa_offset 9
 559               		.cfi_offset 17, -8
 560 000e CF93      		push r28
 561               	.LCFI13:
 562               		.cfi_def_cfa_offset 10
 563               		.cfi_offset 28, -9
 564 0010 DF93      		push r29
 565               	.LCFI14:
 566               		.cfi_def_cfa_offset 11
 567               		.cfi_offset 29, -10
 568               	/* prologue: function */
 569               	/* frame size = 0 */
 570               	/* stack size = 9 */
 571               	.L__stack_usage = 9
 572 0012 7C01      		movw r14,r24
 573 0014 D62F      		mov r29,r22
 227:tmk_core/common/action.c ****     keyevent_t event = record->event;
 574               		.loc 1 227 59 view .LVU118
 575 0016 C72F      		mov r28,r23
 228:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 576               		.loc 1 228 5 is_stmt 1 view .LVU119
 577               	.LVL51:
 230:tmk_core/common/action.c **** #endif
 578               		.loc 1 230 5 view .LVU120
 230:tmk_core/common/action.c **** #endif
 579               		.loc 1 230 36 is_stmt 0 view .LVU121
 580 0018 FC01      		movw r30,r24
 581 001a 0581      		ldd r16,Z+5
 582 001c 0295      		swap r16
 583 001e 0F70      		andi r16,lo8(15)
 584               	.LVL52:
 233:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 585               		.loc 1 233 5 is_stmt 1 view .LVU122
 233:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 586               		.loc 1 233 14 is_stmt 0 view .LVU123
 587 0020 1281      		ldd r17,Z+2
 233:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 588               		.loc 1 233 8 view .LVU124
 589 0022 1111      		cpse r17,__zero_reg__
 235:tmk_core/common/action.c ****     }
 590               		.loc 1 235 9 is_stmt 1 view .LVU125
 591 0024 0E94 0000 		call clear_weak_mods
 592               	.LVL53:
 593               	.L35:
 239:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 594               		.loc 1 239 5 view .LVU126
 241:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 595               		.loc 1 241 5 view .LVU127
 241:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 596               		.loc 1 241 9 is_stmt 0 view .LVU128
 597 0028 0E94 0000 		call is_oneshot_layer_active
 598               	.LVL54:
 241:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 599               		.loc 1 241 9 view .LVU129
 600 002c D82E      		mov r13,r24
 241:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 601               		.loc 1 241 8 view .LVU130
 602 002e 8823      		tst r24
 603 0030 01F0      		breq .L36
 241:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 604               		.loc 1 241 35 discriminator 1 view .LVU131
 605 0032 1123      		tst r17
 606 0034 01F0      		breq .L110
 241:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 607               		.loc 1 241 71 discriminator 2 view .LVU132
 608 0036 8C2F      		mov r24,r28
 609 0038 807F      		andi r24,lo8(-16)
 241:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 610               		.loc 1 241 52 discriminator 2 view .LVU133
 611 003a 8034      		cpi r24,lo8(64)
 612 003c 01F0      		breq .L37
 241:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 613               		.loc 1 241 87 discriminator 3 view .LVU134
 614 003e 80E2      		ldi r24,lo8(32)
 615               	.LVL55:
 241:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 616               		.loc 1 241 87 discriminator 3 view .LVU135
 617 0040 8D0F      		add r24,r29
 241:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 618               		.loc 1 241 84 discriminator 3 view .LVU136
 619 0042 8830      		cpi r24,lo8(8)
 620 0044 00F0      		brlo .L110
 621               	.L37:
 246:tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 622               		.loc 1 246 9 is_stmt 1 view .LVU137
 623 0046 82E0      		ldi r24,lo8(2)
 624 0048 0E94 0000 		call clear_oneshot_layer_state
 625               	.LVL56:
 247:tmk_core/common/action.c ****     }
 626               		.loc 1 247 9 view .LVU138
 247:tmk_core/common/action.c ****     }
 627               		.loc 1 247 31 is_stmt 0 view .LVU139
 628 004c 0E94 0000 		call is_oneshot_layer_active
 629               	.LVL57:
 247:tmk_core/common/action.c ****     }
 630               		.loc 1 247 9 view .LVU140
 631 0050 91E0      		ldi r25,lo8(1)
 632 0052 D82E      		mov r13,r24
 633 0054 D926      		eor r13,r25
 634               	.LVL58:
 635               	.L36:
 251:tmk_core/common/action.c ****         /* Key and Mods */
 636               		.loc 1 251 5 is_stmt 1 view .LVU141
 251:tmk_core/common/action.c ****         /* Key and Mods */
 637               		.loc 1 251 24 is_stmt 0 view .LVU142
 638 0056 CC2E      		mov r12,r28
 639 0058 C294      		swap r12
 640 005a 9FE0      		ldi r25,lo8(15)
 641 005c C922      		and r12,r25
 251:tmk_core/common/action.c ****         /* Key and Mods */
 642               		.loc 1 251 5 view .LVU143
 643 005e FBE0      		ldi r31,lo8(11)
 644 0060 FC15      		cp r31,r12
 645 0062 00F0      		brlo .L38
 646 0064 EC2D      		mov r30,r12
 647 0066 F0E0      		ldi r31,0
 648 0068 E050      		subi r30,lo8(-(gs(.L40)))
 649 006a F040      		sbci r31,hi8(-(gs(.L40)))
 650 006c 0C94 0000 		jmp __tablejump2__
 651               		.section	.jumptables.gcc.process_action,"a",@progbits
 652               		.p2align	1
 653               	.L40:
 654 0000 0000      		.word gs(.L45)
 655 0002 0000      		.word gs(.L45)
 656 0004 0000      		.word gs(.L44)
 657 0006 0000      		.word gs(.L44)
 658 0008 0000      		.word gs(.L43)
 659 000a 0000      		.word gs(.L38)
 660 000c 0000      		.word gs(.L38)
 661 000e 0000      		.word gs(.L38)
 662 0010 0000      		.word gs(.L42)
 663 0012 0000      		.word gs(.L41)
 664 0014 0000      		.word gs(.L39)
 665 0016 0000      		.word gs(.L39)
 666               		.section	.text.process_action
 667               	.LVL59:
 668               	.L110:
 239:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 669               		.loc 1 239 10 view .LVU144
 670 0070 D12C      		mov r13,__zero_reg__
 671 0072 00C0      		rjmp .L36
 672               	.LVL60:
 673               	.L45:
 674               	.LBB26:
 255:tmk_core/common/action.c ****             if (event.pressed) {
 675               		.loc 1 255 13 is_stmt 1 view .LVU145
 676 0074 0C2F      		mov r16,r28
 677               	.LVL61:
 255:tmk_core/common/action.c ****             if (event.pressed) {
 678               		.loc 1 255 13 is_stmt 0 view .LVU146
 679 0076 0F70      		andi r16,lo8(15)
 255:tmk_core/common/action.c ****             if (event.pressed) {
 680               		.loc 1 255 44 view .LVU147
 681 0078 C07F      		andi r28,lo8(-16)
 682               	.LVL62:
 255:tmk_core/common/action.c ****             if (event.pressed) {
 683               		.loc 1 255 21 view .LVU148
 684 007a 01F0      		breq .L46
 255:tmk_core/common/action.c ****             if (event.pressed) {
 685               		.loc 1 255 21 discriminator 2 view .LVU149
 686 007c 0295      		swap r16
 687 007e 007F      		andi r16,lo8(-16)
 688               	.L46:
 689               	.LVL63:
 256:tmk_core/common/action.c ****                 if (mods) {
 690               		.loc 1 256 13 is_stmt 1 discriminator 4 view .LVU150
 256:tmk_core/common/action.c ****                 if (mods) {
 691               		.loc 1 256 16 is_stmt 0 discriminator 4 view .LVU151
 692 0080 1123      		tst r17
 693 0082 01F0      		breq .L47
 257:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 694               		.loc 1 257 17 is_stmt 1 view .LVU152
 257:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 695               		.loc 1 257 20 is_stmt 0 view .LVU153
 696 0084 0023      		tst r16
 697 0086 01F0      		breq .L143
 258:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 698               		.loc 1 258 21 is_stmt 1 view .LVU154
 258:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 699               		.loc 1 258 25 is_stmt 0 view .LVU155
 700 0088 80E2      		ldi r24,lo8(32)
 701 008a 8D0F      		add r24,r29
 258:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 702               		.loc 1 258 24 view .LVU156
 703 008c 8830      		cpi r24,lo8(8)
 704 008e 00F0      		brlo .L49
 258:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 705               		.loc 1 258 49 discriminator 1 view .LVU157
 706 0090 D111      		cpse r29,__zero_reg__
 707 0092 00C0      		rjmp .L50
 708               	.L49:
 262:tmk_core/common/action.c ****                     } else {
 709               		.loc 1 262 25 is_stmt 1 view .LVU158
 710 0094 802F      		mov r24,r16
 711 0096 0E94 0000 		call add_mods
 712               	.LVL64:
 713               	.L51:
 266:tmk_core/common/action.c ****                 }
 714               		.loc 1 266 21 view .LVU159
 715 009a 0E94 0000 		call send_keyboard_report
 716               	.LVL65:
 268:tmk_core/common/action.c ****             } else {
 717               		.loc 1 268 17 view .LVU160
 718               	.L143:
 268:tmk_core/common/action.c ****             } else {
 719               		.loc 1 268 17 is_stmt 0 view .LVU161
 720               	.LBE26:
 565:tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 721               		.loc 1 565 75 is_stmt 1 view .LVU162
 566:tmk_core/common/action.c ****                         } else {
 722               		.loc 1 566 29 view .LVU163
 723 009e 8D2F      		mov r24,r29
 724 00a0 0E94 0000 		call register_code
 725               	.LVL66:
 726 00a4 00C0      		rjmp .L38
 727               	.LVL67:
 728               	.L50:
 729               	.LBB27:
 264:tmk_core/common/action.c ****                     }
 730               		.loc 1 264 25 view .LVU164
 731 00a6 802F      		mov r24,r16
 732 00a8 0E94 0000 		call add_weak_mods
 733               	.LVL68:
 734 00ac 00C0      		rjmp .L51
 735               	.L47:
 270:tmk_core/common/action.c ****                 if (mods) {
 736               		.loc 1 270 17 view .LVU165
 737 00ae 8D2F      		mov r24,r29
 738 00b0 0E94 0000 		call unregister_code
 739               	.LVL69:
 271:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 740               		.loc 1 271 17 view .LVU166
 271:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 741               		.loc 1 271 20 is_stmt 0 view .LVU167
 742 00b4 0023      		tst r16
 743 00b6 01F0      		breq .L38
 272:tmk_core/common/action.c ****                         del_mods(mods);
 744               		.loc 1 272 21 is_stmt 1 view .LVU168
 272:tmk_core/common/action.c ****                         del_mods(mods);
 745               		.loc 1 272 25 is_stmt 0 view .LVU169
 746 00b8 80E2      		ldi r24,lo8(32)
 747 00ba 8D0F      		add r24,r29
 272:tmk_core/common/action.c ****                         del_mods(mods);
 748               		.loc 1 272 24 view .LVU170
 749 00bc 8830      		cpi r24,lo8(8)
 750 00be 00F0      		brlo .L53
 272:tmk_core/common/action.c ****                         del_mods(mods);
 751               		.loc 1 272 49 discriminator 1 view .LVU171
 752 00c0 D111      		cpse r29,__zero_reg__
 753 00c2 00C0      		rjmp .L54
 754               	.L53:
 273:tmk_core/common/action.c ****                     } else {
 755               		.loc 1 273 25 is_stmt 1 view .LVU172
 756 00c4 802F      		mov r24,r16
 757 00c6 0E94 0000 		call del_mods
 758               	.LVL70:
 759               	.L55:
 277:tmk_core/common/action.c ****                 }
 760               		.loc 1 277 21 view .LVU173
 761 00ca 0E94 0000 		call send_keyboard_report
 762               	.LVL71:
 763               	.L38:
 277:tmk_core/common/action.c ****                 }
 764               		.loc 1 277 21 is_stmt 0 view .LVU174
 765               	.LBE27:
 680:tmk_core/common/action.c ****         case ACT_LAYER:
 766               		.loc 1 680 5 is_stmt 1 view .LVU175
 767 00ce EC2D      		mov r30,r12
 768 00d0 E850      		subi r30,8
 769 00d2 FF0B      		sbc r31,r31
 770 00d4 3497      		sbiw r30,4
 771 00d6 00F4      		brsh .L105
 687:tmk_core/common/action.c ****             break;
 772               		.loc 1 687 13 view .LVU176
 773 00d8 0E94 0000 		call host_keyboard_leds
 774               	.LVL72:
 775 00dc 0E94 0000 		call led_set
 776               	.LVL73:
 688:tmk_core/common/action.c ****         default:
 777               		.loc 1 688 13 view .LVU177
 778               	.L105:
 730:tmk_core/common/action.c ****         record->event.pressed = false;
 779               		.loc 1 730 5 view .LVU178
 730:tmk_core/common/action.c ****         record->event.pressed = false;
 780               		.loc 1 730 8 is_stmt 0 view .LVU179
 781 00e0 DD20      		tst r13
 782 00e2 01F4      		brne .+2
 783 00e4 00C0      		rjmp .L34
 730:tmk_core/common/action.c ****         record->event.pressed = false;
 784               		.loc 1 730 33 discriminator 1 view .LVU180
 785 00e6 0E94 0000 		call get_oneshot_layer_state
 786               	.LVL74:
 730:tmk_core/common/action.c ****         record->event.pressed = false;
 787               		.loc 1 730 28 discriminator 1 view .LVU181
 788 00ea 80FD      		sbrc r24,0
 789 00ec 00C0      		rjmp .L34
 731:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 790               		.loc 1 731 9 is_stmt 1 view .LVU182
 731:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 791               		.loc 1 731 31 is_stmt 0 view .LVU183
 792 00ee F701      		movw r30,r14
 793 00f0 1282      		std Z+2,__zero_reg__
 732:tmk_core/common/action.c ****         process_record(record);
 794               		.loc 1 732 9 is_stmt 1 view .LVU184
 795 00f2 0E94 0000 		call get_oneshot_layer
 796               	.LVL75:
 797 00f6 0E94 0000 		call layer_on
 798               	.LVL76:
 733:tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 799               		.loc 1 733 9 view .LVU185
 800 00fa C701      		movw r24,r14
 801 00fc 0E94 0000 		call process_record
 802               	.LVL77:
 734:tmk_core/common/action.c ****     }
 803               		.loc 1 734 9 view .LVU186
 804 0100 0E94 0000 		call get_oneshot_layer
 805               	.LVL78:
 806               	/* epilogue start */
 737:tmk_core/common/action.c **** 
 807               		.loc 1 737 1 is_stmt 0 view .LVU187
 808 0104 DF91      		pop r29
 809               	.LVL79:
 737:tmk_core/common/action.c **** 
 810               		.loc 1 737 1 view .LVU188
 811 0106 CF91      		pop r28
 737:tmk_core/common/action.c **** 
 812               		.loc 1 737 1 view .LVU189
 813 0108 1F91      		pop r17
 814 010a 0F91      		pop r16
 815 010c FF90      		pop r15
 816 010e EF90      		pop r14
 817               	.LVL80:
 737:tmk_core/common/action.c **** 
 818               		.loc 1 737 1 view .LVU190
 819 0110 DF90      		pop r13
 820               	.LVL81:
 737:tmk_core/common/action.c **** 
 821               		.loc 1 737 1 view .LVU191
 822 0112 CF90      		pop r12
 823 0114 BF90      		pop r11
 734:tmk_core/common/action.c ****     }
 824               		.loc 1 734 9 view .LVU192
 825 0116 0C94 0000 		jmp layer_off
 826               	.LVL82:
 827               	.L54:
 828               	.LBB28:
 275:tmk_core/common/action.c ****                     }
 829               		.loc 1 275 25 is_stmt 1 view .LVU193
 830 011a 802F      		mov r24,r16
 831 011c 0E94 0000 		call del_weak_mods
 832               	.LVL83:
 833 0120 00C0      		rjmp .L55
 834               	.LVL84:
 835               	.L44:
 275:tmk_core/common/action.c ****                     }
 836               		.loc 1 275 25 is_stmt 0 view .LVU194
 837               	.LBE28:
 838               	.LBB29:
 284:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 839               		.loc 1 284 13 is_stmt 1 view .LVU195
 840 0122 2C2F      		mov r18,r28
 841 0124 2F70      		andi r18,lo8(15)
 842 0126 B22E      		mov r11,r18
 284:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 843               		.loc 1 284 44 is_stmt 0 view .LVU196
 844 0128 C07F      		andi r28,lo8(-16)
 845               	.LVL85:
 284:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 846               		.loc 1 284 21 view .LVU197
 847 012a C032      		cpi r28,lo8(32)
 848 012c 01F0      		breq .L56
 284:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 849               		.loc 1 284 21 discriminator 2 view .LVU198
 850 012e B294      		swap r11
 851 0130 80EF      		ldi r24,lo8(-16)
 852 0132 B822      		and r11,r24
 853               	.L56:
 854               	.LVL86:
 285:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 855               		.loc 1 285 13 is_stmt 1 discriminator 4 view .LVU199
 856 0134 DD23      		tst r29
 857 0136 01F0      		breq .L57
 858 0138 D130      		cpi r29,lo8(1)
 859 013a 01F0      		breq .L58
 340:tmk_core/common/action.c ****                         if (tap_count > 0) {
 860               		.loc 1 340 21 view .LVU200
 340:tmk_core/common/action.c ****                         if (tap_count > 0) {
 861               		.loc 1 340 24 is_stmt 0 view .LVU201
 862 013c 1123      		tst r17
 863 013e 01F0      		breq .L66
 341:tmk_core/common/action.c **** #    if !defined(IGNORE_MOD_TAP_INTERRUPT) || defined(IGNORE_MOD_TAP_INTERRUPT_PER_KEY)
 864               		.loc 1 341 25 is_stmt 1 view .LVU202
 341:tmk_core/common/action.c **** #    if !defined(IGNORE_MOD_TAP_INTERRUPT) || defined(IGNORE_MOD_TAP_INTERRUPT_PER_KEY)
 865               		.loc 1 341 28 is_stmt 0 view .LVU203
 866 0140 0023      		tst r16
 867 0142 01F0      		breq .L67
 868 0144 00C0      		rjmp .L143
 869               	.L57:
 289:tmk_core/common/action.c ****                         if (tap_count == 0) {
 870               		.loc 1 289 21 is_stmt 1 view .LVU204
 289:tmk_core/common/action.c ****                         if (tap_count == 0) {
 871               		.loc 1 289 24 is_stmt 0 view .LVU205
 872 0146 1123      		tst r17
 873 0148 01F0      		breq .L60
 290:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: 0\n");
 874               		.loc 1 290 25 is_stmt 1 view .LVU206
 290:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: 0\n");
 875               		.loc 1 290 28 is_stmt 0 view .LVU207
 876 014a 0111      		cpse r16,__zero_reg__
 877 014c 00C0      		rjmp .L61
 878               	.L62:
 304:tmk_core/common/action.c ****                         }
 879               		.loc 1 304 29 is_stmt 1 view .LVU208
 304:tmk_core/common/action.c ****                         }
 880               		.loc 1 304 50 is_stmt 0 view .LVU209
 881 014e 0E94 0000 		call get_oneshot_mods
 882               	.LVL87:
 304:tmk_core/common/action.c ****                         }
 883               		.loc 1 304 29 view .LVU210
 884 0152 8B29      		or r24,r11
 885               	.LVL88:
 886               	.L142:
 304:tmk_core/common/action.c ****                         }
 887               		.loc 1 304 29 view .LVU211
 888               	.LBE29:
 492:tmk_core/common/action.c ****             } else {
 889               		.loc 1 492 17 view .LVU212
 890 0154 0E94 0000 		call register_mods
 891               	.LVL89:
 892 0158 00C0      		rjmp .L38
 893               	.LVL90:
 894               	.L61:
 895               	.LBB32:
 293:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: start\n");
 896               		.loc 1 293 32 is_stmt 1 view .LVU213
 293:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: start\n");
 897               		.loc 1 293 35 is_stmt 0 view .LVU214
 898 015a 0130      		cpi r16,lo8(1)
 899 015c 01F4      		brne .L62
 294:tmk_core/common/action.c ****                             set_oneshot_mods(mods | get_oneshot_mods());
 900               		.loc 1 294 65 is_stmt 1 view .LVU215
 295:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 901               		.loc 1 295 29 view .LVU216
 295:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 902               		.loc 1 295 53 is_stmt 0 view .LVU217
 903 015e 0E94 0000 		call get_oneshot_mods
 904               	.LVL91:
 295:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 905               		.loc 1 295 29 view .LVU218
 906 0162 8B29      		or r24,r11
 907 0164 0E94 0000 		call set_oneshot_mods
 908               	.LVL92:
 909 0168 00C0      		rjmp .L38
 910               	.L60:
 307:tmk_core/common/action.c ****                             clear_oneshot_mods();
 911               		.loc 1 307 25 is_stmt 1 view .LVU219
 307:tmk_core/common/action.c ****                             clear_oneshot_mods();
 912               		.loc 1 307 28 is_stmt 0 view .LVU220
 913 016a 0111      		cpse r16,__zero_reg__
 914 016c 00C0      		rjmp .L63
 915               	.L145:
 322:tmk_core/common/action.c ****                             unregister_mods(mods);
 916               		.loc 1 322 29 is_stmt 1 view .LVU221
 917 016e 0E94 0000 		call clear_oneshot_mods
 918               	.LVL93:
 323:tmk_core/common/action.c ****                         }
 919               		.loc 1 323 29 view .LVU222
 920               	.L68:
 372:tmk_core/common/action.c ****                             unregister_mods(mods);
 921               		.loc 1 372 67 view .LVU223
 373:tmk_core/common/action.c ****                         }
 922               		.loc 1 373 29 view .LVU224
 923 0172 8B2D      		mov r24,r11
 924 0174 0E94 0000 		call unregister_mods
 925               	.LVL94:
 926 0178 00C0      		rjmp .L38
 927               	.L63:
 310:tmk_core/common/action.c ****                             // Retain Oneshot mods
 928               		.loc 1 310 32 view .LVU225
 310:tmk_core/common/action.c ****                             // Retain Oneshot mods
 929               		.loc 1 310 35 is_stmt 0 view .LVU226
 930 017a 0130      		cpi r16,lo8(1)
 931 017c 01F4      		brne .+2
 932 017e 00C0      		rjmp .L38
 933 0180 00C0      		rjmp .L145
 934               	.L58:
 329:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 935               		.loc 1 329 21 is_stmt 1 view .LVU227
 329:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 936               		.loc 1 329 24 is_stmt 0 view .LVU228
 937 0182 1123      		tst r17
 938 0184 01F0      		breq .L65
 330:tmk_core/common/action.c ****                             register_mods(mods);
 939               		.loc 1 330 25 is_stmt 1 view .LVU229
 330:tmk_core/common/action.c ****                             register_mods(mods);
 940               		.loc 1 330 28 is_stmt 0 view .LVU230
 941 0186 0630      		cpi r16,lo8(6)
 942 0188 00F0      		brlo .+2
 943 018a 00C0      		rjmp .L38
 944               	.L67:
 359:tmk_core/common/action.c ****                             register_mods(mods);
 945               		.loc 1 359 67 is_stmt 1 view .LVU231
 360:tmk_core/common/action.c ****                         }
 946               		.loc 1 360 29 view .LVU232
 947 018c 8B2D      		mov r24,r11
 948 018e 00C0      		rjmp .L142
 949               	.L65:
 334:tmk_core/common/action.c ****                             unregister_mods(mods);
 950               		.loc 1 334 25 view .LVU233
 334:tmk_core/common/action.c ****                             unregister_mods(mods);
 951               		.loc 1 334 28 is_stmt 0 view .LVU234
 952 0190 0530      		cpi r16,lo8(5)
 953 0192 00F0      		brlo .+2
 954 0194 00C0      		rjmp .L38
 955 0196 00C0      		rjmp .L68
 956               	.L66:
 363:tmk_core/common/action.c ****                             dprint("MODS_TAP: Tap: unregister_code\n");
 957               		.loc 1 363 25 is_stmt 1 view .LVU235
 363:tmk_core/common/action.c ****                             dprint("MODS_TAP: Tap: unregister_code\n");
 958               		.loc 1 363 28 is_stmt 0 view .LVU236
 959 0198 0023      		tst r16
 960 019a 01F0      		breq .L68
 364:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 961               		.loc 1 364 71 is_stmt 1 view .LVU237
 365:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 962               		.loc 1 365 29 view .LVU238
 365:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 963               		.loc 1 365 32 is_stmt 0 view .LVU239
 964 019c D933      		cpi r29,lo8(57)
 965 019e 01F4      		brne .L104
 366:tmk_core/common/action.c ****                             } else {
 966               		.loc 1 366 33 is_stmt 1 view .LVU240
 967               	.LVL95:
 968               	.LBB30:
 969               	.LBI30:
 166:c:\msys64\mingw64\avr\include\util\delay.h **** {
 970               		.loc 3 166 1 view .LVU241
 971               	.LBB31:
 168:c:\msys64\mingw64\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 972               		.loc 3 168 2 view .LVU242
 172:c:\msys64\mingw64\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 973               		.loc 3 172 2 view .LVU243
 173:c:\msys64\mingw64\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 974               		.loc 3 173 2 view .LVU244
 174:c:\msys64\mingw64\avr\include\util\delay.h **** 
 975               		.loc 3 174 2 view .LVU245
 184:c:\msys64\mingw64\avr\include\util\delay.h **** 	#endif
 976               		.loc 3 184 3 view .LVU246
 977               		.loc 3 187 2 view .LVU247
 978 01a0 3FEF      		ldi r19,lo8(255999)
 979 01a2 87EE      		ldi r24,hi8(255999)
 980 01a4 93E0      		ldi r25,hlo8(255999)
 981 01a6 3150      	1:	subi r19,1
 982 01a8 8040      		sbci r24,0
 983 01aa 9040      		sbci r25,0
 984 01ac 01F4      		brne 1b
 985               	.LVL96:
 986               	.L146:
 987               		.loc 3 187 2 is_stmt 0 view .LVU248
 988               	.LBE31:
 989               	.LBE30:
 990               	.LBE32:
 991               	.LBB33:
 992               	.LBB34:
 993 01ae 00C0      		rjmp .
 994 01b0 0000      		nop
 995               	.L104:
 996               	.LBE34:
 997               	.LBE33:
 579:tmk_core/common/action.c ****                         } else {
 998               		.loc 1 579 29 is_stmt 1 view .LVU249
 999 01b2 8D2F      		mov r24,r29
 1000 01b4 0E94 0000 		call unregister_code
 1001               	.LVL97:
 1002 01b8 00C0      		rjmp .L38
 1003               	.L43:
 383:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1004               		.loc 1 383 13 view .LVU250
 383:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1005               		.loc 1 383 33 is_stmt 0 view .LVU251
 1006 01ba 8C2F      		mov r24,r28
 1007 01bc 8695      		lsr r24
 1008 01be 8695      		lsr r24
 1009 01c0 8370      		andi r24,lo8(3)
 1010 01c2 01F0      		breq .L71
 1011 01c4 8130      		cpi r24,lo8(1)
 1012 01c6 01F0      		breq .+2
 1013 01c8 00C0      		rjmp .L38
 392:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1014               		.loc 1 392 21 is_stmt 1 view .LVU252
 393:tmk_core/common/action.c ****                     } else {
 1015               		.loc 1 393 25 is_stmt 0 view .LVU253
 1016 01ca 8D2F      		mov r24,r29
 1017 01cc 9C2F      		mov r25,r28
 1018 01ce 9370      		andi r25,lo8(3)
 392:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1019               		.loc 1 392 24 view .LVU254
 1020 01d0 1111      		cpse r17,__zero_reg__
 1021 01d2 00C0      		rjmp .L144
 395:tmk_core/common/action.c ****                     }
 1022               		.loc 1 395 25 is_stmt 1 view .LVU255
 1023 01d4 90E0      		ldi r25,0
 1024 01d6 80E0      		ldi r24,0
 1025               	.L144:
 1026 01d8 0E94 0000 		call host_consumer_send
 1027               	.LVL98:
 1028 01dc 00C0      		rjmp .L38
 1029               	.L71:
 385:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1030               		.loc 1 385 21 view .LVU256
 386:tmk_core/common/action.c ****                     } else {
 1031               		.loc 1 386 25 is_stmt 0 view .LVU257
 1032 01de 8D2F      		mov r24,r29
 1033 01e0 9C2F      		mov r25,r28
 1034 01e2 9370      		andi r25,lo8(3)
 385:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1035               		.loc 1 385 24 view .LVU258
 1036 01e4 1111      		cpse r17,__zero_reg__
 1037 01e6 00C0      		rjmp .L139
 388:tmk_core/common/action.c ****                     }
 1038               		.loc 1 388 25 is_stmt 1 view .LVU259
 1039 01e8 90E0      		ldi r25,0
 1040 01ea 80E0      		ldi r24,0
 1041               	.L139:
 1042 01ec 0E94 0000 		call host_system_send
 1043               	.LVL99:
 1044 01f0 00C0      		rjmp .L38
 1045               	.L42:
 445:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1046               		.loc 1 445 13 view .LVU260
 445:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1047               		.loc 1 445 39 is_stmt 0 view .LVU261
 1048 01f2 8C2F      		mov r24,r28
 1049 01f4 8370      		andi r24,lo8(3)
 445:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1050               		.loc 1 445 16 view .LVU262
 1051 01f6 01F0      		breq .+2
 1052 01f8 00C0      		rjmp .L75
 447:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1053               		.loc 1 447 17 is_stmt 1 view .LVU263
 447:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1054               		.loc 1 447 20 is_stmt 0 view .LVU264
 1055 01fa 1111      		cpse r17,__zero_reg__
 1056 01fc 00C0      		rjmp .L38
 1057               	.LBB36:
 448:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1058               		.loc 1 448 21 is_stmt 1 view .LVU265
 1059               	.LVL100:
 449:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1060               		.loc 1 449 21 view .LVU266
 448:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1061               		.loc 1 448 61 is_stmt 0 view .LVU267
 1062 01fe 4D2F      		mov r20,r29
 1063 0200 4295      		swap r20
 1064 0202 4695      		lsr r20
 1065 0204 4770      		andi r20,lo8(7)
 448:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1066               		.loc 1 448 35 view .LVU268
 1067 0206 440F      		lsl r20
 1068 0208 440F      		lsl r20
 449:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1069               		.loc 1 449 77 view .LVU269
 1070 020a 0D2F      		mov r16,r29
 1071               	.LVL101:
 449:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1072               		.loc 1 449 77 view .LVU270
 1073 020c 0F70      		andi r16,lo8(15)
 449:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1074               		.loc 1 449 44 view .LVU271
 1075 020e 10E0      		ldi r17,0
 1076               	.LVL102:
 449:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1077               		.loc 1 449 44 view .LVU272
 1078 0210 30E0      		ldi r19,0
 1079 0212 20E0      		ldi r18,0
 449:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1080               		.loc 1 449 35 view .LVU273
 1081 0214 042E      		mov r0,r20
 1082 0216 00C0      		rjmp 2f
 1083               		1:
 1084 0218 000F      		lsl r16
 1085 021a 111F      		rol r17
 1086 021c 221F      		rol r18
 1087 021e 331F      		rol r19
 1088               		2:
 1089 0220 0A94      		dec r0
 1090 0222 02F4      		brpl 1b
 1091               	.LVL103:
 450:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1092               		.loc 1 450 21 is_stmt 1 view .LVU274
 450:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1093               		.loc 1 450 104 is_stmt 0 view .LVU275
 1094 0224 60E0      		ldi r22,0
 1095 0226 70E0      		ldi r23,0
 1096 0228 CB01      		movw r24,r22
 1097 022a D4FF      		sbrs r29,4
 1098 022c 00C0      		rjmp .L76
 450:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1099               		.loc 1 450 94 discriminator 1 view .LVU276
 1100 022e 6FE0      		ldi r22,lo8(15)
 1101 0230 70E0      		ldi r23,0
 1102 0232 80E0      		ldi r24,0
 1103 0234 90E0      		ldi r25,0
 1104 0236 00C0      		rjmp 2f
 1105               		1:
 1106 0238 660F      		lsl r22
 1107 023a 771F      		rol r23
 1108 023c 881F      		rol r24
 1109 023e 991F      		rol r25
 1110               		2:
 1111 0240 4A95      		dec r20
 1112 0242 02F4      		brpl 1b
 450:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1113               		.loc 1 450 104 discriminator 1 view .LVU277
 1114 0244 6095      		com r22
 1115 0246 7095      		com r23
 1116 0248 8095      		com r24
 1117 024a 9095      		com r25
 1118               	.L76:
 1119               	.LVL104:
 451:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1120               		.loc 1 451 21 is_stmt 1 discriminator 4 view .LVU278
 451:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1121               		.loc 1 451 47 is_stmt 0 discriminator 4 view .LVU279
 1122 024c C695      		lsr r28
 1123 024e C695      		lsr r28
 1124               	.LVL105:
 451:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1125               		.loc 1 451 47 discriminator 4 view .LVU280
 1126 0250 C370      		andi r28,lo8(3)
 1127 0252 602B      		or r22,r16
 1128               	.LVL106:
 451:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1129               		.loc 1 451 47 discriminator 4 view .LVU281
 1130 0254 712B      		or r23,r17
 1131 0256 822B      		or r24,r18
 1132 0258 932B      		or r25,r19
 1133 025a C230      		cpi r28,lo8(2)
 1134 025c 01F0      		breq .L77
 1135 025e 00F4      		brsh .L78
 1136 0260 C130      		cpi r28,lo8(1)
 1137 0262 01F0      		breq .L79
 453:tmk_core/common/action.c ****                             break;
 1138               		.loc 1 453 29 is_stmt 1 view .LVU282
 1139 0264 0E94 0000 		call default_layer_and
 1140               	.LVL107:
 454:tmk_core/common/action.c ****                         case OP_BIT_OR:
 1141               		.loc 1 454 29 view .LVU283
 1142 0268 00C0      		rjmp .L38
 1143               	.L79:
 456:tmk_core/common/action.c ****                             break;
 1144               		.loc 1 456 29 view .LVU284
 1145 026a 0E94 0000 		call default_layer_or
 1146               	.LVL108:
 457:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 1147               		.loc 1 457 29 view .LVU285
 1148 026e 00C0      		rjmp .L38
 1149               	.L77:
 459:tmk_core/common/action.c ****                             break;
 1150               		.loc 1 459 29 view .LVU286
 1151 0270 0E94 0000 		call default_layer_xor
 1152               	.LVL109:
 460:tmk_core/common/action.c ****                         case OP_BIT_SET:
 1153               		.loc 1 460 29 view .LVU287
 1154 0274 00C0      		rjmp .L38
 1155               	.L78:
 462:tmk_core/common/action.c ****                             break;
 1156               		.loc 1 462 29 view .LVU288
 1157 0276 0E94 0000 		call default_layer_set
 1158               	.LVL110:
 463:tmk_core/common/action.c ****                     }
 1159               		.loc 1 463 29 view .LVU289
 1160 027a 00C0      		rjmp .L38
 1161               	.LVL111:
 1162               	.L75:
 463:tmk_core/common/action.c ****                     }
 1163               		.loc 1 463 29 is_stmt 0 view .LVU290
 1164               	.LBE36:
 468:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1165               		.loc 1 468 17 is_stmt 1 view .LVU291
 468:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1166               		.loc 1 468 21 is_stmt 0 view .LVU292
 1167 027c 8695      		lsr r24
 1168 027e 1123      		tst r17
 1169 0280 01F0      		breq .L81
 468:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1170               		.loc 1 468 21 discriminator 1 view .LVU293
 1171 0282 8C2F      		mov r24,r28
 1172 0284 8170      		andi r24,lo8(1)
 1173               	.L81:
 468:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1174               		.loc 1 468 20 discriminator 4 view .LVU294
 1175 0286 8823      		tst r24
 1176 0288 01F4      		brne .+2
 1177 028a 00C0      		rjmp .L38
 1178               	.LBB37:
 469:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1179               		.loc 1 469 21 is_stmt 1 view .LVU295
 1180               	.LVL112:
 470:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1181               		.loc 1 470 21 view .LVU296
 469:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1182               		.loc 1 469 61 is_stmt 0 view .LVU297
 1183 028c 4D2F      		mov r20,r29
 1184 028e 4295      		swap r20
 1185 0290 4695      		lsr r20
 1186 0292 4770      		andi r20,lo8(7)
 469:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1187               		.loc 1 469 35 view .LVU298
 1188 0294 440F      		lsl r20
 1189 0296 440F      		lsl r20
 470:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1190               		.loc 1 470 77 view .LVU299
 1191 0298 0D2F      		mov r16,r29
 1192               	.LVL113:
 470:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1193               		.loc 1 470 77 view .LVU300
 1194 029a 0F70      		andi r16,lo8(15)
 470:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1195               		.loc 1 470 44 view .LVU301
 1196 029c 10E0      		ldi r17,0
 1197               	.LVL114:
 470:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1198               		.loc 1 470 44 view .LVU302
 1199 029e 30E0      		ldi r19,0
 1200 02a0 20E0      		ldi r18,0
 470:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1201               		.loc 1 470 35 view .LVU303
 1202 02a2 042E      		mov r0,r20
 1203 02a4 00C0      		rjmp 2f
 1204               		1:
 1205 02a6 000F      		lsl r16
 1206 02a8 111F      		rol r17
 1207 02aa 221F      		rol r18
 1208 02ac 331F      		rol r19
 1209               		2:
 1210 02ae 0A94      		dec r0
 1211 02b0 02F4      		brpl 1b
 1212               	.LVL115:
 471:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1213               		.loc 1 471 21 is_stmt 1 view .LVU304
 471:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1214               		.loc 1 471 104 is_stmt 0 view .LVU305
 1215 02b2 60E0      		ldi r22,0
 1216 02b4 70E0      		ldi r23,0
 1217 02b6 CB01      		movw r24,r22
 1218 02b8 D4FF      		sbrs r29,4
 1219 02ba 00C0      		rjmp .L82
 471:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1220               		.loc 1 471 94 discriminator 1 view .LVU306
 1221 02bc 6FE0      		ldi r22,lo8(15)
 1222 02be 70E0      		ldi r23,0
 1223 02c0 80E0      		ldi r24,0
 1224 02c2 90E0      		ldi r25,0
 1225 02c4 00C0      		rjmp 2f
 1226               		1:
 1227 02c6 660F      		lsl r22
 1228 02c8 771F      		rol r23
 1229 02ca 881F      		rol r24
 1230 02cc 991F      		rol r25
 1231               		2:
 1232 02ce 4A95      		dec r20
 1233 02d0 02F4      		brpl 1b
 471:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1234               		.loc 1 471 104 discriminator 1 view .LVU307
 1235 02d2 6095      		com r22
 1236 02d4 7095      		com r23
 1237 02d6 8095      		com r24
 1238 02d8 9095      		com r25
 1239               	.L82:
 1240               	.LVL116:
 472:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1241               		.loc 1 472 21 is_stmt 1 discriminator 4 view .LVU308
 472:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1242               		.loc 1 472 47 is_stmt 0 discriminator 4 view .LVU309
 1243 02da C695      		lsr r28
 1244 02dc C695      		lsr r28
 1245               	.LVL117:
 472:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1246               		.loc 1 472 47 discriminator 4 view .LVU310
 1247 02de C370      		andi r28,lo8(3)
 1248 02e0 602B      		or r22,r16
 1249               	.LVL118:
 472:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1250               		.loc 1 472 47 discriminator 4 view .LVU311
 1251 02e2 712B      		or r23,r17
 1252 02e4 822B      		or r24,r18
 1253 02e6 932B      		or r25,r19
 1254 02e8 C230      		cpi r28,lo8(2)
 1255 02ea 01F0      		breq .L83
 1256 02ec 00F4      		brsh .L84
 1257 02ee C130      		cpi r28,lo8(1)
 1258 02f0 01F0      		breq .L85
 474:tmk_core/common/action.c ****                             break;
 1259               		.loc 1 474 29 is_stmt 1 view .LVU312
 1260 02f2 0E94 0000 		call layer_and
 1261               	.LVL119:
 475:tmk_core/common/action.c ****                         case OP_BIT_OR:
 1262               		.loc 1 475 29 view .LVU313
 1263 02f6 00C0      		rjmp .L38
 1264               	.L85:
 477:tmk_core/common/action.c ****                             break;
 1265               		.loc 1 477 29 view .LVU314
 1266 02f8 0E94 0000 		call layer_or
 1267               	.LVL120:
 478:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 1268               		.loc 1 478 29 view .LVU315
 1269 02fc 00C0      		rjmp .L38
 1270               	.L83:
 480:tmk_core/common/action.c ****                             break;
 1271               		.loc 1 480 29 view .LVU316
 1272 02fe 0E94 0000 		call layer_xor
 1273               	.LVL121:
 481:tmk_core/common/action.c ****                         case OP_BIT_SET:
 1274               		.loc 1 481 29 view .LVU317
 1275 0302 00C0      		rjmp .L38
 1276               	.L84:
 483:tmk_core/common/action.c ****                             break;
 1277               		.loc 1 483 29 view .LVU318
 1278 0304 0E94 0000 		call layer_state_set
 1279               	.LVL122:
 484:tmk_core/common/action.c ****                     }
 1280               		.loc 1 484 29 view .LVU319
 1281 0308 00C0      		rjmp .L38
 1282               	.LVL123:
 1283               	.L41:
 484:tmk_core/common/action.c ****                     }
 1284               		.loc 1 484 29 is_stmt 0 view .LVU320
 1285               	.LBE37:
 490:tmk_core/common/action.c ****                 layer_on(action.layer_mods.layer);
 1286               		.loc 1 490 13 is_stmt 1 view .LVU321
 1287 030a CF70      		andi r28,lo8(15)
 1288               	.LVL124:
 490:tmk_core/common/action.c ****                 layer_on(action.layer_mods.layer);
 1289               		.loc 1 490 16 is_stmt 0 view .LVU322
 1290 030c 1123      		tst r17
 1291 030e 01F0      		breq .L86
 491:tmk_core/common/action.c ****                 register_mods(action.layer_mods.mods);
 1292               		.loc 1 491 17 is_stmt 1 view .LVU323
 1293 0310 8C2F      		mov r24,r28
 1294 0312 0E94 0000 		call layer_on
 1295               	.LVL125:
 492:tmk_core/common/action.c ****             } else {
 1296               		.loc 1 492 17 view .LVU324
 1297 0316 8D2F      		mov r24,r29
 1298 0318 00C0      		rjmp .L142
 1299               	.L86:
 494:tmk_core/common/action.c ****                 layer_off(action.layer_mods.layer);
 1300               		.loc 1 494 17 view .LVU325
 1301 031a 8D2F      		mov r24,r29
 1302 031c 0E94 0000 		call unregister_mods
 1303               	.LVL126:
 495:tmk_core/common/action.c ****             }
 1304               		.loc 1 495 17 view .LVU326
 1305 0320 8C2F      		mov r24,r28
 1306               	.LVL127:
 1307               	.L138:
 582:tmk_core/common/action.c ****                         }
 1308               		.loc 1 582 29 is_stmt 0 view .LVU327
 1309 0322 0E94 0000 		call layer_off
 1310               	.LVL128:
 1311 0326 00C0      		rjmp .L38
 1312               	.L39:
 501:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 1313               		.loc 1 501 13 is_stmt 1 view .LVU328
 1314 0328 D23F      		cpi r29,lo8(-14)
 1315 032a 01F0      		breq .L87
 1316 032c 00F4      		brsh .L88
 1317 032e D03F      		cpi r29,lo8(-16)
 1318 0330 01F0      		breq .L89
 1319 0332 D13F      		cpi r29,lo8(-15)
 1320 0334 01F0      		breq .L90
 1321               	.L91:
 563:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1322               		.loc 1 563 21 view .LVU329
 563:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1323               		.loc 1 563 24 is_stmt 0 view .LVU330
 1324 0336 1123      		tst r17
 1325 0338 01F4      		brne .+2
 1326 033a 00C0      		rjmp .L100
 564:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1327               		.loc 1 564 25 is_stmt 1 view .LVU331
 564:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1328               		.loc 1 564 28 is_stmt 0 view .LVU332
 1329 033c 0111      		cpse r16,__zero_reg__
 1330 033e 00C0      		rjmp .L143
 568:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 1331               		.loc 1 568 76 is_stmt 1 view .LVU333
 569:tmk_core/common/action.c ****                         }
 1332               		.loc 1 569 29 view .LVU334
 1333 0340 8C2F      		mov r24,r28
 1334 0342 8F71      		andi r24,lo8(31)
 1335 0344 00C0      		rjmp .L140
 1336               	.L88:
 1337 0346 D33F      		cpi r29,lo8(-13)
 1338 0348 01F0      		breq .L92
 1339 034a D43F      		cpi r29,lo8(-12)
 1340 034c 01F4      		brne .L91
 549:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1341               		.loc 1 549 21 view .LVU335
 549:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1342               		.loc 1 549 24 is_stmt 0 view .LVU336
 1343 034e 1123      		tst r17
 1344 0350 01F0      		breq .L99
 550:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1345               		.loc 1 550 25 is_stmt 1 view .LVU337
 550:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1346               		.loc 1 550 50 is_stmt 0 view .LVU338
 1347 0352 CF71      		andi r28,lo8(31)
 1348               	.LVL129:
 550:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1349               		.loc 1 550 25 view .LVU339
 1350 0354 8C2F      		mov r24,r28
 1351 0356 0E94 0000 		call layer_on
 1352               	.LVL130:
 551:tmk_core/common/action.c ****                     } else {
 1353               		.loc 1 551 25 is_stmt 1 view .LVU340
 1354 035a 63E0      		ldi r22,lo8(3)
 1355 035c 8C2F      		mov r24,r28
 1356 035e 0E94 0000 		call set_oneshot_layer
 1357               	.LVL131:
 1358 0362 00C0      		rjmp .L38
 1359               	.LVL132:
 1360               	.L89:
 504:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1361               		.loc 1 504 21 view .LVU341
 504:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1362               		.loc 1 504 24 is_stmt 0 view .LVU342
 1363 0364 1123      		tst r17
 1364 0366 01F0      		breq .L94
 505:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1365               		.loc 1 505 25 is_stmt 1 view .LVU343
 505:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1366               		.loc 1 505 28 is_stmt 0 view .LVU344
 1367 0368 0530      		cpi r16,lo8(5)
 1368 036a 00F0      		brlo .+2
 1369 036c 00C0      		rjmp .L38
 1370               	.L95:
 506:tmk_core/common/action.c ****                         }
 1371               		.loc 1 506 29 is_stmt 1 view .LVU345
 1372 036e 8C2F      		mov r24,r28
 1373 0370 8F71      		andi r24,lo8(31)
 1374 0372 0E94 0000 		call layer_invert
 1375               	.LVL133:
 1376 0376 00C0      		rjmp .L38
 1377               	.L94:
 509:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1378               		.loc 1 509 25 view .LVU346
 509:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1379               		.loc 1 509 28 is_stmt 0 view .LVU347
 1380 0378 0630      		cpi r16,lo8(6)
 1381 037a 00F0      		brlo .+2
 1382 037c 00C0      		rjmp .L38
 1383 037e 00C0      		rjmp .L95
 1384               	.L90:
 515:tmk_core/common/action.c ****                     break;
 1385               		.loc 1 515 21 is_stmt 1 view .LVU348
 1386 0380 8C2F      		mov r24,r28
 1387 0382 8F71      		andi r24,lo8(31)
 515:tmk_core/common/action.c ****                     break;
 1388               		.loc 1 515 68 is_stmt 0 view .LVU349
 1389 0384 1123      		tst r17
 1390 0386 01F0      		breq .L138
 1391               	.L140:
 569:tmk_core/common/action.c ****                         }
 1392               		.loc 1 569 29 view .LVU350
 1393 0388 0E94 0000 		call layer_on
 1394               	.LVL134:
 1395 038c 00C0      		rjmp .L38
 1396               	.L87:
 518:tmk_core/common/action.c ****                     break;
 1397               		.loc 1 518 21 is_stmt 1 view .LVU351
 1398 038e 8C2F      		mov r24,r28
 1399 0390 8F71      		andi r24,lo8(31)
 518:tmk_core/common/action.c ****                     break;
 1400               		.loc 1 518 69 is_stmt 0 view .LVU352
 1401 0392 1123      		tst r17
 1402 0394 01F0      		breq .L140
 1403 0396 00C0      		rjmp .L138
 1404               	.L92:
 521:tmk_core/common/action.c ****                     break;
 1405               		.loc 1 521 21 is_stmt 1 view .LVU353
 521:tmk_core/common/action.c ****                     break;
 1406               		.loc 1 521 70 is_stmt 0 view .LVU354
 1407 0398 1123      		tst r17
 1408 039a 01F0      		breq .L98
 521:tmk_core/common/action.c ****                     break;
 1409               		.loc 1 521 37 discriminator 1 view .LVU355
 1410 039c 8C2F      		mov r24,r28
 1411 039e 8F71      		andi r24,lo8(31)
 1412 03a0 0E94 0000 		call layer_move
 1413               	.LVL135:
 1414 03a4 00C0      		rjmp .L38
 1415               	.L98:
 521:tmk_core/common/action.c ****                     break;
 1416               		.loc 1 521 72 discriminator 2 view .LVU356
 1417 03a6 0E94 0000 		call layer_clear
 1418               	.LVL136:
 1419 03aa 00C0      		rjmp .L38
 1420               	.L99:
 553:tmk_core/common/action.c ****                         if (tap_count > 1) {
 1421               		.loc 1 553 25 is_stmt 1 view .LVU357
 1422 03ac 81E0      		ldi r24,lo8(1)
 1423 03ae 0E94 0000 		call clear_oneshot_layer_state
 1424               	.LVL137:
 554:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1425               		.loc 1 554 25 view .LVU358
 554:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1426               		.loc 1 554 28 is_stmt 0 view .LVU359
 1427 03b2 0230      		cpi r16,lo8(2)
 1428 03b4 00F4      		brsh .+2
 1429 03b6 00C0      		rjmp .L38
 555:tmk_core/common/action.c ****                         }
 1430               		.loc 1 555 29 is_stmt 1 view .LVU360
 1431 03b8 82E0      		ldi r24,lo8(2)
 1432 03ba 0E94 0000 		call clear_oneshot_layer_state
 1433               	.LVL138:
 1434 03be 00C0      		rjmp .L38
 1435               	.L100:
 572:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1436               		.loc 1 572 25 view .LVU361
 572:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1437               		.loc 1 572 28 is_stmt 0 view .LVU362
 1438 03c0 0023      		tst r16
 1439 03c2 01F0      		breq .L102
 573:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 1440               		.loc 1 573 77 is_stmt 1 view .LVU363
 574:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1441               		.loc 1 574 29 view .LVU364
 574:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1442               		.loc 1 574 32 is_stmt 0 view .LVU365
 1443 03c4 D933      		cpi r29,lo8(57)
 1444 03c6 01F0      		breq .+2
 1445 03c8 00C0      		rjmp .L104
 575:tmk_core/common/action.c ****                             } else {
 1446               		.loc 1 575 33 is_stmt 1 view .LVU366
 1447               	.LVL139:
 1448               	.LBB38:
 1449               	.LBI33:
 166:c:\msys64\mingw64\avr\include\util\delay.h **** {
 1450               		.loc 3 166 1 view .LVU367
 1451               	.LBB35:
 168:c:\msys64\mingw64\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1452               		.loc 3 168 2 view .LVU368
 172:c:\msys64\mingw64\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1453               		.loc 3 172 2 view .LVU369
 173:c:\msys64\mingw64\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1454               		.loc 3 173 2 view .LVU370
 174:c:\msys64\mingw64\avr\include\util\delay.h **** 
 1455               		.loc 3 174 2 view .LVU371
 184:c:\msys64\mingw64\avr\include\util\delay.h **** 	#endif
 1456               		.loc 3 184 3 view .LVU372
 1457               		.loc 3 187 2 view .LVU373
 1458 03ca EFEF      		ldi r30,lo8(255999)
 1459 03cc F7EE      		ldi r31,hi8(255999)
 1460 03ce 23E0      		ldi r18,hlo8(255999)
 1461 03d0 E150      	1:	subi r30,1
 1462 03d2 F040      		sbci r31,0
 1463 03d4 2040      		sbci r18,0
 1464 03d6 01F4      		brne 1b
 1465 03d8 00C0      		rjmp .L146
 1466               	.LVL140:
 1467               	.L102:
 1468               		.loc 3 187 2 is_stmt 0 view .LVU374
 1469               	.LBE35:
 1470               	.LBE38:
 581:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 1471               		.loc 1 581 79 is_stmt 1 view .LVU375
 582:tmk_core/common/action.c ****                         }
 1472               		.loc 1 582 29 view .LVU376
 1473 03da 8C2F      		mov r24,r28
 1474 03dc 8F71      		andi r24,lo8(31)
 1475 03de 00C0      		rjmp .L138
 1476               	.LVL141:
 1477               	.L34:
 1478               	/* epilogue start */
 737:tmk_core/common/action.c **** 
 1479               		.loc 1 737 1 is_stmt 0 view .LVU377
 1480 03e0 DF91      		pop r29
 1481               	.LVL142:
 737:tmk_core/common/action.c **** 
 1482               		.loc 1 737 1 view .LVU378
 1483 03e2 CF91      		pop r28
 737:tmk_core/common/action.c **** 
 1484               		.loc 1 737 1 view .LVU379
 1485 03e4 1F91      		pop r17
 1486 03e6 0F91      		pop r16
 1487 03e8 FF90      		pop r15
 1488 03ea EF90      		pop r14
 1489               	.LVL143:
 737:tmk_core/common/action.c **** 
 1490               		.loc 1 737 1 view .LVU380
 1491 03ec DF90      		pop r13
 1492               	.LVL144:
 737:tmk_core/common/action.c **** 
 1493               		.loc 1 737 1 view .LVU381
 1494 03ee CF90      		pop r12
 1495 03f0 BF90      		pop r11
 1496 03f2 0895      		ret
 1497               		.cfi_endproc
 1498               	.LFE115:
 1500               		.section	.text.process_record_handler,"ax",@progbits
 1501               	.global	process_record_handler
 1503               	process_record_handler:
 1504               	.LVL145:
 1505               	.LFB114:
 208:tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 1506               		.loc 1 208 50 is_stmt 1 view -0
 1507               		.cfi_startproc
 208:tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 1508               		.loc 1 208 50 is_stmt 0 view .LVU383
 1509 0000 0F93      		push r16
 1510               	.LCFI15:
 1511               		.cfi_def_cfa_offset 3
 1512               		.cfi_offset 16, -2
 1513 0002 1F93      		push r17
 1514               	.LCFI16:
 1515               		.cfi_def_cfa_offset 4
 1516               		.cfi_offset 17, -3
 1517 0004 CF93      		push r28
 1518               	.LCFI17:
 1519               		.cfi_def_cfa_offset 5
 1520               		.cfi_offset 28, -4
 1521 0006 DF93      		push r29
 1522               	.LCFI18:
 1523               		.cfi_def_cfa_offset 6
 1524               		.cfi_offset 29, -5
 1525               	/* prologue: function */
 1526               	/* frame size = 0 */
 1527               	/* stack size = 4 */
 1528               	.L__stack_usage = 4
 1529 0008 EC01      		movw r28,r24
 209:tmk_core/common/action.c ****     dprint("ACTION: ");
 1530               		.loc 1 209 5 is_stmt 1 view .LVU384
 209:tmk_core/common/action.c ****     dprint("ACTION: ");
 1531               		.loc 1 209 23 is_stmt 0 view .LVU385
 1532 000a 6881      		ld r22,Y
 1533 000c 7981      		ldd r23,Y+1
 1534 000e 8A81      		ldd r24,Y+2
 1535               	.LVL146:
 209:tmk_core/common/action.c ****     dprint("ACTION: ");
 1536               		.loc 1 209 23 view .LVU386
 1537 0010 0E94 0000 		call store_or_get_action
 1538               	.LVL147:
 1539 0014 8C01      		movw r16,r24
 1540               	.LVL148:
 210:tmk_core/common/action.c ****     debug_action(action);
 1541               		.loc 1 210 23 is_stmt 1 view .LVU387
 211:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 1542               		.loc 1 211 5 view .LVU388
 213:tmk_core/common/action.c ****     layer_debug();
 1543               		.loc 1 213 29 view .LVU389
 214:tmk_core/common/action.c ****     dprint(" default_layer_state: ");
 1544               		.loc 1 214 5 view .LVU390
 1545 0016 0E94 0000 		call layer_debug
 1546               	.LVL149:
 215:tmk_core/common/action.c ****     default_layer_debug();
 1547               		.loc 1 215 37 view .LVU391
 216:tmk_core/common/action.c **** #endif
 1548               		.loc 1 216 5 view .LVU392
 1549 001a 0E94 0000 		call default_layer_debug
 1550               	.LVL150:
 218:tmk_core/common/action.c **** 
 1551               		.loc 1 218 15 view .LVU393
 220:tmk_core/common/action.c **** }
 1552               		.loc 1 220 5 view .LVU394
 220:tmk_core/common/action.c **** }
 1553               		.loc 1 220 5 is_stmt 0 view .LVU395
 1554 001e B801      		movw r22,r16
 1555 0020 CE01      		movw r24,r28
 1556               	/* epilogue start */
 221:tmk_core/common/action.c **** 
 1557               		.loc 1 221 1 view .LVU396
 1558 0022 DF91      		pop r29
 1559 0024 CF91      		pop r28
 1560               	.LVL151:
 221:tmk_core/common/action.c **** 
 1561               		.loc 1 221 1 view .LVU397
 1562 0026 1F91      		pop r17
 1563 0028 0F91      		pop r16
 1564               	.LVL152:
 220:tmk_core/common/action.c **** }
 1565               		.loc 1 220 5 view .LVU398
 1566 002a 0C94 0000 		jmp process_action
 1567               	.LVL153:
 220:tmk_core/common/action.c **** }
 1568               		.loc 1 220 5 view .LVU399
 1569               		.cfi_endproc
 1570               	.LFE114:
 1572               		.section	.text.process_record,"ax",@progbits
 1573               	.global	process_record
 1575               	process_record:
 1576               	.LVL154:
 1577               	.LFB113:
 190:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 1578               		.loc 1 190 42 is_stmt 1 view -0
 1579               		.cfi_startproc
 190:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 1580               		.loc 1 190 42 is_stmt 0 view .LVU401
 1581 0000 CF93      		push r28
 1582               	.LCFI19:
 1583               		.cfi_def_cfa_offset 3
 1584               		.cfi_offset 28, -2
 1585 0002 DF93      		push r29
 1586               	.LCFI20:
 1587               		.cfi_def_cfa_offset 4
 1588               		.cfi_offset 29, -3
 1589               	/* prologue: function */
 1590               	/* frame size = 0 */
 1591               	/* stack size = 2 */
 1592               	.L__stack_usage = 2
 1593 0004 EC01      		movw r28,r24
 191:tmk_core/common/action.c ****         return;
 1594               		.loc 1 191 5 is_stmt 1 view .LVU402
 1595               	.LBB41:
 1596               	.LBI41:
 1597               		.file 4 "tmk_core/common/keyboard.h"
   1:tmk_core/common/keyboard.h **** /*
   2:tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/keyboard.h **** 
   4:tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/keyboard.h **** (at your option) any later version.
   8:tmk_core/common/keyboard.h **** 
   9:tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:tmk_core/common/keyboard.h **** 
  14:tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/keyboard.h **** */
  17:tmk_core/common/keyboard.h **** 
  18:tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:tmk_core/common/keyboard.h **** 
  21:tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:tmk_core/common/keyboard.h **** #include <stdint.h>
  23:tmk_core/common/keyboard.h **** 
  24:tmk_core/common/keyboard.h **** #ifdef __cplusplus
  25:tmk_core/common/keyboard.h **** extern "C" {
  26:tmk_core/common/keyboard.h **** #endif
  27:tmk_core/common/keyboard.h **** 
  28:tmk_core/common/keyboard.h **** /* key matrix position */
  29:tmk_core/common/keyboard.h **** typedef struct {
  30:tmk_core/common/keyboard.h ****     uint8_t col;
  31:tmk_core/common/keyboard.h ****     uint8_t row;
  32:tmk_core/common/keyboard.h **** } keypos_t;
  33:tmk_core/common/keyboard.h **** 
  34:tmk_core/common/keyboard.h **** /* key event */
  35:tmk_core/common/keyboard.h **** typedef struct {
  36:tmk_core/common/keyboard.h ****     keypos_t key;
  37:tmk_core/common/keyboard.h ****     bool     pressed;
  38:tmk_core/common/keyboard.h ****     uint16_t time;
  39:tmk_core/common/keyboard.h **** } keyevent_t;
  40:tmk_core/common/keyboard.h **** 
  41:tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  42:tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb) ((keya).row == (keyb).row && (keya).col == (keyb).col)
  43:tmk_core/common/keyboard.h **** 
  44:tmk_core/common/keyboard.h **** /* Rules for No Event:
  45:tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  46:tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  47:tmk_core/common/keyboard.h ****  */
  48:tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 1598               		.loc 4 48 20 view .LVU403
 1599               	.LBB42:
 1600               		.loc 4 48 51 view .LVU404
 1601               		.loc 4 48 74 is_stmt 0 view .LVU405
 1602 0006 8B81      		ldd r24,Y+3
 1603 0008 9C81      		ldd r25,Y+4
 1604               	.LVL155:
 1605               		.loc 4 48 74 view .LVU406
 1606 000a 892B      		or r24,r25
 1607 000c 01F0      		breq .L148
 1608 000e 8881      		ld r24,Y
 1609 0010 9981      		ldd r25,Y+1
 1610 0012 8923      		and r24,r25
 1611 0014 8F3F      		cpi r24,lo8(-1)
 1612 0016 01F4      		brne .L164
 1613               	.L148:
 1614               	/* epilogue start */
 1615               	.LBE42:
 1616               	.LBE41:
 206:tmk_core/common/action.c **** 
 1617               		.loc 1 206 1 view .LVU407
 1618 0018 DF91      		pop r29
 1619 001a CF91      		pop r28
 1620               	.LVL156:
 206:tmk_core/common/action.c **** 
 1621               		.loc 1 206 1 view .LVU408
 1622 001c 0895      		ret
 1623               	.LVL157:
 1624               	.L153:
 204:tmk_core/common/action.c ****     post_process_record_quantum(record);
 1625               		.loc 1 204 5 is_stmt 1 view .LVU409
 1626 001e CE01      		movw r24,r28
 1627 0020 0E94 0000 		call process_record_handler
 1628               	.LVL158:
 205:tmk_core/common/action.c **** }
 1629               		.loc 1 205 5 view .LVU410
 1630 0024 CE01      		movw r24,r28
 1631               	/* epilogue start */
 206:tmk_core/common/action.c **** 
 1632               		.loc 1 206 1 is_stmt 0 view .LVU411
 1633 0026 DF91      		pop r29
 1634 0028 CF91      		pop r28
 1635               	.LVL159:
 205:tmk_core/common/action.c **** }
 1636               		.loc 1 205 5 view .LVU412
 1637 002a 0C94 0000 		jmp post_process_record_quantum
 1638               	.LVL160:
 1639               	.L164:
 195:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 1640               		.loc 1 195 5 is_stmt 1 view .LVU413
 195:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 1641               		.loc 1 195 10 is_stmt 0 view .LVU414
 1642 002e CE01      		movw r24,r28
 1643 0030 0E94 0000 		call process_record_quantum
 1644               	.LVL161:
 195:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 1645               		.loc 1 195 8 view .LVU415
 1646 0034 8111      		cpse r24,__zero_reg__
 1647 0036 00C0      		rjmp .L153
 197:tmk_core/common/action.c ****             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1648               		.loc 1 197 9 is_stmt 1 view .LVU416
 197:tmk_core/common/action.c ****             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1649               		.loc 1 197 13 is_stmt 0 view .LVU417
 1650 0038 0E94 0000 		call is_oneshot_layer_active
 1651               	.LVL162:
 197:tmk_core/common/action.c ****             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1652               		.loc 1 197 12 view .LVU418
 1653 003c 8823      		tst r24
 1654 003e 01F0      		breq .L148
 197:tmk_core/common/action.c ****             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1655               		.loc 1 197 39 discriminator 1 view .LVU419
 1656 0040 8A81      		ldd r24,Y+2
 1657 0042 8823      		tst r24
 1658 0044 01F0      		breq .L148
 198:tmk_core/common/action.c ****         }
 1659               		.loc 1 198 13 is_stmt 1 view .LVU420
 1660 0046 82E0      		ldi r24,lo8(2)
 1661               	/* epilogue start */
 206:tmk_core/common/action.c **** 
 1662               		.loc 1 206 1 is_stmt 0 view .LVU421
 1663 0048 DF91      		pop r29
 1664 004a CF91      		pop r28
 1665               	.LVL163:
 198:tmk_core/common/action.c ****         }
 1666               		.loc 1 198 13 view .LVU422
 1667 004c 0C94 0000 		jmp clear_oneshot_layer_state
 1668               	.LVL164:
 1669               		.cfi_endproc
 1670               	.LFE113:
 1672               		.section	.text.process_record_nocache,"ax",@progbits
 1673               	.global	process_record_nocache
 1675               	process_record_nocache:
 1676               	.LVL165:
 1677               	.LFB109:
 148:tmk_core/common/action.c ****     disable_action_cache = true;
 1678               		.loc 1 148 50 is_stmt 1 view -0
 1679               		.cfi_startproc
 1680               	/* prologue: function */
 1681               	/* frame size = 0 */
 1682               	/* stack size = 0 */
 1683               	.L__stack_usage = 0
 149:tmk_core/common/action.c ****     process_record(record);
 1684               		.loc 1 149 5 view .LVU424
 149:tmk_core/common/action.c ****     process_record(record);
 1685               		.loc 1 149 26 is_stmt 0 view .LVU425
 1686 0000 21E0      		ldi r18,lo8(1)
 1687 0002 2093 0000 		sts disable_action_cache,r18
 150:tmk_core/common/action.c ****     disable_action_cache = false;
 1688               		.loc 1 150 5 is_stmt 1 view .LVU426
 1689 0006 0E94 0000 		call process_record
 1690               	.LVL166:
 151:tmk_core/common/action.c **** }
 1691               		.loc 1 151 5 view .LVU427
 151:tmk_core/common/action.c **** }
 1692               		.loc 1 151 26 is_stmt 0 view .LVU428
 1693 000a 1092 0000 		sts disable_action_cache,__zero_reg__
 1694               	/* epilogue start */
 152:tmk_core/common/action.c **** #else
 1695               		.loc 1 152 1 view .LVU429
 1696 000e 0895      		ret
 1697               		.cfi_endproc
 1698               	.LFE109:
 1700               		.section	.text.register_weak_mods,"ax",@progbits
 1701               	.global	register_weak_mods
 1703               	register_weak_mods:
 1704               	.LVL167:
 1705               	.LFB121:
 934:tmk_core/common/action.c **** 
 935:tmk_core/common/action.c **** /** \brief Adds the given weak modifiers and sends a keyboard report immediately.
 936:tmk_core/common/action.c ****  *
 937:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to register.
 938:tmk_core/common/action.c ****  */
 939:tmk_core/common/action.c **** void register_weak_mods(uint8_t mods) {
 1706               		.loc 1 939 39 is_stmt 1 view -0
 1707               		.cfi_startproc
 1708               	/* prologue: function */
 1709               	/* frame size = 0 */
 1710               	/* stack size = 0 */
 1711               	.L__stack_usage = 0
 940:tmk_core/common/action.c ****     if (mods) {
 1712               		.loc 1 940 5 view .LVU431
 1713               		.loc 1 940 8 is_stmt 0 view .LVU432
 1714 0000 8823      		tst r24
 1715 0002 01F0      		breq .L167
 941:tmk_core/common/action.c ****         add_weak_mods(mods);
 1716               		.loc 1 941 9 is_stmt 1 view .LVU433
 1717 0004 0E94 0000 		call add_weak_mods
 1718               	.LVL168:
 942:tmk_core/common/action.c ****         send_keyboard_report();
 1719               		.loc 1 942 9 view .LVU434
 1720 0008 0C94 0000 		jmp send_keyboard_report
 1721               	.LVL169:
 1722               	.L167:
 1723               	/* epilogue start */
 943:tmk_core/common/action.c ****     }
 944:tmk_core/common/action.c **** }
 1724               		.loc 1 944 1 is_stmt 0 view .LVU435
 1725 000c 0895      		ret
 1726               		.cfi_endproc
 1727               	.LFE121:
 1729               		.section	.text.unregister_weak_mods,"ax",@progbits
 1730               	.global	unregister_weak_mods
 1732               	unregister_weak_mods:
 1733               	.LVL170:
 1734               	.LFB122:
 945:tmk_core/common/action.c **** 
 946:tmk_core/common/action.c **** /** \brief Removes the given weak modifiers and sends a keyboard report immediately.
 947:tmk_core/common/action.c ****  *
 948:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to unregister.
 949:tmk_core/common/action.c ****  */
 950:tmk_core/common/action.c **** void unregister_weak_mods(uint8_t mods) {
 1735               		.loc 1 950 41 is_stmt 1 view -0
 1736               		.cfi_startproc
 1737               	/* prologue: function */
 1738               	/* frame size = 0 */
 1739               	/* stack size = 0 */
 1740               	.L__stack_usage = 0
 951:tmk_core/common/action.c ****     if (mods) {
 1741               		.loc 1 951 5 view .LVU437
 1742               		.loc 1 951 8 is_stmt 0 view .LVU438
 1743 0000 8823      		tst r24
 1744 0002 01F0      		breq .L169
 952:tmk_core/common/action.c ****         del_weak_mods(mods);
 1745               		.loc 1 952 9 is_stmt 1 view .LVU439
 1746 0004 0E94 0000 		call del_weak_mods
 1747               	.LVL171:
 953:tmk_core/common/action.c ****         send_keyboard_report();
 1748               		.loc 1 953 9 view .LVU440
 1749 0008 0C94 0000 		jmp send_keyboard_report
 1750               	.LVL172:
 1751               	.L169:
 1752               	/* epilogue start */
 954:tmk_core/common/action.c ****     }
 955:tmk_core/common/action.c **** }
 1753               		.loc 1 955 1 is_stmt 0 view .LVU441
 1754 000c 0895      		ret
 1755               		.cfi_endproc
 1756               	.LFE122:
 1758               		.section	.text.clear_keyboard_but_mods_and_keys,"ax",@progbits
 1759               	.global	clear_keyboard_but_mods_and_keys
 1761               	clear_keyboard_but_mods_and_keys:
 1762               	.LFB125:
 956:tmk_core/common/action.c **** 
 957:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 958:tmk_core/common/action.c ****  *
 959:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 960:tmk_core/common/action.c ****  */
 961:tmk_core/common/action.c **** void clear_keyboard(void) {
 962:tmk_core/common/action.c ****     clear_mods();
 963:tmk_core/common/action.c ****     clear_keyboard_but_mods();
 964:tmk_core/common/action.c **** }
 965:tmk_core/common/action.c **** 
 966:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 967:tmk_core/common/action.c ****  *
 968:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 969:tmk_core/common/action.c ****  */
 970:tmk_core/common/action.c **** void clear_keyboard_but_mods(void) {
 971:tmk_core/common/action.c ****     clear_keys();
 972:tmk_core/common/action.c ****     clear_keyboard_but_mods_and_keys();
 973:tmk_core/common/action.c **** }
 974:tmk_core/common/action.c **** 
 975:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 976:tmk_core/common/action.c ****  *
 977:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 978:tmk_core/common/action.c ****  */
 979:tmk_core/common/action.c **** void clear_keyboard_but_mods_and_keys() {
 1763               		.loc 1 979 41 is_stmt 1 view -0
 1764               		.cfi_startproc
 1765               	/* prologue: function */
 1766               	/* frame size = 0 */
 1767               	/* stack size = 0 */
 1768               	.L__stack_usage = 0
 980:tmk_core/common/action.c ****     clear_weak_mods();
 1769               		.loc 1 980 5 view .LVU443
 1770 0000 0E94 0000 		call clear_weak_mods
 1771               	.LVL173:
 981:tmk_core/common/action.c ****     clear_macro_mods();
 1772               		.loc 1 981 5 view .LVU444
 1773 0004 0E94 0000 		call clear_macro_mods
 1774               	.LVL174:
 982:tmk_core/common/action.c ****     send_keyboard_report();
 1775               		.loc 1 982 5 view .LVU445
 1776 0008 0E94 0000 		call send_keyboard_report
 1777               	.LVL175:
 983:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 984:tmk_core/common/action.c ****     mousekey_clear();
 985:tmk_core/common/action.c ****     mousekey_send();
 986:tmk_core/common/action.c **** #endif
 987:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 988:tmk_core/common/action.c ****     host_system_send(0);
 1778               		.loc 1 988 5 view .LVU446
 1779 000c 90E0      		ldi r25,0
 1780 000e 80E0      		ldi r24,0
 1781 0010 0E94 0000 		call host_system_send
 1782               	.LVL176:
 989:tmk_core/common/action.c ****     host_consumer_send(0);
 1783               		.loc 1 989 5 view .LVU447
 1784 0014 90E0      		ldi r25,0
 1785 0016 80E0      		ldi r24,0
 1786 0018 0C94 0000 		jmp host_consumer_send
 1787               	.LVL177:
 1788               		.cfi_endproc
 1789               	.LFE125:
 1791               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1792               	.global	clear_keyboard_but_mods
 1794               	clear_keyboard_but_mods:
 1795               	.LFB124:
 970:tmk_core/common/action.c ****     clear_keys();
 1796               		.loc 1 970 36 view -0
 1797               		.cfi_startproc
 1798               	/* prologue: function */
 1799               	/* frame size = 0 */
 1800               	/* stack size = 0 */
 1801               	.L__stack_usage = 0
 971:tmk_core/common/action.c ****     clear_keyboard_but_mods_and_keys();
 1802               		.loc 1 971 5 view .LVU449
 1803 0000 0E94 0000 		call clear_keys
 1804               	.LVL178:
 972:tmk_core/common/action.c **** }
 1805               		.loc 1 972 5 view .LVU450
 1806 0004 0C94 0000 		jmp clear_keyboard_but_mods_and_keys
 1807               	.LVL179:
 1808               		.cfi_endproc
 1809               	.LFE124:
 1811               		.section	.text.clear_keyboard,"ax",@progbits
 1812               	.global	clear_keyboard
 1814               	clear_keyboard:
 1815               	.LFB123:
 961:tmk_core/common/action.c ****     clear_mods();
 1816               		.loc 1 961 27 view -0
 1817               		.cfi_startproc
 1818               	/* prologue: function */
 1819               	/* frame size = 0 */
 1820               	/* stack size = 0 */
 1821               	.L__stack_usage = 0
 962:tmk_core/common/action.c ****     clear_keyboard_but_mods();
 1822               		.loc 1 962 5 view .LVU452
 1823 0000 0E94 0000 		call clear_mods
 1824               	.LVL180:
 963:tmk_core/common/action.c **** }
 1825               		.loc 1 963 5 view .LVU453
 1826 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1827               	.LVL181:
 1828               		.cfi_endproc
 1829               	.LFE123:
 1831               		.section	.text.is_tap_action,"ax",@progbits
 1832               	.global	is_tap_action
 1834               	is_tap_action:
 1835               	.LVL182:
 1836               	.LFB127:
 990:tmk_core/common/action.c **** #endif
 991:tmk_core/common/action.c **** }
 992:tmk_core/common/action.c **** 
 993:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 994:tmk_core/common/action.c ****  *
 995:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 996:tmk_core/common/action.c ****  */
 997:tmk_core/common/action.c **** bool is_tap_key(keypos_t key) {
 998:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 999:tmk_core/common/action.c ****     return is_tap_action(action);
1000:tmk_core/common/action.c **** }
1001:tmk_core/common/action.c **** 
1002:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
1003:tmk_core/common/action.c ****  *
1004:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1005:tmk_core/common/action.c ****  */
1006:tmk_core/common/action.c **** bool is_tap_action(action_t action) {
 1837               		.loc 1 1006 37 view -0
 1838               		.cfi_startproc
 1839               	/* prologue: function */
 1840               	/* frame size = 0 */
 1841               	/* stack size = 0 */
 1842               	.L__stack_usage = 0
1007:tmk_core/common/action.c ****     switch (action.kind.id) {
 1843               		.loc 1 1007 5 view .LVU455
 1844               		.loc 1 1007 24 is_stmt 0 view .LVU456
 1845 0000 E92F      		mov r30,r25
 1846 0002 E295      		swap r30
 1847 0004 EF70      		andi r30,lo8(15)
 1848               		.loc 1 1007 5 view .LVU457
 1849 0006 E250      		subi r30,lo8(-(-2))
 1850 0008 EE30      		cpi r30,lo8(14)
 1851 000a 00F4      		brsh .L183
 1852 000c F0E0      		ldi r31,0
 1853 000e E050      		subi r30,lo8(-(gs(.L177)))
 1854 0010 F040      		sbci r31,hi8(-(gs(.L177)))
 1855 0012 0C94 0000 		jmp __tablejump2__
 1856               		.section	.jumptables.gcc.is_tap_action,"a",@progbits
 1857               		.p2align	1
 1858               	.L177:
 1859 0000 0000      		.word gs(.L178)
 1860 0002 0000      		.word gs(.L178)
 1861 0004 0000      		.word gs(.L183)
 1862 0006 0000      		.word gs(.L183)
 1863 0008 0000      		.word gs(.L179)
 1864 000a 0000      		.word gs(.L183)
 1865 000c 0000      		.word gs(.L183)
 1866 000e 0000      		.word gs(.L183)
 1867 0010 0000      		.word gs(.L178)
 1868 0012 0000      		.word gs(.L178)
 1869 0014 0000      		.word gs(.L176)
 1870 0016 0000      		.word gs(.L183)
 1871 0018 0000      		.word gs(.L183)
 1872 001a 0000      		.word gs(.L176)
 1873               		.section	.text.is_tap_action
 1874               	.L178:
1008:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
1009:tmk_core/common/action.c ****         case ACT_RMODS_TAP:
1010:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
1011:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
1012:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1875               		.loc 1 1012 13 is_stmt 1 view .LVU458
 1876 0016 803F      		cpi r24,lo8(-16)
 1877 0018 01F0      		breq .L186
 1878 001a 00F4      		brsh .L180
 1879 001c 883E      		cpi r24,lo8(-24)
 1880 001e 00F4      		brsh .L183
 1881               	.L186:
1013:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
1014:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
1015:tmk_core/common/action.c ****                 case OP_ONESHOT:
1016:tmk_core/common/action.c ****                     return true;
 1882               		.loc 1 1016 28 is_stmt 0 view .LVU459
 1883 0020 81E0      		ldi r24,lo8(1)
 1884               	.LVL183:
 1885               	/* epilogue start */
1017:tmk_core/common/action.c ****             }
1018:tmk_core/common/action.c ****             return false;
1019:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
1020:tmk_core/common/action.c ****             switch (action.swap.code) {
1021:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
1022:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
1023:tmk_core/common/action.c ****                     return true;
1024:tmk_core/common/action.c ****             }
1025:tmk_core/common/action.c ****             return false;
1026:tmk_core/common/action.c ****         case ACT_MACRO:
1027:tmk_core/common/action.c ****         case ACT_FUNCTION:
1028:tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) {
1029:tmk_core/common/action.c ****                 return true;
1030:tmk_core/common/action.c ****             }
1031:tmk_core/common/action.c ****             return false;
1032:tmk_core/common/action.c ****     }
1033:tmk_core/common/action.c ****     return false;
1034:tmk_core/common/action.c **** }
 1886               		.loc 1 1034 1 view .LVU460
 1887 0022 0895      		ret
 1888               	.LVL184:
 1889               	.L180:
 1890               		.loc 1 1034 1 view .LVU461
 1891 0024 843F      		cpi r24,lo8(-12)
 1892 0026 01F0      		breq .L186
 1893               	.L183:
1018:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 1894               		.loc 1 1018 20 view .LVU462
 1895 0028 80E0      		ldi r24,0
 1896               	.LVL185:
1018:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 1897               		.loc 1 1018 20 view .LVU463
 1898 002a 0895      		ret
 1899               	.LVL186:
 1900               	.L179:
1020:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
 1901               		.loc 1 1020 13 is_stmt 1 view .LVU464
 1902 002c 883E      		cpi r24,lo8(-24)
 1903 002e 00F0      		brlo .L186
 1904 0030 813F      		cpi r24,lo8(-15)
 1905 0032 01F4      		brne .L183
 1906 0034 00C0      		rjmp .L186
 1907               	.L176:
1028:tmk_core/common/action.c ****                 return true;
 1908               		.loc 1 1028 13 view .LVU465
1028:tmk_core/common/action.c ****                 return true;
 1909               		.loc 1 1028 16 is_stmt 0 view .LVU466
 1910 0036 93FB      		bst r25,3
 1911 0038 8827      		clr r24
 1912 003a 80F9      		bld r24,0
 1913               	.LVL187:
1028:tmk_core/common/action.c ****                 return true;
 1914               		.loc 1 1028 16 view .LVU467
 1915 003c 0895      		ret
 1916               		.cfi_endproc
 1917               	.LFE127:
 1919               		.section	.text.is_tap_key,"ax",@progbits
 1920               	.global	is_tap_key
 1922               	is_tap_key:
 1923               	.LVL188:
 1924               	.LFB126:
 997:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 1925               		.loc 1 997 31 is_stmt 1 view -0
 1926               		.cfi_startproc
 1927               	/* prologue: function */
 1928               	/* frame size = 0 */
 1929               	/* stack size = 0 */
 1930               	.L__stack_usage = 0
 998:tmk_core/common/action.c ****     return is_tap_action(action);
 1931               		.loc 1 998 5 view .LVU469
 998:tmk_core/common/action.c ****     return is_tap_action(action);
 1932               		.loc 1 998 23 is_stmt 0 view .LVU470
 1933 0000 0E94 0000 		call layer_switch_get_action
 1934               	.LVL189:
 999:tmk_core/common/action.c **** }
 1935               		.loc 1 999 5 is_stmt 1 view .LVU471
 999:tmk_core/common/action.c **** }
 1936               		.loc 1 999 12 is_stmt 0 view .LVU472
 1937 0004 0C94 0000 		jmp is_tap_action
 1938               	.LVL190:
 1939               		.cfi_endproc
 1940               	.LFE126:
 1942               		.section	.text.debug_event,"ax",@progbits
 1943               	.global	debug_event
 1945               	debug_event:
 1946               	.LFB128:
1035:tmk_core/common/action.c **** 
1036:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
1037:tmk_core/common/action.c ****  *
1038:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1039:tmk_core/common/action.c ****  */
1040:tmk_core/common/action.c **** void debug_event(keyevent_t event) { dprintf("%04X%c(%u)", (event.key.row << 8 | event.key.col), (e
 1947               		.loc 1 1040 36 is_stmt 1 view -0
 1948               		.cfi_startproc
 1949 0000 CF93      		push r28
 1950               	.LCFI21:
 1951               		.cfi_def_cfa_offset 3
 1952               		.cfi_offset 28, -2
 1953 0002 DF93      		push r29
 1954               	.LCFI22:
 1955               		.cfi_def_cfa_offset 4
 1956               		.cfi_offset 29, -3
 1957 0004 00D0      		rcall .
 1958 0006 00D0      		rcall .
 1959 0008 0F92      		push __tmp_reg__
 1960               	.LCFI23:
 1961               		.cfi_def_cfa_offset 9
 1962 000a CDB7      		in r28,__SP_L__
 1963 000c DEB7      		in r29,__SP_H__
 1964               	.LCFI24:
 1965               		.cfi_def_cfa_register 28
 1966               	/* prologue: function */
 1967               	/* frame size = 5 */
 1968               	/* stack size = 7 */
 1969               	.L__stack_usage = 7
 1970               		.loc 1 1040 138 view .LVU474
 1971               	/* epilogue start */
 1972               		.loc 1 1040 1 is_stmt 0 view .LVU475
 1973 000e 0F90      		pop __tmp_reg__
 1974 0010 0F90      		pop __tmp_reg__
 1975 0012 0F90      		pop __tmp_reg__
 1976 0014 0F90      		pop __tmp_reg__
 1977 0016 0F90      		pop __tmp_reg__
 1978 0018 DF91      		pop r29
 1979 001a CF91      		pop r28
 1980 001c 0895      		ret
 1981               		.cfi_endproc
 1982               	.LFE128:
 1984               		.section	.text.debug_record,"ax",@progbits
 1985               	.global	debug_record
 1987               	debug_record:
 1988               	.LFB129:
1041:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
1042:tmk_core/common/action.c ****  *
1043:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1044:tmk_core/common/action.c ****  */
1045:tmk_core/common/action.c **** void debug_record(keyrecord_t record) {
 1989               		.loc 1 1045 39 is_stmt 1 view -0
 1990               		.cfi_startproc
 1991 0000 CF93      		push r28
 1992               	.LCFI25:
 1993               		.cfi_def_cfa_offset 3
 1994               		.cfi_offset 28, -2
 1995 0002 DF93      		push r29
 1996               	.LCFI26:
 1997               		.cfi_def_cfa_offset 4
 1998               		.cfi_offset 29, -3
 1999 0004 00D0      		rcall .
 2000 0006 00D0      		rcall .
 2001 0008 00D0      		rcall .
 2002               	.LCFI27:
 2003               		.cfi_def_cfa_offset 10
 2004 000a CDB7      		in r28,__SP_L__
 2005 000c DEB7      		in r29,__SP_H__
 2006               	.LCFI28:
 2007               		.cfi_def_cfa_register 28
 2008               	/* prologue: function */
 2009               	/* frame size = 6 */
 2010               	/* stack size = 8 */
 2011               	.L__stack_usage = 8
1046:tmk_core/common/action.c ****     debug_event(record.event);
 2012               		.loc 1 1046 5 view .LVU477
1047:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
1048:tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 2013               		.loc 1 1048 77 view .LVU478
 2014               	/* epilogue start */
1049:tmk_core/common/action.c **** #endif
1050:tmk_core/common/action.c **** }
 2015               		.loc 1 1050 1 is_stmt 0 view .LVU479
 2016 000e 2696      		adiw r28,6
 2017 0010 0FB6      		in __tmp_reg__,__SREG__
 2018 0012 F894      		cli
 2019 0014 DEBF      		out __SP_H__,r29
 2020 0016 0FBE      		out __SREG__,__tmp_reg__
 2021 0018 CDBF      		out __SP_L__,r28
 2022 001a DF91      		pop r29
 2023 001c CF91      		pop r28
 2024 001e 0895      		ret
 2025               		.cfi_endproc
 2026               	.LFE129:
 2028               		.section	.text.debug_action,"ax",@progbits
 2029               	.global	debug_action
 2031               	debug_action:
 2032               	.LVL191:
 2033               	.LFB130:
1051:tmk_core/common/action.c **** 
1052:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
1053:tmk_core/common/action.c ****  *
1054:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1055:tmk_core/common/action.c ****  */
1056:tmk_core/common/action.c **** void debug_action(action_t action) {
 2034               		.loc 1 1056 36 is_stmt 1 view -0
 2035               		.cfi_startproc
 2036               	/* prologue: function */
 2037               	/* frame size = 0 */
 2038               	/* stack size = 0 */
 2039               	.L__stack_usage = 0
1057:tmk_core/common/action.c ****     switch (action.kind.id) {
 2040               		.loc 1 1057 5 view .LVU481
1058:tmk_core/common/action.c ****         case ACT_LMODS:
1059:tmk_core/common/action.c ****             dprint("ACT_LMODS");
1060:tmk_core/common/action.c ****             break;
1061:tmk_core/common/action.c ****         case ACT_RMODS:
1062:tmk_core/common/action.c ****             dprint("ACT_RMODS");
1063:tmk_core/common/action.c ****             break;
1064:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
1065:tmk_core/common/action.c ****             dprint("ACT_LMODS_TAP");
1066:tmk_core/common/action.c ****             break;
1067:tmk_core/common/action.c ****         case ACT_RMODS_TAP:
1068:tmk_core/common/action.c ****             dprint("ACT_RMODS_TAP");
1069:tmk_core/common/action.c ****             break;
1070:tmk_core/common/action.c ****         case ACT_USAGE:
1071:tmk_core/common/action.c ****             dprint("ACT_USAGE");
1072:tmk_core/common/action.c ****             break;
1073:tmk_core/common/action.c ****         case ACT_MOUSEKEY:
1074:tmk_core/common/action.c ****             dprint("ACT_MOUSEKEY");
1075:tmk_core/common/action.c ****             break;
1076:tmk_core/common/action.c ****         case ACT_LAYER:
1077:tmk_core/common/action.c ****             dprint("ACT_LAYER");
1078:tmk_core/common/action.c ****             break;
1079:tmk_core/common/action.c ****         case ACT_LAYER_MODS:
1080:tmk_core/common/action.c ****             dprint("ACT_LAYER_MODS");
1081:tmk_core/common/action.c ****             break;
1082:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
1083:tmk_core/common/action.c ****             dprint("ACT_LAYER_TAP");
1084:tmk_core/common/action.c ****             break;
1085:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
1086:tmk_core/common/action.c ****             dprint("ACT_LAYER_TAP_EXT");
1087:tmk_core/common/action.c ****             break;
1088:tmk_core/common/action.c ****         case ACT_MACRO:
1089:tmk_core/common/action.c ****             dprint("ACT_MACRO");
1090:tmk_core/common/action.c ****             break;
1091:tmk_core/common/action.c ****         case ACT_FUNCTION:
1092:tmk_core/common/action.c ****             dprint("ACT_FUNCTION");
1093:tmk_core/common/action.c ****             break;
1094:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
1095:tmk_core/common/action.c ****             dprint("ACT_SWAP_HANDS");
1096:tmk_core/common/action.c ****             break;
1097:tmk_core/common/action.c ****         default:
1098:tmk_core/common/action.c ****             dprint("UNKNOWN");
1099:tmk_core/common/action.c ****             break;
1100:tmk_core/common/action.c ****     }
1101:tmk_core/common/action.c ****     dprintf("[%X:%02X]", action.kind.param >> 8, action.kind.param & 0xff);
 2041               		.loc 1 1101 75 view .LVU482
 2042               	/* epilogue start */
1102:tmk_core/common/action.c **** }
 2043               		.loc 1 1102 1 is_stmt 0 view .LVU483
 2044 0000 0895      		ret
 2045               		.cfi_endproc
 2046               	.LFE130:
 2048               		.section	.rodata.CSWTCH.11,"a"
 2051               	CSWTCH.11:
 2052 0000 E200      		.word	226
 2053 0002 E900      		.word	233
 2054 0004 EA00      		.word	234
 2055 0006 B500      		.word	181
 2056 0008 B600      		.word	182
 2057 000a B700      		.word	183
 2058 000c CD00      		.word	205
 2059 000e 8301      		.word	387
 2060 0010 CC00      		.word	204
 2061 0012 8A01      		.word	394
 2062 0014 9201      		.word	402
 2063 0016 9401      		.word	404
 2064 0018 2102      		.word	545
 2065 001a 2302      		.word	547
 2066 001c 2402      		.word	548
 2067 001e 2502      		.word	549
 2068 0020 2602      		.word	550
 2069 0022 2702      		.word	551
 2070 0024 2A02      		.word	554
 2071 0026 B300      		.word	179
 2072 0028 B400      		.word	180
 2073 002a 6F00      		.word	111
 2074 002c 7000      		.word	112
 2075               		.section	.rodata.CSWTCH.10,"a"
 2078               	CSWTCH.10:
 2079 0000 81        		.byte	-127
 2080 0001 82        		.byte	-126
 2081 0002 83        		.byte	-125
 2082               	.global	disable_action_cache
 2083               		.section	.bss.disable_action_cache,"aw",@nobits
 2086               	disable_action_cache:
 2087 0000 00        		.zero	1
 2088               		.comm	tp_buttons,2,1
 2089               		.text
 2090               	.Letext0:
 2091               		.file 5 "c:\\msys64\\mingw64\\avr\\include\\stdint.h"
 2092               		.file 6 "tmk_core/common/keycode.h"
 2093               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 2094               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 2095               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 2096               		.file 10 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 2097               		.file 11 "c:\\msys64\\mingw64\\avr\\include\\stdio.h"
 2098               		.file 12 "tmk_core/common/host.h"
 2099               		.file 13 "tmk_core/common/mousekey.h"
 2100               		.file 14 "tmk_core/common/command.h"
 2101               		.file 15 "tmk_core/common/action_code.h"
 2102               		.file 16 "tmk_core/common/action.h"
 2103               		.file 17 "tmk_core/common/action_layer.h"
 2104               		.file 18 "tmk_core/common/action_util.h"
 2105               		.file 19 "tmk_core/common/debug.h"
 2106               		.file 20 "tmk_core/common/led.h"
 2107               		.file 21 "tmk_core/common/action_tapping.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:2      *ABS*:000000000000003e __SP_H__
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:3      *ABS*:000000000000003d __SP_L__
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:4      *ABS*:000000000000003f __SREG__
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:5      *ABS*:0000000000000000 __tmp_reg__
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:6      *ABS*:0000000000000001 __zero_reg__
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:13     .text.action_exec:0000000000000000 action_exec
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:94     .text.process_record_quantum:0000000000000000 process_record_quantum
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:116    .text.post_process_record_quantum:0000000000000000 post_process_record_quantum
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:135    .text.process_record_tap_hint:0000000000000000 process_record_tap_hint
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:160    .text.register_code:0000000000000000 register_code
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:2078   .rodata.CSWTCH.10:0000000000000000 CSWTCH.10
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:2051   .rodata.CSWTCH.11:0000000000000000 CSWTCH.11
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:313    .text.unregister_code:0000000000000000 unregister_code
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:403    .text.tap_code:0000000000000000 tap_code
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:468    .text.register_mods:0000000000000000 register_mods
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:497    .text.unregister_mods:0000000000000000 unregister_mods
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:526    .text.process_action:0000000000000000 process_action
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:1575   .text.process_record:0000000000000000 process_record
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:1503   .text.process_record_handler:0000000000000000 process_record_handler
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:1675   .text.process_record_nocache:0000000000000000 process_record_nocache
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:2086   .bss.disable_action_cache:0000000000000000 disable_action_cache
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:1703   .text.register_weak_mods:0000000000000000 register_weak_mods
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:1732   .text.unregister_weak_mods:0000000000000000 unregister_weak_mods
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:1761   .text.clear_keyboard_but_mods_and_keys:0000000000000000 clear_keyboard_but_mods_and_keys
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:1794   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:1814   .text.clear_keyboard:0000000000000000 clear_keyboard
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:1834   .text.is_tap_action:0000000000000000 is_tap_action
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:1922   .text.is_tap_key:0000000000000000 is_tap_key
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:1945   .text.debug_event:0000000000000000 debug_event
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:1987   .text.debug_record:0000000000000000 debug_record
C:\Users\renep\AppData\Local\Temp\cchQKSfi.s:2031   .text.debug_action:0000000000000000 debug_action
                            *COM*:0000000000000002 tp_buttons

UNDEFINED SYMBOLS
action_tapping_process
layer_switch_get_action
keyboard_report
is_key_pressed
del_key
send_keyboard_report
add_key
add_mods
host_system_send
host_consumer_send
del_mods
clear_weak_mods
is_oneshot_layer_active
clear_oneshot_layer_state
__tablejump2__
add_weak_mods
host_keyboard_leds
led_set
get_oneshot_layer_state
get_oneshot_layer
layer_on
layer_off
del_weak_mods
get_oneshot_mods
set_oneshot_mods
clear_oneshot_mods
default_layer_and
default_layer_or
default_layer_xor
default_layer_set
layer_and
layer_or
layer_xor
layer_state_set
set_oneshot_layer
layer_invert
layer_move
layer_clear
store_or_get_action
layer_debug
default_layer_debug
clear_macro_mods
clear_keys
clear_mods
__do_copy_data
__do_clear_bss
